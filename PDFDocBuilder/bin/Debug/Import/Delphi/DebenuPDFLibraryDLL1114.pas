// Debenu Quick PDF Library
// DLL Edition
// Version 11.14

// Copyright © 1999 - 2015 Debenu Pty Ltd

// DebenuPDFLibraryDLL1114.pas
// Delphi import header (compatible with Free Pascal)
// This file was generated by an automated process on 16 April 2015
// http://www.debenu.com/

unit DebenuPDFLibraryDLL1114;

interface

uses
  Windows;

type
  TDebenuPDFLibraryDLL1114 = class
  private
    FLibraryLoaded: Boolean;
    FDLLHandle: Cardinal;
    FInstanceID: Integer;

    DebenuPDFLibraryAddArcToPath: function(InstanceID: Integer; CenterX, 
      CenterY, TotalAngle: Double): Integer; stdcall;
    DebenuPDFLibraryAddBoxToPath: function(InstanceID: Integer; Left, Top, 
      Width, Height: Double): Integer; stdcall;
    DebenuPDFLibraryAddCJKFont: function(InstanceID, 
      CJKFontID: Integer): Integer; stdcall;
    DebenuPDFLibraryAddCurveToPath: function(InstanceID: Integer; CtAX, CtAY, 
      CtBX, CtBY, EndX, EndY: Double): Integer; stdcall;
    DebenuPDFLibraryAddEmbeddedFile: function(InstanceID: Integer; FileName, 
      MIMEType: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAddFileAttachment: function(InstanceID: Integer; 
      Title: PWideChar; EmbeddedFileID: Integer): Integer; stdcall;
    DebenuPDFLibraryAddFormFieldChoiceSub: function(InstanceID, Index: Integer; 
      SubName, DisplayName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAddFormFieldSub: function(InstanceID, Index: Integer; 
      SubName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAddFormFont: function(InstanceID, 
      FontID: Integer): Integer; stdcall;
    DebenuPDFLibraryAddFreeTextAnnotation: function(InstanceID: Integer; Left, 
      Top, Width, Height: Double; Text: PWideChar; Angle, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddFreeTextAnnotationEx: function(InstanceID: Integer; 
      Left, Top, Width, Height: Double; Text: PWideChar; Angle, Options, 
      Transparency: Integer): Integer; stdcall;
    DebenuPDFLibraryAddGlobalJavaScript: function(InstanceID: Integer; 
      PackageName, JavaScript: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAddImageFromFile: function(InstanceID: Integer; 
      FileName: PWideChar; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddImageFromFileOffset: function(InstanceID: Integer; 
      FileName: PWideChar; Offset, DataLength, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddImageFromString: function(InstanceID: Integer; 
      Source: PAnsiChar; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddLGIDictToPage: function(InstanceID: Integer; 
      DictContent: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAddLineToPath: function(InstanceID: Integer; EndX, 
      EndY: Double): Integer; stdcall;
    DebenuPDFLibraryAddLinkToDestination: function(InstanceID: Integer; Left, 
      Top, Width, Height: Double; DestID, Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddLinkToEmbeddedFile: function(InstanceID: Integer; Left, 
      Top, Width, Height: Double; EmbeddedFileID: Integer; Title, 
      Contents: PWideChar; IconType, Transpareny: Integer): Integer; stdcall;
    DebenuPDFLibraryAddLinkToFile: function(InstanceID: Integer; Left, Top, 
      Width, Height: Double; FileName: PWideChar; Page: Integer; 
      Position: Double; NewWindow, Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddLinkToFileDest: function(InstanceID: Integer; Left, Top, 
      Width, Height: Double; FileName, NamedDest: PWideChar; Position: Double; 
      NewWindow, Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddLinkToFileEx: function(InstanceID: Integer; Left, Top, 
      Width, Height: Double; FileName: PWideChar; DestPage, NewWindow, Options, 
      Zoom, DestType: Integer; DestLeft, DestTop, DestRight, 
      DestBottom: Double): Integer; stdcall;
    DebenuPDFLibraryAddLinkToJavaScript: function(InstanceID: Integer; Left, 
      Top, Width, Height: Double; JavaScript: PWideChar; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddLinkToLocalFile: function(InstanceID: Integer; Left, 
      Top, Width, Height: Double; FileName: PWideChar; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddLinkToPage: function(InstanceID: Integer; Left, Top, 
      Width, Height: Double; Page: Integer; Position: Double; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddLinkToWeb: function(InstanceID: Integer; Left, Top, 
      Width, Height: Double; Link: PWideChar; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddNoteAnnotation: function(InstanceID: Integer; Left, 
      Top: Double; AnnotType: Integer; PopupLeft, PopupTop, PopupWidth, 
      PopupHeight: Double; Title, Contents: PWideChar; Red, Green, 
      Blue: Double; Open: Integer): Integer; stdcall;
    DebenuPDFLibraryAddOpenTypeFontFromFile: function(InstanceID: Integer; 
      FileName: PWideChar; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddPageLabels: function(InstanceID, Start, Style, 
      Offset: Integer; Prefix: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAddPageMatrix: function(InstanceID: Integer; xscale, 
      yscale, xoffset, yoffset: Double): Integer; stdcall;
    DebenuPDFLibraryAddRelativeLinkToFile: function(InstanceID: Integer; Left, 
      Top, Width, Height: Double; FileName: PWideChar; Page: Integer; 
      Position: Double; NewWindow, Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddRelativeLinkToFileDest: function(InstanceID: Integer; 
      Left, Top, Width, Height: Double; FileName, NamedDest: PWideChar; 
      Position: Double; NewWindow, Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddRelativeLinkToFileEx: function(InstanceID: Integer; 
      Left, Top, Width, Height: Double; FileName: PWideChar; DestPage, 
      NewWindow, Options, Zoom, DestType: Integer; DestLeft, DestTop, 
      DestRight, DestBottom: Double): Integer; stdcall;
    DebenuPDFLibraryAddRelativeLinkToLocalFile: function(InstanceID: Integer; 
      Left, Top, Width, Height: Double; FileName: PWideChar; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddSVGAnnotationFromFile: function(InstanceID: Integer; 
      Left, Top, Width, Height: Double; FileName: PWideChar; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddSWFAnnotationFromFile: function(InstanceID: Integer; 
      Left, Top, Width, Height: Double; FileName, Title: PWideChar; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddSeparationColor: function(InstanceID: Integer; 
      ColorName: PWideChar; C, M, Y, K: Double; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddStampAnnotation: function(InstanceID: Integer; Left, 
      Top, Width, Height: Double; StampType: Integer; Title, 
      Contents: PWideChar; Red, Green, Blue: Double; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddStampAnnotationFromImage: function(InstanceID: Integer; 
      Left, Top, Width, Height: Double; FileName, Title, Contents: PWideChar; 
      Red, Green, Blue: Double; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddStampAnnotationFromImageID: function(
      InstanceID: Integer; Left, Top, Width, Height: Double; ImageID: Integer; 
      Title, Contents: PWideChar; Red, Green, Blue: Double; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddStandardFont: function(InstanceID, 
      StandardFontID: Integer): Integer; stdcall;
    DebenuPDFLibraryAddSubsettedFont: function(InstanceID: Integer; 
      FontName: PWideChar; CharsetIndex: Integer; 
      SubsetChars: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAddTextMarkupAnnotation: function(InstanceID, 
      MarkupType: Integer; Left, Top, Width, Height: Double): Integer; stdcall;
    DebenuPDFLibraryAddToBuffer: function(InstanceID: Integer; Buffer, 
      Source: PAnsiChar; SourceLength: Integer): Integer; stdcall;
    DebenuPDFLibraryAddToFileList: function(InstanceID: Integer; ListName, 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAddTrueTypeFont: function(InstanceID: Integer; 
      FontName: PWideChar; Embed: Integer): Integer; stdcall;
    DebenuPDFLibraryAddTrueTypeFontFromFile: function(InstanceID: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAddTrueTypeSubsettedFont: function(InstanceID: Integer; 
      FontName, SubsetChars: PWideChar; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAddType1Font: function(InstanceID: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAddU3DAnnotationFromFile: function(InstanceID: Integer; 
      Left, Top, Width, Height: Double; FileName: PWideChar; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryAnalyseFile: function(InstanceID: Integer; InputFileName, 
      Password: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAnnotationCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryAnsiStringResultLength: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryAppendSpace: function(InstanceID: Integer; 
      RelativeSpace: Double): Integer; stdcall;
    DebenuPDFLibraryAppendTableColumns: function(InstanceID, TableID, 
      NewColumnCount: Integer): Integer; stdcall;
    DebenuPDFLibraryAppendTableRows: function(InstanceID, TableID, 
      NewRowCount: Integer): Integer; stdcall;
    DebenuPDFLibraryAppendText: function(InstanceID: Integer; 
      Text: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAppendToFile: function(InstanceID: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAppendToString: function(InstanceID, 
      AppendMode: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryApplyStyle: function(InstanceID: Integer; 
      StyleName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryAttachAnnotToForm: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryBalanceContentStream: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryBalancePageTree: function(InstanceID, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryBeginPageUpdate: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryCapturePage: function(InstanceID, 
      Page: Integer): Integer; stdcall;
    DebenuPDFLibraryCapturePageEx: function(InstanceID, Page, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryCharWidth: function(InstanceID, 
      CharCode: Integer): Integer; stdcall;
    DebenuPDFLibraryCheckFileCompliance: function(InstanceID: Integer; 
      InputFileName, Password: PWideChar; ComplianceTest, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryCheckObjects: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryCheckPageAnnots: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryCheckPassword: function(InstanceID: Integer; 
      Password: PWideChar): Integer; stdcall;
    DebenuPDFLibraryClearFileList: function(InstanceID: Integer; 
      ListName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryClearImage: function(InstanceID, 
      ImageID: Integer): Integer; stdcall;
    DebenuPDFLibraryClearPageLabels: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryClearTextFormatting: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryCloneOutlineAction: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryClonePages: function(InstanceID, StartPage, EndPage, 
      RepeatCount: Integer): Integer; stdcall;
    DebenuPDFLibraryCloseOutline: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryClosePath: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryCombineContentStreams: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryCompareOutlines: function(InstanceID, FirstOutlineID, 
      SecondOutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryCompressContent: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryCompressFonts: function(InstanceID, 
      Compress: Integer): Integer; stdcall;
    DebenuPDFLibraryCompressImages: function(InstanceID, 
      Compress: Integer): Integer; stdcall;
    DebenuPDFLibraryCompressPage: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryContentStreamCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryContentStreamSafe: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryCopyPageRanges: function(InstanceID, DocumentID: Integer; 
      RangeList: PWideChar): Integer; stdcall;
    DebenuPDFLibraryCopyPageRangesEx: function(InstanceID, DocumentID: Integer; 
      RangeList: PWideChar; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryCreateBuffer: function(InstanceID, 
      BufferLength: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryCreateLibrary: function(): Integer; stdcall;
    DebenuPDFLibraryCreateNewObject: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryCreateTable: function(InstanceID, RowCount, 
      ColumnCount: Integer): Integer; stdcall;
    DebenuPDFLibraryDAAppendFile: function(InstanceID, 
      FileHandle: Integer): Integer; stdcall;
    DebenuPDFLibraryDACapturePage: function(InstanceID, FileHandle, 
      PageRef: Integer): Integer; stdcall;
    DebenuPDFLibraryDACapturePageEx: function(InstanceID, FileHandle, PageRef, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryDACloseFile: function(InstanceID, 
      FileHandle: Integer): Integer; stdcall;
    DebenuPDFLibraryDADrawCapturedPage: function(InstanceID, FileHandle, 
      DACaptureID, DestPageRef: Integer; PntLeft, PntBottom, PntWidth, 
      PntHeight: Double): Integer; stdcall;
    DebenuPDFLibraryDADrawRotatedCapturedPage: function(InstanceID, FileHandle, 
      DACaptureID, DestPageRef: Integer; PntLeft, PntBottom, PntWidth, 
      PntHeight, Angle: Double): Integer; stdcall;
    DebenuPDFLibraryDAEmbedFileStreams: function(InstanceID, 
      FileHandle: Integer; RootPath: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDAExtractPageText: function(InstanceID, FileHandle, 
      PageRef, Options: Integer): PWideChar; stdcall;
    DebenuPDFLibraryDAExtractPageTextBlocks: function(InstanceID, FileHandle, 
      PageRef, ExtractOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDAFindPage: function(InstanceID, FileHandle, 
      Page: Integer): Integer; stdcall;
    DebenuPDFLibraryDAGetAnnotationCount: function(InstanceID, FileHandle, 
      PageRef: Integer): Integer; stdcall;
    DebenuPDFLibraryDAGetFormFieldCount: function(InstanceID, 
      FileHandle: Integer): Integer; stdcall;
    DebenuPDFLibraryDAGetFormFieldTitle: function(InstanceID, FileHandle, 
      FieldIndex: Integer): PWideChar; stdcall;
    DebenuPDFLibraryDAGetFormFieldValue: function(InstanceID, FileHandle, 
      FieldIndex: Integer): PWideChar; stdcall;
    DebenuPDFLibraryDAGetImageDataToString: function(InstanceID, FileHandle, 
      ImageListID, ImageIndex: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryDAGetImageDblProperty: function(InstanceID, FileHandle, 
      ImageListID, ImageIndex, PropertyID: Integer): Double; stdcall;
    DebenuPDFLibraryDAGetImageIntProperty: function(InstanceID, FileHandle, 
      ImageListID, ImageIndex, PropertyID: Integer): Integer; stdcall;
    DebenuPDFLibraryDAGetImageListCount: function(InstanceID, FileHandle, 
      ImageListID: Integer): Integer; stdcall;
    DebenuPDFLibraryDAGetInformation: function(InstanceID, FileHandle: Integer; 
      Key: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryDAGetObjectCount: function(InstanceID, 
      FileHandle: Integer): Integer; stdcall;
    DebenuPDFLibraryDAGetObjectToString: function(InstanceID, FileHandle, 
      ObjectNumber: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryDAGetPageBox: function(InstanceID, FileHandle, PageRef, 
      BoxIndex, Dimension: Integer): Double; stdcall;
    DebenuPDFLibraryDAGetPageContentToString: function(InstanceID, FileHandle, 
      PageRef: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryDAGetPageCount: function(InstanceID, 
      FileHandle: Integer): Integer; stdcall;
    DebenuPDFLibraryDAGetPageHeight: function(InstanceID, FileHandle, 
      PageRef: Integer): Double; stdcall;
    DebenuPDFLibraryDAGetPageImageList: function(InstanceID, FileHandle, 
      PageRef: Integer): Integer; stdcall;
    DebenuPDFLibraryDAGetPageWidth: function(InstanceID, FileHandle, 
      PageRef: Integer): Double; stdcall;
    DebenuPDFLibraryDAGetTextBlockAsString: function(InstanceID, 
      TextBlockListID, Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryDAGetTextBlockBound: function(InstanceID, TextBlockListID, 
      Index, BoundIndex: Integer): Double; stdcall;
    DebenuPDFLibraryDAGetTextBlockCharWidth: function(InstanceID, 
      TextBlockListID, Index, CharIndex: Integer): Double; stdcall;
    DebenuPDFLibraryDAGetTextBlockColor: function(InstanceID, TextBlockListID, 
      Index, ColorComponent: Integer): Double; stdcall;
    DebenuPDFLibraryDAGetTextBlockColorType: function(InstanceID, 
      TextBlockListID, Index: Integer): Integer; stdcall;
    DebenuPDFLibraryDAGetTextBlockCount: function(InstanceID, 
      TextBlockListID: Integer): Integer; stdcall;
    DebenuPDFLibraryDAGetTextBlockFontName: function(InstanceID, 
      TextBlockListID, Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryDAGetTextBlockFontSize: function(InstanceID, 
      TextBlockListID, Index: Integer): Double; stdcall;
    DebenuPDFLibraryDAGetTextBlockText: function(InstanceID, TextBlockListID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryDAHasPageBox: function(InstanceID, FileHandle, PageRef, 
      BoxIndex: Integer): Integer; stdcall;
    DebenuPDFLibraryDAHidePage: function(InstanceID, FileHandle, 
      PageRef: Integer): Integer; stdcall;
    DebenuPDFLibraryDAMovePage: function(InstanceID, FileHandle, PageRef, 
      TargetPageRef, Options: Integer): Integer; stdcall;
    DebenuPDFLibraryDANewPage: function(InstanceID, 
      FileHandle: Integer): Integer; stdcall;
    DebenuPDFLibraryDANewPages: function(InstanceID, FileHandle, 
      PageCount: Integer): Integer; stdcall;
    DebenuPDFLibraryDANormalizePage: function(InstanceID, FileHandle, PageRef, 
      NormalizeOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDAOpenFile: function(InstanceID: Integer; InputFileName, 
      Password: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDAOpenFileReadOnly: function(InstanceID: Integer; 
      InputFileName, Password: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDAPageRotation: function(InstanceID, FileHandle, 
      PageRef: Integer): Integer; stdcall;
    DebenuPDFLibraryDAReleaseImageList: function(InstanceID, FileHandle, 
      ImageListID: Integer): Integer; stdcall;
    DebenuPDFLibraryDAReleaseTextBlocks: function(InstanceID, 
      TextBlockListID: Integer): Integer; stdcall;
    DebenuPDFLibraryDARemoveUsageRights: function(InstanceID, 
      FileHandle: Integer): Integer; stdcall;
    DebenuPDFLibraryDARenderPageToDC: function(InstanceID, FileHandle, 
      PageRef: Integer; DPI: Double; DC: HDC): Integer; stdcall;
    DebenuPDFLibraryDARenderPageToFile: function(InstanceID, FileHandle, 
      PageRef, Options: Integer; DPI: Double; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDARenderPageToString: function(InstanceID, FileHandle, 
      PageRef, Options: Integer; DPI: Double): PAnsiChar; stdcall;
    DebenuPDFLibraryDARotatePage: function(InstanceID, FileHandle, PageRef, 
      Angle, Options: Integer): Integer; stdcall;
    DebenuPDFLibraryDASaveAsFile: function(InstanceID, FileHandle: Integer; 
      OutputFileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDASaveImageDataToFile: function(InstanceID, FileHandle, 
      ImageListID, ImageIndex: Integer; 
      ImageFileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDASetInformation: function(InstanceID, FileHandle: Integer; 
      Key, NewValue: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDASetPageBox: function(InstanceID, FileHandle, PageRef, 
      BoxIndex: Integer; X1, Y1, X2, Y2: Double): Integer; stdcall;
    DebenuPDFLibraryDASetPageLayout: function(InstanceID, FileHandle, 
      NewPageLayout: Integer): Integer; stdcall;
    DebenuPDFLibraryDASetPageMode: function(InstanceID, FileHandle, 
      NewPageMode: Integer): Integer; stdcall;
    DebenuPDFLibraryDASetPageSize: function(InstanceID, FileHandle, 
      PageRef: Integer; PntWidth, PntHeight: Double): Integer; stdcall;
    DebenuPDFLibraryDASetTextExtractionArea: function(InstanceID: Integer; 
      Left, Top, Width, Height: Double): Integer; stdcall;
    DebenuPDFLibraryDASetTextExtractionOptions: function(InstanceID, OptionID, 
      NewValue: Integer): Integer; stdcall;
    DebenuPDFLibraryDASetTextExtractionScaling: function(InstanceID, 
      Options: Integer; Horizontal, Vertical: Double): Integer; stdcall;
    DebenuPDFLibraryDASetTextExtractionWordGap: function(InstanceID: Integer; 
      NewWordGap: Double): Integer; stdcall;
    DebenuPDFLibraryDAShiftedHeader: function(InstanceID, 
      FileHandle: Integer): Integer; stdcall;
    DebenuPDFLibraryDecrypt: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryDecryptFile: function(InstanceID: Integer; InputFileName, 
      OutputFileName, Password: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDeleteAnalysis: function(InstanceID, 
      AnalysisID: Integer): Integer; stdcall;
    DebenuPDFLibraryDeleteAnnotation: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryDeleteContentStream: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryDeleteFormField: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryDeleteOptionalContentGroup: function(InstanceID, 
      OptionalContentGroupID: Integer): Integer; stdcall;
    DebenuPDFLibraryDeletePageLGIDict: function(InstanceID, 
      DictIndex: Integer): Integer; stdcall;
    DebenuPDFLibraryDeletePages: function(InstanceID, StartPage, 
      PageCount: Integer): Integer; stdcall;
    DebenuPDFLibraryDocJavaScriptAction: function(InstanceID: Integer; 
      ActionType, JavaScript: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDocumentCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawArc: function(InstanceID: Integer; XPos, YPos, Radius, 
      StartAngle, EndAngle: Double; Pie, 
      DrawOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawBarcode: function(InstanceID: Integer; Left, Top, 
      Width, Height: Double; Text: PWideChar; Barcode, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawBox: function(InstanceID: Integer; Left, Top, Width, 
      Height: Double; DrawOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawCapturedPage: function(InstanceID, CaptureID: Integer; 
      Left, Top, Width, Height: Double): Integer; stdcall;
    DebenuPDFLibraryDrawCapturedPageMatrix: function(InstanceID, 
      CaptureID: Integer; M11, M12, M21, M22, MDX, 
      MDY: Double): Integer; stdcall;
    DebenuPDFLibraryDrawCircle: function(InstanceID: Integer; XPos, YPos, 
      Radius: Double; DrawOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawDataMatrixSymbol: function(InstanceID: Integer; Left, 
      Top, ModuleSize: Double; Text: PWideChar; Encoding, SymbolSize, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawEllipse: function(InstanceID: Integer; XPos, YPos, 
      Width, Height: Double; DrawOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawEllipticArc: function(InstanceID: Integer; XPos, YPos, 
      Width, Height, StartAngle, EndAngle: Double; Pie, 
      DrawOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawHTMLText: function(InstanceID: Integer; Left, Top, 
      Width: Double; HTMLText: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDrawHTMLTextBox: function(InstanceID: Integer; Left, Top, 
      Width, Height: Double; HTMLText: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryDrawHTMLTextBoxMatrix: function(InstanceID: Integer; Width, 
      Height: Double; HTMLText: PWideChar; M11, M12, M21, M22, MDX, 
      MDY: Double): PWideChar; stdcall;
    DebenuPDFLibraryDrawHTMLTextMatrix: function(InstanceID: Integer; 
      Width: Double; HTMLText: PWideChar; M11, M12, M21, M22, MDX, 
      MDY: Double): Integer; stdcall;
    DebenuPDFLibraryDrawImage: function(InstanceID: Integer; Left, Top, Width, 
      Height: Double): Integer; stdcall;
    DebenuPDFLibraryDrawImageMatrix: function(InstanceID: Integer; M11, M12, 
      M21, M22, MDX, MDY: Double): Integer; stdcall;
    DebenuPDFLibraryDrawIntelligentMailBarcode: function(InstanceID: Integer; 
      Left, Top, BarWidth, FullBarHeight, TrackerHeight, SpaceWidth: Double; 
      BarcodeData: PWideChar; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawLine: function(InstanceID: Integer; StartX, StartY, 
      EndX, EndY: Double): Integer; stdcall;
    DebenuPDFLibraryDrawMultiLineText: function(InstanceID: Integer; XPos, 
      YPos: Double; Delimiter, Text: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDrawPDF417Symbol: function(InstanceID: Integer; Left, 
      Top: Double; Text: PWideChar; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawPDF417SymbolEx: function(InstanceID: Integer; Left, 
      Top: Double; Text: PWideChar; Options, FixedColumns, FixedRows, 
      ErrorLevel: Integer; ModuleSize, 
      HeightWidthRatio: Double): Integer; stdcall;
    DebenuPDFLibraryDrawPath: function(InstanceID, 
      PathOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawPathEvenOdd: function(InstanceID, 
      PathOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawPostScriptXObject: function(InstanceID, 
      PSRef: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawQRCode: function(InstanceID: Integer; Left, Top, 
      SymbolSize: Double; Text: PWideChar; EncodeOptions, 
      DrawOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawRotatedBox: function(InstanceID: Integer; Left, Bottom, 
      Width, Height, Angle: Double; DrawOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawRotatedCapturedPage: function(InstanceID, 
      CaptureID: Integer; Left, Bottom, Width, Height, 
      Angle: Double): Integer; stdcall;
    DebenuPDFLibraryDrawRotatedImage: function(InstanceID: Integer; Left, 
      Bottom, Width, Height, Angle: Double): Integer; stdcall;
    DebenuPDFLibraryDrawRotatedMultiLineText: function(InstanceID: Integer; 
      XPos, YPos, Angle: Double; Delimiter, Text: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDrawRotatedText: function(InstanceID: Integer; XPos, YPos, 
      Angle: Double; Text: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDrawRotatedTextBox: function(InstanceID: Integer; Left, 
      Top, Width, Height, Angle: Double; Text: PWideChar; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawRotatedTextBoxEx: function(InstanceID: Integer; Left, 
      Top, Width, Height, Angle: Double; Text: PWideChar; Options, Border, 
      Radius, DrawOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawRoundedBox: function(InstanceID: Integer; Left, Top, 
      Width, Height, Radius: Double; DrawOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawRoundedRotatedBox: function(InstanceID: Integer; Left, 
      Bottom, Width, Height, Radius, Angle: Double; 
      DrawOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawScaledImage: function(InstanceID: Integer; Left, Top, 
      Scale: Double): Integer; stdcall;
    DebenuPDFLibraryDrawSpacedText: function(InstanceID: Integer; XPos, YPos, 
      Spacing: Double; Text: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDrawTableRows: function(InstanceID, TableID: Integer; Left, 
      Top, Height: Double; FirstRow, LastRow: Integer): Double; stdcall;
    DebenuPDFLibraryDrawText: function(InstanceID: Integer; XPos, YPos: Double; 
      Text: PWideChar): Integer; stdcall;
    DebenuPDFLibraryDrawTextArc: function(InstanceID: Integer; XPos, YPos, 
      Radius, Angle: Double; Text: PWideChar; 
      DrawOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawTextBox: function(InstanceID: Integer; Left, Top, 
      Width, Height: Double; Text: PWideChar; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryDrawTextBoxMatrix: function(InstanceID: Integer; Width, 
      Height: Double; Text: PWideChar; Options: Integer; M11, M12, M21, M22, 
      MDX, MDY: Double): Integer; stdcall;
    DebenuPDFLibraryDrawWrappedText: function(InstanceID: Integer; XPos, YPos, 
      Width: Double; Text: PWideChar): Integer; stdcall;
    DebenuPDFLibraryEditableContentStream: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryEmbedFile: function(InstanceID: Integer; Title, FileName, 
      MIMEType: PWideChar): Integer; stdcall;
    DebenuPDFLibraryEmbeddedFileCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryEncapsulateContentStream: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryEncodePermissions: function(InstanceID, CanPrint, CanCopy, 
      CanChange, CanAddNotes, CanFillFields, CanCopyAccess, CanAssemble, 
      CanPrintFull: Integer): Integer; stdcall;
    DebenuPDFLibraryEncrypt: function(InstanceID: Integer; Owner, 
      User: PWideChar; Strength, Permissions: Integer): Integer; stdcall;
    DebenuPDFLibraryEncryptFile: function(InstanceID: Integer; InputFileName, 
      OutputFileName, Owner, User: PWideChar; Strength, 
      Permissions: Integer): Integer; stdcall;
    DebenuPDFLibraryEncryptWithFingerprint: function(InstanceID: Integer; 
      Fingerprint: PWideChar): Integer; stdcall;
    DebenuPDFLibraryEncryptionAlgorithm: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryEncryptionStatus: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryEncryptionStrength: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryEndPageUpdate: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryEndSignProcessToFile: function(InstanceID, 
      SignProcessID: Integer; OutputFile: PWideChar): Integer; stdcall;
    DebenuPDFLibraryEndSignProcessToString: function(InstanceID, 
      SignProcessID: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryExtractFilePageContentToString: function(
      InstanceID: Integer; InputFileName, Password: PWideChar; 
      Page: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryExtractFilePageText: function(InstanceID: Integer; 
      InputFileName, Password: PWideChar; Page, 
      Options: Integer): PWideChar; stdcall;
    DebenuPDFLibraryExtractFilePageTextBlocks: function(InstanceID: Integer; 
      InputFileName, Password: PWideChar; Page, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryExtractFilePages: function(InstanceID: Integer; 
      InputFileName, Password, OutputFileName, 
      RangeList: PWideChar): Integer; stdcall;
    DebenuPDFLibraryExtractFilePagesEx: function(InstanceID: Integer; 
      InputFileName, Password, OutputFileName, RangeList: PWideChar; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryExtractPageRanges: function(InstanceID: Integer; 
      RangeList: PWideChar): Integer; stdcall;
    DebenuPDFLibraryExtractPageTextBlocks: function(InstanceID, 
      ExtractOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryExtractPages: function(InstanceID, StartPage, 
      PageCount: Integer): Integer; stdcall;
    DebenuPDFLibraryFileListCount: function(InstanceID: Integer; 
      ListName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryFileListItem: function(InstanceID: Integer; 
      ListName: PWideChar; Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryFindFonts: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryFindFormFieldByTitle: function(InstanceID: Integer; 
      Title: PWideChar): Integer; stdcall;
    DebenuPDFLibraryFindImages: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryFitImage: function(InstanceID: Integer; Left, Top, Width, 
      Height: Double; HAlign, VAlign, Rotate: Integer): Integer; stdcall;
    DebenuPDFLibraryFitRotatedTextBox: function(InstanceID: Integer; Left, Top, 
      Width, Height, Angle: Double; Text: PWideChar; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryFitTextBox: function(InstanceID: Integer; Left, Top, Width, 
      Height: Double; Text: PWideChar; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryFlattenAnnot: function(InstanceID, Index, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryFlattenFormField: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryFontCount: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryFontFamily: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryFontHasKerning: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryFontName: function(InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryFontReference: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryFontSize: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryFontType: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryFormFieldCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryFormFieldHasParent: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryFormFieldJavaScriptAction: function(InstanceID, 
      Index: Integer; ActionType, JavaScript: PWideChar): Integer; stdcall;
    DebenuPDFLibraryFormFieldWebLinkAction: function(InstanceID, 
      Index: Integer; ActionType, Link: PWideChar): Integer; stdcall;
    DebenuPDFLibraryGetActionDest: function(InstanceID, 
      ActionID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetActionType: function(InstanceID, 
      ActionID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetActionURL: function(InstanceID, 
      ActionID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetAnalysisInfo: function(InstanceID, AnalysisID, 
      AnalysisItem: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetAnnotActionID: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetAnnotDblProperty: function(InstanceID, Index, 
      Tag: Integer): Double; stdcall;
    DebenuPDFLibraryGetAnnotDest: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetAnnotEmbeddedFileName: function(InstanceID, Index, 
      Options: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetAnnotEmbeddedFileToFile: function(InstanceID, Index, 
      Options: Integer; FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryGetAnnotEmbeddedFileToString: function(InstanceID, Index, 
      Options: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryGetAnnotIntProperty: function(InstanceID, Index, 
      Tag: Integer): Integer; stdcall;
    DebenuPDFLibraryGetAnnotQuadCount: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetAnnotQuadPoints: function(InstanceID, Index, QuadNumber, 
      PointNumber: Integer): Double; stdcall;
    DebenuPDFLibraryGetAnnotSoundToFile: function(InstanceID, Index, 
      Options: Integer; SoundFileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryGetAnnotSoundToString: function(InstanceID, Index, 
      Options: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryGetAnnotStrProperty: function(InstanceID, Index, 
      Tag: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetBarcodeWidth: function(InstanceID: Integer; 
      NominalWidth: Double; Text: PWideChar; Barcode: Integer): Double; stdcall;
    DebenuPDFLibraryGetBaseURL: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetCSDictEPSG: function(InstanceID, 
      CSDictID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetCSDictType: function(InstanceID, 
      CSDictID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetCSDictWKT: function(InstanceID, 
      CSDictID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetCanvasDC: function(InstanceID, CanvasWidth, 
      CanvasHeight: Integer): HDC; stdcall;
    DebenuPDFLibraryGetCanvasDCEx: function(InstanceID, CanvasWidth, 
      CanvasHeight, ReferenceDC: Integer): Integer; stdcall;
    DebenuPDFLibraryGetCatalogInformation: function(InstanceID: Integer; 
      Key: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetContentStreamToString: function(
      InstanceID: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryGetCustomInformation: function(InstanceID: Integer; 
      Key: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetCustomKeys: function(InstanceID, 
      Location: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetDefaultPrinterName: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetDestName: function(InstanceID, 
      DestID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetDestPage: function(InstanceID, 
      DestID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetDestType: function(InstanceID, 
      DestID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetDestValue: function(InstanceID, DestID, 
      ValueKey: Integer): Double; stdcall;
    DebenuPDFLibraryGetDocJavaScript: function(InstanceID: Integer; 
      ActionType: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetDocumentFileName: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetDocumentFileSize: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetDocumentID: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetDocumentIdentifier: function(InstanceID, Part, 
      Options: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetDocumentMetadata: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetDocumentRepaired: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetDocumentResourceList: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetEmbeddedFileContentToFile: function(InstanceID, 
      Index: Integer; FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryGetEmbeddedFileContentToString: function(InstanceID, 
      Index: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryGetEmbeddedFileID: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetEmbeddedFileIntProperty: function(InstanceID, Index, 
      Tag: Integer): Integer; stdcall;
    DebenuPDFLibraryGetEmbeddedFileStrProperty: function(InstanceID, Index, 
      Tag: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetEncryptionFingerprint: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetFileMetadata: function(InstanceID: Integer; 
      InputFileName, Password: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetFirstChildOutline: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFirstOutline: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFontEncoding: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFontFlags: function(InstanceID, 
      FontFlagItemID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFontID: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFontIsEmbedded: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFontIsSubsetted: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFontMetrics: function(InstanceID, 
      MetricType: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFontObjectNumber: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldActionID: function(InstanceID, Index: Integer; 
      TriggerEvent: PWideChar): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldAlignment: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldAnnotFlags: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldBackgroundColor: function(InstanceID, Index, 
      ColorComponent: Integer): Double; stdcall;
    DebenuPDFLibraryGetFormFieldBackgroundColorType: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldBorderColor: function(InstanceID, Index, 
      ColorComponent: Integer): Double; stdcall;
    DebenuPDFLibraryGetFormFieldBorderColorType: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldBorderProperty: function(InstanceID, Index, 
      PropKey: Integer): Double; stdcall;
    DebenuPDFLibraryGetFormFieldBorderStyle: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldBound: function(InstanceID, Index, 
      Edge: Integer): Double; stdcall;
    DebenuPDFLibraryGetFormFieldCaption: function(InstanceID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldCaptionEx: function(InstanceID, Index, 
      StringType: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldCheckStyle: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldChildTitle: function(InstanceID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldChoiceType: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldColor: function(InstanceID, Index, 
      ColorComponent: Integer): Double; stdcall;
    DebenuPDFLibraryGetFormFieldComb: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldDefaultValue: function(InstanceID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldDescription: function(InstanceID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldFlags: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldFontName: function(InstanceID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldJavaScript: function(InstanceID, 
      Index: Integer; ActionType: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldKidCount: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldKidTempIndex: function(InstanceID, Index, 
      SubIndex: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldMaxLen: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldNoExport: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldPage: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldPrintable: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldReadOnly: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldRequired: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldRichTextString: function(InstanceID, 
      Index: Integer; Key: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldRotation: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldSubCount: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldSubDisplayName: function(InstanceID, Index, 
      SubIndex: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldSubName: function(InstanceID, Index, 
      SubIndex: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldSubmitActionString: function(InstanceID, 
      Index: Integer; ActionType: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldTabOrder: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldTabOrderEx: function(InstanceID, Index, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldTextFlags: function(InstanceID, Index, 
      ValueKey: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldTextSize: function(InstanceID, 
      Index: Integer): Double; stdcall;
    DebenuPDFLibraryGetFormFieldTitle: function(InstanceID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldType: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldValue: function(InstanceID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldValueByTitle: function(InstanceID: Integer; 
      Title: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFieldVisible: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFieldWebLink: function(InstanceID, Index: Integer; 
      ActionType: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetFormFontCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetFormFontName: function(InstanceID, 
      FontIndex: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetGlobalJavaScript: function(InstanceID: Integer; 
      PackageName: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetHTMLTextHeight: function(InstanceID: Integer; 
      Width: Double; HTMLText: PWideChar): Double; stdcall;
    DebenuPDFLibraryGetHTMLTextLineCount: function(InstanceID: Integer; 
      Width: Double; HTMLText: PWideChar): Integer; stdcall;
    DebenuPDFLibraryGetHTMLTextWidth: function(InstanceID: Integer; 
      MaxWidth: Double; HTMLText: PWideChar): Double; stdcall;
    DebenuPDFLibraryGetImageID: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetImageListCount: function(InstanceID, 
      ImageListID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetImageListItemDataToString: function(InstanceID, 
      ImageListID, ImageIndex, Options: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryGetImageListItemDblProperty: function(InstanceID, 
      ImageListID, ImageIndex, PropertyID: Integer): Double; stdcall;
    DebenuPDFLibraryGetImageListItemFormatDesc: function(InstanceID, 
      ImageListID, ImageIndex, Options: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetImageListItemIntProperty: function(InstanceID, 
      ImageListID, ImageIndex, PropertyID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetImageMeasureDict: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetImagePageCount: function(InstanceID: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryGetImagePageCountFromString: function(InstanceID: Integer; 
      Source: PAnsiChar): Integer; stdcall;
    DebenuPDFLibraryGetImagePtDataDict: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetInformation: function(InstanceID, 
      Key: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetInstalledFontsByCharset: function(InstanceID, 
      CharsetIndex, Options: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetInstalledFontsByCodePage: function(InstanceID, CodePage, 
      Options: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetKerning: function(InstanceID: Integer; 
      CharPair: PWideChar): Integer; stdcall;
    DebenuPDFLibraryGetLatestPrinterNames: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetMaxObjectNumber: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetMeasureDictBoundsCount: function(InstanceID, 
      MeasureDictID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetMeasureDictBoundsItem: function(InstanceID, 
      MeasureDictID, ItemIndex: Integer): Double; stdcall;
    DebenuPDFLibraryGetMeasureDictCoordinateSystem: function(InstanceID, 
      MeasureDictID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetMeasureDictDCSDict: function(InstanceID, 
      MeasureDictID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetMeasureDictGCSDict: function(InstanceID, 
      MeasureDictID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetMeasureDictGPTSCount: function(InstanceID, 
      MeasureDictID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetMeasureDictGPTSItem: function(InstanceID, MeasureDictID, 
      ItemIndex: Integer): Double; stdcall;
    DebenuPDFLibraryGetMeasureDictLPTSCount: function(InstanceID, 
      MeasureDictID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetMeasureDictLPTSItem: function(InstanceID, MeasureDictID, 
      ItemIndex: Integer): Double; stdcall;
    DebenuPDFLibraryGetMeasureDictPDU: function(InstanceID, MeasureDictID, 
      UnitIndex: Integer): Integer; stdcall;
    DebenuPDFLibraryGetNamedDestination: function(InstanceID: Integer; 
      DestName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryGetNextOutline: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetObjectCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetObjectDecodeError: function(InstanceID, 
      ObjectNumber: Integer): Integer; stdcall;
    DebenuPDFLibraryGetObjectToString: function(InstanceID, 
      ObjectNumber: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryGetOpenActionDestination: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOpenActionJavaScript: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetOptionalContentConfigCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOptionalContentConfigLocked: function(InstanceID, 
      OptionalContentConfigID, 
      OptionalContentGroupID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOptionalContentConfigOrderCount: function(InstanceID, 
      OptionalContentConfigID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOptionalContentConfigOrderItemID: function(InstanceID, 
      OptionalContentConfigID, ItemIndex: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOptionalContentConfigOrderItemLabel: function(
      InstanceID, OptionalContentConfigID, 
      ItemIndex: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetOptionalContentConfigOrderItemLevel: function(
      InstanceID, OptionalContentConfigID, 
      ItemIndex: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOptionalContentConfigOrderItemType: function(InstanceID, 
      OptionalContentConfigID, ItemIndex: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOptionalContentConfigState: function(InstanceID, 
      OptionalContentConfigID, 
      OptionalContentGroupID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOptionalContentGroupID: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOptionalContentGroupName: function(InstanceID, 
      OptionalContentGroupID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetOptionalContentGroupPrintable: function(InstanceID, 
      OptionalContentGroupID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOptionalContentGroupVisible: function(InstanceID, 
      OptionalContentGroupID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOrigin: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOutlineActionID: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOutlineColor: function(InstanceID, OutlineID, 
      ColorComponent: Integer): Double; stdcall;
    DebenuPDFLibraryGetOutlineDest: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOutlineID: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOutlineJavaScript: function(InstanceID, 
      OutlineID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetOutlineObjectNumber: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOutlineOpenFile: function(InstanceID, 
      OutlineID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetOutlinePage: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOutlineStyle: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetOutlineWebLink: function(InstanceID, 
      OutlineID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetPageBox: function(InstanceID, BoxType, 
      Dimension: Integer): Double; stdcall;
    DebenuPDFLibraryGetPageColorSpaces: function(InstanceID, 
      Options: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetPageContentToString: function(
      InstanceID: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryGetPageImageList: function(InstanceID, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryGetPageJavaScript: function(InstanceID: Integer; 
      ActionType: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetPageLGIDictContent: function(InstanceID, 
      DictIndex: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetPageLGIDictCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetPageLabel: function(InstanceID, 
      Page: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetPageLayout: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetPageMetricsToString: function(InstanceID, StartPage, 
      EndPage, Options: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryGetPageMode: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetPageText: function(InstanceID, 
      ExtractOptions: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetPageUserUnit: function(
      InstanceID: Integer): Double; stdcall;
    DebenuPDFLibraryGetPageViewPortCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetPageViewPortID: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetParentOutline: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetPrevOutline: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetPrintPreviewBitmapToString: function(
      InstanceID: Integer; PrinterName: PWideChar; PreviewPage, PrintOptions, 
      MaxDimension, PreviewOptions: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryGetPrinterBins: function(InstanceID: Integer; 
      PrinterName: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetPrinterDevModeToString: function(InstanceID: Integer; 
      PrinterName: PWideChar): PAnsiChar; stdcall;
    DebenuPDFLibraryGetPrinterMediaTypes: function(InstanceID: Integer; 
      PrinterName: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetPrinterNames: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetRenderScale: function(
      InstanceID: Integer): Double; stdcall;
    DebenuPDFLibraryGetSignProcessByteRange: function(InstanceID, 
      SignProcessID, ArrayPosition: Integer): Integer; stdcall;
    DebenuPDFLibraryGetSignProcessResult: function(InstanceID, 
      SignProcessID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetStringListCount: function(InstanceID, 
      StringListID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetStringListItem: function(InstanceID, StringListID, 
      ItemIndex: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetTabOrderMode: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetTableCellDblProperty: function(InstanceID, TableID, 
      RowNumber, ColumnNumber, Tag: Integer): Double; stdcall;
    DebenuPDFLibraryGetTableCellIntProperty: function(InstanceID, TableID, 
      RowNumber, ColumnNumber, Tag: Integer): Integer; stdcall;
    DebenuPDFLibraryGetTableCellStrProperty: function(InstanceID, TableID, 
      RowNumber, ColumnNumber, Tag: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetTableColumnCount: function(InstanceID, 
      TableID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetTableLastDrawnRow: function(InstanceID, 
      TableID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetTableRowCount: function(InstanceID, 
      TableID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetTempPath: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetTextAscent: function(
      InstanceID: Integer): Double; stdcall;
    DebenuPDFLibraryGetTextBlockAsString: function(InstanceID, TextBlockListID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetTextBlockBound: function(InstanceID, TextBlockListID, 
      Index, BoundIndex: Integer): Double; stdcall;
    DebenuPDFLibraryGetTextBlockCharWidth: function(InstanceID, 
      TextBlockListID, Index, CharIndex: Integer): Double; stdcall;
    DebenuPDFLibraryGetTextBlockColor: function(InstanceID, TextBlockListID, 
      Index, ColorComponent: Integer): Double; stdcall;
    DebenuPDFLibraryGetTextBlockColorType: function(InstanceID, 
      TextBlockListID, Index: Integer): Integer; stdcall;
    DebenuPDFLibraryGetTextBlockCount: function(InstanceID, 
      TextBlockListID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetTextBlockFontName: function(InstanceID, TextBlockListID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetTextBlockFontSize: function(InstanceID, TextBlockListID, 
      Index: Integer): Double; stdcall;
    DebenuPDFLibraryGetTextBlockText: function(InstanceID, TextBlockListID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetTextBound: function(InstanceID, 
      Edge: Integer): Double; stdcall;
    DebenuPDFLibraryGetTextDescent: function(
      InstanceID: Integer): Double; stdcall;
    DebenuPDFLibraryGetTextHeight: function(
      InstanceID: Integer): Double; stdcall;
    DebenuPDFLibraryGetTextSize: function(InstanceID: Integer): Double; stdcall;
    DebenuPDFLibraryGetTextWidth: function(InstanceID: Integer; 
      Text: PWideChar): Double; stdcall;
    DebenuPDFLibraryGetUnicodeCharactersFromEncoding: function(InstanceID, 
      Encoding: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetViewPortBBox: function(InstanceID, ViewPortID, 
      Dimension: Integer): Double; stdcall;
    DebenuPDFLibraryGetViewPortMeasureDict: function(InstanceID, 
      ViewPortID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetViewPortName: function(InstanceID, 
      ViewPortID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetViewPortPtDataDict: function(InstanceID, 
      ViewPortID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetViewerPreferences: function(InstanceID, 
      Option: Integer): Integer; stdcall;
    DebenuPDFLibraryGetWrappedText: function(InstanceID: Integer; 
      Width: Double; Delimiter, Text: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetWrappedTextBreakString: function(InstanceID: Integer; 
      Width: Double; Delimiter, Text: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetWrappedTextHeight: function(InstanceID: Integer; 
      Width: Double; Text: PWideChar): Double; stdcall;
    DebenuPDFLibraryGetWrappedTextLineCount: function(InstanceID: Integer; 
      Width: Double; Text: PWideChar): Integer; stdcall;
    DebenuPDFLibraryGetXFAFormFieldCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGetXFAFormFieldName: function(InstanceID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryGetXFAFormFieldNames: function(InstanceID: Integer; 
      Delimiter: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetXFAFormFieldValue: function(InstanceID: Integer; 
      XFAFieldName: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryGetXFAToString: function(InstanceID, 
      Options: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryGlobalJavaScriptCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryGlobalJavaScriptPackageName: function(InstanceID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryHasFontResources: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryHasPageBox: function(InstanceID, 
      BoxType: Integer): Integer; stdcall;
    DebenuPDFLibraryHidePage: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryImageCount: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryImageFillColor: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryImageHeight: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryImageHorizontalResolution: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryImageResolutionUnits: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryImageType: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryImageVerticalResolution: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryImageWidth: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryImportEMFFromFile: function(InstanceID: Integer; 
      FileName: PWideChar; FontOptions, 
      GeneralOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryInsertPages: function(InstanceID, StartPage, 
      PageCount: Integer): Integer; stdcall;
    DebenuPDFLibraryInsertTableColumns: function(InstanceID, TableID, Position, 
      NewColumnCount: Integer): Integer; stdcall;
    DebenuPDFLibraryInsertTableRows: function(InstanceID, TableID, Position, 
      NewRowCount: Integer): Integer; stdcall;
    DebenuPDFLibraryIsAnnotFormField: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryIsLinearized: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryIsTaggedPDF: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryLastErrorCode: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryLastRenderError: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryLibraryVersion: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryLibraryVersionEx: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryLicenseInfo: function(
      InstanceID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryLinearizeFile: function(InstanceID: Integer; InputFileName, 
      Password, OutputFileName: PWideChar; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryLoadFromCanvasDC: function(InstanceID: Integer; 
      DPI: Double; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryLoadFromFile: function(InstanceID: Integer; FileName, 
      Password: PWideChar): Integer; stdcall;
    DebenuPDFLibraryLoadFromString: function(InstanceID: Integer; 
      Source: PAnsiChar; Password: PWideChar): Integer; stdcall;
    DebenuPDFLibraryLoadState: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryMergeDocument: function(InstanceID, 
      DocumentID: Integer): Integer; stdcall;
    DebenuPDFLibraryMergeFileList: function(InstanceID: Integer; ListName, 
      OutputFileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryMergeFileListFast: function(InstanceID: Integer; ListName, 
      OutputFileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryMergeFiles: function(InstanceID: Integer; FirstFileName, 
      SecondFileName, OutputFileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryMergeTableCells: function(InstanceID, TableID, FirstRow, 
      FirstColumn, LastRow, LastColumn: Integer): Integer; stdcall;
    DebenuPDFLibraryMoveContentStream: function(InstanceID, FromPosition, 
      ToPosition: Integer): Integer; stdcall;
    DebenuPDFLibraryMoveOutlineAfter: function(InstanceID, OutlineID, 
      SiblingID: Integer): Integer; stdcall;
    DebenuPDFLibraryMoveOutlineBefore: function(InstanceID, OutlineID, 
      SiblingID: Integer): Integer; stdcall;
    DebenuPDFLibraryMovePage: function(InstanceID, 
      NewPosition: Integer): Integer; stdcall;
    DebenuPDFLibraryMovePath: function(InstanceID: Integer; NewX, 
      NewY: Double): Integer; stdcall;
    DebenuPDFLibraryMultiplyScale: function(InstanceID: Integer; 
      MultScaleBy: Double): Integer; stdcall;
    DebenuPDFLibraryNewChildFormField: function(InstanceID, Index: Integer; 
      Title: PWideChar; FieldType: Integer): Integer; stdcall;
    DebenuPDFLibraryNewContentStream: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryNewCustomPrinter: function(InstanceID: Integer; 
      OriginalPrinterName: PWideChar): PWideChar; stdcall;
    DebenuPDFLibraryNewDestination: function(InstanceID, DestPage, Zoom, 
      DestType: Integer; Left, Top, Right, Bottom: Double): Integer; stdcall;
    DebenuPDFLibraryNewDocument: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryNewFormField: function(InstanceID: Integer; 
      Title: PWideChar; FieldType: Integer): Integer; stdcall;
    DebenuPDFLibraryNewInternalPrinterObject: function(InstanceID, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryNewNamedDestination: function(InstanceID: Integer; 
      DestName: PWideChar; DestID: Integer): Integer; stdcall;
    DebenuPDFLibraryNewOptionalContentGroup: function(InstanceID: Integer; 
      GroupName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryNewOutline: function(InstanceID, Parent: Integer; 
      Title: PWideChar; DestPage: Integer; 
      DestPosition: Double): Integer; stdcall;
    DebenuPDFLibraryNewPage: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryNewPageFromCanvasDC: function(InstanceID: Integer; 
      DPI: Double; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryNewPages: function(InstanceID, 
      PageCount: Integer): Integer; stdcall;
    DebenuPDFLibraryNewPostScriptXObject: function(InstanceID: Integer; 
      PS: PWideChar): Integer; stdcall;
    DebenuPDFLibraryNewRGBAxialShader: function(InstanceID: Integer; 
      ShaderName: PWideChar; StartX, StartY, StartRed, StartGreen, StartBlue, 
      EndX, EndY, EndRed, EndGreen, EndBlue: Double; 
      Extend: Integer): Integer; stdcall;
    DebenuPDFLibraryNewSignProcessFromFile: function(InstanceID: Integer; 
      InputFile, Password: PWideChar): Integer; stdcall;
    DebenuPDFLibraryNewSignProcessFromString: function(InstanceID: Integer; 
      Source: PAnsiChar; Password: PWideChar): Integer; stdcall;
    DebenuPDFLibraryNewStaticOutline: function(InstanceID, Parent: Integer; 
      Title: PWideChar): Integer; stdcall;
    DebenuPDFLibraryNewTilingPatternFromCapturedPage: function(
      InstanceID: Integer; PatternName: PWideChar; 
      CaptureID: Integer): Integer; stdcall;
    DebenuPDFLibraryNoEmbedFontListAdd: function(InstanceID: Integer; 
      FontName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryNoEmbedFontListCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryNoEmbedFontListGet: function(InstanceID, 
      Index: Integer): PWideChar; stdcall;
    DebenuPDFLibraryNoEmbedFontListRemoveAll: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryNoEmbedFontListRemoveIndex: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryNoEmbedFontListRemoveName: function(InstanceID: Integer; 
      FontName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryNormalizePage: function(InstanceID, 
      NormalizeOptions: Integer): Integer; stdcall;
    DebenuPDFLibraryOpenOutline: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryOptionalContentGroupCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryOutlineCount: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryOutlineTitle: function(InstanceID, 
      OutlineID: Integer): PWideChar; stdcall;
    DebenuPDFLibraryPageCount: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryPageHasFontResources: function(InstanceID, 
      PageNumber: Integer): Integer; stdcall;
    DebenuPDFLibraryPageHeight: function(InstanceID: Integer): Double; stdcall;
    DebenuPDFLibraryPageJavaScriptAction: function(InstanceID: Integer; 
      ActionType, JavaScript: PWideChar): Integer; stdcall;
    DebenuPDFLibraryPageRotation: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryPageWidth: function(InstanceID: Integer): Double; stdcall;
    DebenuPDFLibraryPrintDocument: function(InstanceID: Integer; 
      PrinterName: PWideChar; StartPage, EndPage, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryPrintDocumentToFile: function(InstanceID: Integer; 
      PrinterName: PWideChar; StartPage, EndPage, Options: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryPrintMode: function(InstanceID, 
      Mode: Integer): Integer; stdcall;
    DebenuPDFLibraryPrintOptions: function(InstanceID, PageScaling, 
      AutoRotateCenter: Integer; Title: PWideChar): Integer; stdcall;
    DebenuPDFLibraryPrintPages: function(InstanceID: Integer; PrinterName, 
      PageRanges: PWideChar; Options: Integer): Integer; stdcall;
    DebenuPDFLibraryPrintPagesToFile: function(InstanceID: Integer; 
      PrinterName, PageRanges: PWideChar; Options: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryReleaseBuffer: function(InstanceID: Integer; 
      Buffer: PAnsiChar): Integer; stdcall;
    DebenuPDFLibraryReleaseImage: function(InstanceID, 
      ImageID: Integer): Integer; stdcall;
    DebenuPDFLibraryReleaseImageList: function(InstanceID, 
      ImageListID: Integer): Integer; stdcall;
    DebenuPDFLibraryReleaseLibrary: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryReleaseSignProcess: function(InstanceID, 
      SignProcessID: Integer): Integer; stdcall;
    DebenuPDFLibraryReleaseStringList: function(InstanceID, 
      StringListID: Integer): Integer; stdcall;
    DebenuPDFLibraryReleaseTextBlocks: function(InstanceID, 
      TextBlockListID: Integer): Integer; stdcall;
    DebenuPDFLibraryRemoveAppearanceStream: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryRemoveCustomInformation: function(InstanceID: Integer; 
      Key: PWideChar): Integer; stdcall;
    DebenuPDFLibraryRemoveDocument: function(InstanceID, 
      DocumentID: Integer): Integer; stdcall;
    DebenuPDFLibraryRemoveEmbeddedFile: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryRemoveFormFieldBackgroundColor: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryRemoveFormFieldBorderColor: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryRemoveFormFieldChoiceSub: function(InstanceID, 
      Index: Integer; SubName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryRemoveGlobalJavaScript: function(InstanceID: Integer; 
      PackageName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryRemoveOpenAction: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryRemoveOutline: function(InstanceID, 
      OutlineID: Integer): Integer; stdcall;
    DebenuPDFLibraryRemovePageBox: function(InstanceID, 
      BoxType: Integer): Integer; stdcall;
    DebenuPDFLibraryRemoveSharedContentStreams: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryRemoveStyle: function(InstanceID: Integer; 
      StyleName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryRemoveUsageRights: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryRemoveXFAEntries: function(InstanceID, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryRenderAsMultipageTIFFToFile: function(InstanceID: Integer; 
      DPI: Double; PageRanges: PWideChar; ImageOptions, OutputOptions: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryRenderDocumentToFile: function(InstanceID: Integer; 
      DPI: Double; StartPage, EndPage, Options: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryRenderPageToDC: function(InstanceID: Integer; DPI: Double; 
      Page: Integer; DC: HDC): Integer; stdcall;
    DebenuPDFLibraryRenderPageToDCClip: function(InstanceID: Integer; 
      DPI: Double; Page, DC: Integer; Clip: PAnsiChar): Integer; stdcall;
    DebenuPDFLibraryRenderPageToFile: function(InstanceID: Integer; 
      DPI: Double; Page, Options: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibraryRenderPageToString: function(InstanceID: Integer; 
      DPI: Double; Page, Options: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryReplaceFonts: function(InstanceID, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryReplaceImage: function(InstanceID, OriginalImageID, 
      NewImageID: Integer): Integer; stdcall;
    DebenuPDFLibraryReplaceTag: function(InstanceID: Integer; Tag, 
      NewValue: PWideChar): Integer; stdcall;
    DebenuPDFLibraryRequestPrinterStatus: function(InstanceID, 
      StatusCommand: Integer): Integer; stdcall;
    DebenuPDFLibraryRetrieveCustomDataToFile: function(InstanceID: Integer; 
      Key, FileName: PWideChar; Location: Integer): Integer; stdcall;
    DebenuPDFLibraryRetrieveCustomDataToString: function(InstanceID: Integer; 
      Key: PAnsiChar; Location: Integer): PAnsiChar; stdcall;
    DebenuPDFLibraryReverseImage: function(InstanceID, 
      Reset: Integer): Integer; stdcall;
    DebenuPDFLibraryRotatePage: function(InstanceID, 
      PageRotation: Integer): Integer; stdcall;
    DebenuPDFLibrarySaveFontToFile: function(InstanceID: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySaveImageListItemDataToFile: function(InstanceID, 
      ImageListID, ImageIndex, Options: Integer; 
      ImageFileName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySaveImageToFile: function(InstanceID: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySaveImageToString: function(
      InstanceID: Integer): PAnsiChar; stdcall;
    DebenuPDFLibrarySaveState: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibrarySaveStyle: function(InstanceID: Integer; 
      StyleName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySaveToFile: function(InstanceID: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySaveToString: function(
      InstanceID: Integer): PAnsiChar; stdcall;
    DebenuPDFLibrarySecurityInfo: function(InstanceID, 
      SecurityItem: Integer): Integer; stdcall;
    DebenuPDFLibrarySelectContentStream: function(InstanceID, 
      NewIndex: Integer): Integer; stdcall;
    DebenuPDFLibrarySelectDocument: function(InstanceID, 
      DocumentID: Integer): Integer; stdcall;
    DebenuPDFLibrarySelectFont: function(InstanceID, 
      FontID: Integer): Integer; stdcall;
    DebenuPDFLibrarySelectImage: function(InstanceID, 
      ImageID: Integer): Integer; stdcall;
    DebenuPDFLibrarySelectPage: function(InstanceID, 
      PageNumber: Integer): Integer; stdcall;
    DebenuPDFLibrarySelectRenderer: function(InstanceID, 
      RendererID: Integer): Integer; stdcall;
    DebenuPDFLibrarySelectedDocument: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibrarySelectedFont: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibrarySelectedImage: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibrarySelectedPage: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetActionURL: function(InstanceID, ActionID: Integer; 
      NewURL: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetAnnotBorderColor: function(InstanceID, Index: Integer; 
      Red, Green, Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetAnnotBorderStyle: function(InstanceID, Index: Integer; 
      Width: Double; Style: Integer; DashOn, DashOff: Double): Integer; stdcall;
    DebenuPDFLibrarySetAnnotContents: function(InstanceID, Index: Integer; 
      NewContents: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetAnnotDblProperty: function(InstanceID, Index, 
      Tag: Integer; NewValue: Double): Integer; stdcall;
    DebenuPDFLibrarySetAnnotIntProperty: function(InstanceID, Index, Tag, 
      NewValue: Integer): Integer; stdcall;
    DebenuPDFLibrarySetAnnotOptional: function(InstanceID, Index, 
      OptionalContentGroupID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetAnnotQuadPoints: function(InstanceID, Index, 
      QuadNumber: Integer; X1, Y1, X2, Y2, X3, Y3, X4, 
      Y4: Double): Integer; stdcall;
    DebenuPDFLibrarySetAnnotRect: function(InstanceID, Index: Integer; Left, 
      Top, Width, Height: Double): Integer; stdcall;
    DebenuPDFLibrarySetAnnotStrProperty: function(InstanceID, Index, 
      Tag: Integer; NewValue: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetAnsiMode: function(InstanceID, 
      NewAnsiMode: Integer): Integer; stdcall;
    DebenuPDFLibrarySetAppendInputFromString: function(InstanceID: Integer; 
      Source: PAnsiChar): Integer; stdcall;
    DebenuPDFLibrarySetBaseURL: function(InstanceID: Integer; 
      NewBaseURL: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetBlendMode: function(InstanceID, 
      BlendMode: Integer): Integer; stdcall;
    DebenuPDFLibrarySetBreakString: function(InstanceID: Integer; 
      NewBreakString: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetCSDictEPSG: function(InstanceID, CSDictID, 
      NewEPSG: Integer): Integer; stdcall;
    DebenuPDFLibrarySetCSDictType: function(InstanceID, CSDictID, 
      NewDictType: Integer): Integer; stdcall;
    DebenuPDFLibrarySetCSDictWKT: function(InstanceID, CSDictID: Integer; 
      NewWKT: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetCairoFileName: function(InstanceID: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetCapturedPageOptional: function(InstanceID, CaptureID, 
      OptionalContentGroupID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetCapturedPageTransparencyGroup: function(InstanceID, 
      CaptureID, CS, Isolate, Knockout: Integer): Integer; stdcall;
    DebenuPDFLibrarySetCatalogInformation: function(InstanceID: Integer; Key, 
      NewValue: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetCharWidth: function(InstanceID, CharCode, 
      NewWidth: Integer): Integer; stdcall;
    DebenuPDFLibrarySetClippingPath: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetClippingPathEvenOdd: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetCompatibility: function(InstanceID, CompatibilityItem, 
      CompatibilityMode: Integer): Integer; stdcall;
    DebenuPDFLibrarySetContentStreamFromString: function(InstanceID: Integer; 
      Source: PAnsiChar): Integer; stdcall;
    DebenuPDFLibrarySetContentStreamOptional: function(InstanceID, 
      OptionalContentGroupID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetCropBox: function(InstanceID: Integer; Left, Top, Width, 
      Height: Double): Integer; stdcall;
    DebenuPDFLibrarySetCustomInformation: function(InstanceID: Integer; Key, 
      NewValue: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetCustomLineDash: function(InstanceID: Integer; 
      DashPattern: PWideChar; DashPhase: Double): Integer; stdcall;
    DebenuPDFLibrarySetDPLRFileName: function(InstanceID: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetDecodeMode: function(InstanceID, 
      NewDecodeMode: Integer): Integer; stdcall;
    DebenuPDFLibrarySetDestProperties: function(InstanceID, DestID, Zoom, 
      DestType: Integer; Left, Top, Right, Bottom: Double): Integer; stdcall;
    DebenuPDFLibrarySetDestValue: function(InstanceID, DestID, 
      ValueKey: Integer; NewValue: Double): Integer; stdcall;
    DebenuPDFLibrarySetDocumentMetadata: function(InstanceID: Integer; 
      XMP: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetEmbeddedFileStrProperty: function(InstanceID, Index, 
      Tag: Integer; NewValue: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFillColor: function(InstanceID: Integer; Red, Green, 
      Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetFillColorCMYK: function(InstanceID: Integer; C, M, Y, 
      K: Double): Integer; stdcall;
    DebenuPDFLibrarySetFillColorSep: function(InstanceID: Integer; 
      ColorName: PWideChar; Tint: Double): Integer; stdcall;
    DebenuPDFLibrarySetFillShader: function(InstanceID: Integer; 
      ShaderName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFillTilingPattern: function(InstanceID: Integer; 
      PatternName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFindImagesMode: function(InstanceID, 
      NewFindImagesMode: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFontEncoding: function(InstanceID, 
      Encoding: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFontFlags: function(InstanceID, Fixed, Serif, Symbolic, 
      Script, Italic, AllCap, SmallCap, ForceBold: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldAlignment: function(InstanceID, Index, 
      Alignment: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldAnnotFlags: function(InstanceID, Index, 
      NewFlags: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldBackgroundColor: function(InstanceID, 
      Index: Integer; Red, Green, Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldBackgroundColorCMYK: function(InstanceID, 
      Index: Integer; C, M, Y, K: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldBackgroundColorGray: function(InstanceID, 
      Index: Integer; Gray: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldBackgroundColorSep: function(InstanceID, 
      Index: Integer; ColorName: PWideChar; Tint: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldBorderColor: function(InstanceID, 
      Index: Integer; Red, Green, Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldBorderColorCMYK: function(InstanceID, 
      Index: Integer; C, M, Y, K: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldBorderColorGray: function(InstanceID, 
      Index: Integer; Gray: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldBorderColorSep: function(InstanceID, 
      Index: Integer; ColorName: PWideChar; Tint: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldBorderStyle: function(InstanceID, 
      Index: Integer; Width: Double; Style: Integer; DashOn, 
      DashOff: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldBounds: function(InstanceID, Index: Integer; 
      Left, Top, Width, Height: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldCalcOrder: function(InstanceID, Index, 
      Order: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldCaption: function(InstanceID, Index: Integer; 
      NewCaption: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldCheckStyle: function(InstanceID, Index, 
      CheckStyle, Position: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldChildTitle: function(InstanceID, 
      Index: Integer; NewTitle: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldChoiceSub: function(InstanceID, Index, 
      SubIndex: Integer; SubName, DisplayName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldChoiceType: function(InstanceID, Index, 
      ChoiceType: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldColor: function(InstanceID, Index: Integer; 
      Red, Green, Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldColorCMYK: function(InstanceID, Index: Integer; 
      C, M, Y, K: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldColorSep: function(InstanceID, Index: Integer; 
      ColorName: PWideChar; Tint: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldComb: function(InstanceID, Index, 
      Comb: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldDefaultValue: function(InstanceID, 
      Index: Integer; NewDefaultValue: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldDescription: function(InstanceID, 
      Index: Integer; NewDescription: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldFlags: function(InstanceID, Index, 
      NewFlags: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldFont: function(InstanceID, Index, 
      FontIndex: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldHighlightMode: function(InstanceID, Index, 
      NewMode: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldIcon: function(InstanceID, Index, IconType, 
      CaptureID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldIconStyle: function(InstanceID, Index, 
      Placement, Scale, ScaleType, HorizontalShift, 
      VerticalShift: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldMaxLen: function(InstanceID, Index, 
      NewMaxLen: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldNoExport: function(InstanceID, Index, 
      NoExport: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldOptional: function(InstanceID, Index, 
      OptionalContentGroupID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldPage: function(InstanceID, Index, 
      NewPage: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldPrintable: function(InstanceID, Index, 
      Printable: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldReadOnly: function(InstanceID, Index, 
      ReadOnly: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldRequired: function(InstanceID, Index, 
      Required: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldResetAction: function(InstanceID, 
      Index: Integer; ActionType: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldRichTextString: function(InstanceID, 
      Index: Integer; Key, NewValue: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldRotation: function(InstanceID, Index, 
      Angle: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldSignatureImage: function(InstanceID, Index, 
      ImageID, Options: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldStandardFont: function(InstanceID, Index, 
      StandardFontID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldSubmitAction: function(InstanceID, 
      Index: Integer; ActionType, Link: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldSubmitActionEx: function(InstanceID, 
      Index: Integer; ActionType, Link: PWideChar; 
      Flags: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldTabOrder: function(InstanceID, Index, 
      Order: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldTextFlags: function(InstanceID, Index, 
      Multiline, Password, FileSelect, DoNotSpellCheck, 
      DoNotScroll: Integer): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldTextSize: function(InstanceID, Index: Integer; 
      NewTextSize: Double): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldTitle: function(InstanceID, Index: Integer; 
      NewTitle: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldValue: function(InstanceID, Index: Integer; 
      NewValue: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldValueByTitle: function(InstanceID: Integer; 
      Title, NewValue: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetFormFieldVisible: function(InstanceID, Index, 
      Visible: Integer): Integer; stdcall;
    DebenuPDFLibrarySetGDIPlusFileName: function(InstanceID: Integer; 
      DLLFileName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetGDIPlusOptions: function(InstanceID, OptionID, 
      NewValue: Integer): Integer; stdcall;
    DebenuPDFLibrarySetHTMLBoldFont: function(InstanceID: Integer; 
      FontSet: PWideChar; FontID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetHTMLBoldItalicFont: function(InstanceID: Integer; 
      FontSet: PWideChar; FontID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetHTMLItalicFont: function(InstanceID: Integer; 
      FontSet: PWideChar; FontID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetHTMLNormalFont: function(InstanceID: Integer; 
      FontSet: PWideChar; FontID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetHeaderCommentsFromString: function(InstanceID: Integer; 
      Source: PAnsiChar): Integer; stdcall;
    DebenuPDFLibrarySetImageAsMask: function(InstanceID, 
      MaskType: Integer): Integer; stdcall;
    DebenuPDFLibrarySetImageMask: function(InstanceID: Integer; FromRed, 
      FromGreen, FromBlue, ToRed, ToGreen, ToBlue: Double): Integer; stdcall;
    DebenuPDFLibrarySetImageMaskCMYK: function(InstanceID: Integer; FromC, 
      FromM, FromY, FromK, ToC, ToM, ToY, ToK: Double): Integer; stdcall;
    DebenuPDFLibrarySetImageMaskFromImage: function(InstanceID, 
      ImageID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetImageOptional: function(InstanceID, 
      OptionalContentGroupID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetImageResolution: function(InstanceID, Horizontal, 
      Vertical, Units: Integer): Integer; stdcall;
    DebenuPDFLibrarySetInformation: function(InstanceID, Key: Integer; 
      NewValue: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetJPEGQuality: function(InstanceID, 
      Quality: Integer): Integer; stdcall;
    DebenuPDFLibrarySetJavaScriptMode: function(InstanceID, 
      JSMode: Integer): Integer; stdcall;
    DebenuPDFLibrarySetKerning: function(InstanceID: Integer; 
      CharPair: PWideChar; Adjustment: Integer): Integer; stdcall;
    DebenuPDFLibrarySetLineCap: function(InstanceID, 
      LineCap: Integer): Integer; stdcall;
    DebenuPDFLibrarySetLineColor: function(InstanceID: Integer; Red, Green, 
      Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetLineColorCMYK: function(InstanceID: Integer; C, M, Y, 
      K: Double): Integer; stdcall;
    DebenuPDFLibrarySetLineColorSep: function(InstanceID: Integer; 
      ColorName: PWideChar; Tint: Double): Integer; stdcall;
    DebenuPDFLibrarySetLineDash: function(InstanceID: Integer; DashOn, 
      DashOff: Double): Integer; stdcall;
    DebenuPDFLibrarySetLineDashEx: function(InstanceID: Integer; 
      DashValues: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetLineJoin: function(InstanceID, 
      LineJoin: Integer): Integer; stdcall;
    DebenuPDFLibrarySetLineShader: function(InstanceID: Integer; 
      ShaderName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetLineWidth: function(InstanceID: Integer; 
      LineWidth: Double): Integer; stdcall;
    DebenuPDFLibrarySetMarkupAnnotStyle: function(InstanceID, Index: Integer; 
      Red, Green, Blue, Transparency: Double): Integer; stdcall;
    DebenuPDFLibrarySetMeasureDictBoundsCount: function(InstanceID, 
      MeasureDictID, NewCount: Integer): Integer; stdcall;
    DebenuPDFLibrarySetMeasureDictBoundsItem: function(InstanceID, 
      MeasureDictID, ItemIndex: Integer; NewValue: Double): Integer; stdcall;
    DebenuPDFLibrarySetMeasureDictCoordinateSystem: function(InstanceID, 
      MeasureDictID, CoordinateSystemID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetMeasureDictGPTSCount: function(InstanceID, 
      MeasureDictID, NewCount: Integer): Integer; stdcall;
    DebenuPDFLibrarySetMeasureDictGPTSItem: function(InstanceID, MeasureDictID, 
      ItemIndex: Integer; NewValue: Double): Integer; stdcall;
    DebenuPDFLibrarySetMeasureDictLPTSCount: function(InstanceID, 
      MeasureDictID, NewCount: Integer): Integer; stdcall;
    DebenuPDFLibrarySetMeasureDictLPTSItem: function(InstanceID, MeasureDictID, 
      ItemIndex: Integer; NewValue: Double): Integer; stdcall;
    DebenuPDFLibrarySetMeasureDictPDU: function(InstanceID, MeasureDictID, 
      LinearUnit, AreaUnit, AngularUnit: Integer): Integer; stdcall;
    DebenuPDFLibrarySetMeasurementUnits: function(InstanceID, 
      MeasurementUnits: Integer): Integer; stdcall;
    DebenuPDFLibrarySetNeedAppearances: function(InstanceID, 
      NewValue: Integer): Integer; stdcall;
    DebenuPDFLibrarySetObjectFromString: function(InstanceID, 
      ObjectNumber: Integer; Source: PAnsiChar): Integer; stdcall;
    DebenuPDFLibrarySetOpenActionDestination: function(InstanceID, OpenPage, 
      Zoom: Integer): Integer; stdcall;
    DebenuPDFLibrarySetOpenActionDestinationFull: function(InstanceID, 
      OpenPage, Zoom, DestType: Integer; Left, Top, Right, 
      Bottom: Double): Integer; stdcall;
    DebenuPDFLibrarySetOpenActionJavaScript: function(InstanceID: Integer; 
      JavaScript: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetOpenActionMenu: function(InstanceID: Integer; 
      MenuItem: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetOptionalContentConfigLocked: function(InstanceID, 
      OptionalContentConfigID, OptionalContentGroupID, 
      NewLocked: Integer): Integer; stdcall;
    DebenuPDFLibrarySetOptionalContentConfigState: function(InstanceID, 
      OptionalContentConfigID, OptionalContentGroupID, 
      NewState: Integer): Integer; stdcall;
    DebenuPDFLibrarySetOptionalContentGroupName: function(InstanceID, 
      OptionalContentGroupID: Integer; 
      NewGroupName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetOptionalContentGroupPrintable: function(InstanceID, 
      OptionalContentGroupID, Printable: Integer): Integer; stdcall;
    DebenuPDFLibrarySetOptionalContentGroupVisible: function(InstanceID, 
      OptionalContentGroupID, Visible: Integer): Integer; stdcall;
    DebenuPDFLibrarySetOrigin: function(InstanceID, 
      Origin: Integer): Integer; stdcall;
    DebenuPDFLibrarySetOutlineColor: function(InstanceID, OutlineID: Integer; 
      Red, Green, Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetOutlineDestination: function(InstanceID, OutlineID, 
      DestPage: Integer; DestPosition: Double): Integer; stdcall;
    DebenuPDFLibrarySetOutlineDestinationFull: function(InstanceID, OutlineID, 
      DestPage, Zoom, DestType: Integer; Left, Top, Right, 
      Bottom: Double): Integer; stdcall;
    DebenuPDFLibrarySetOutlineDestinationZoom: function(InstanceID, OutlineID, 
      DestPage: Integer; DestPosition: Double; Zoom: Integer): Integer; stdcall;
    DebenuPDFLibrarySetOutlineJavaScript: function(InstanceID, 
      OutlineID: Integer; JavaScript: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetOutlineNamedDestination: function(InstanceID, 
      OutlineID: Integer; DestName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetOutlineOpenFile: function(InstanceID, 
      OutlineID: Integer; FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetOutlineRemoteDestination: function(InstanceID, 
      OutlineID: Integer; FileName: PWideChar; OpenPage, Zoom, 
      DestType: Integer; PntLeft, PntTop, PntRight, PntBottom: Double; 
      NewWindow: Integer): Integer; stdcall;
    DebenuPDFLibrarySetOutlineStyle: function(InstanceID, OutlineID, SetItalic, 
      SetBold: Integer): Integer; stdcall;
    DebenuPDFLibrarySetOutlineTitle: function(InstanceID, OutlineID: Integer; 
      NewTitle: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetOutlineWebLink: function(InstanceID, OutlineID: Integer; 
      Link: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetOverprint: function(InstanceID, StrokingOverprint, 
      OtherOverprint, OverprintMode: Integer): Integer; stdcall;
    DebenuPDFLibrarySetPDFAMode: function(InstanceID, 
      NewMode: Integer): Integer; stdcall;
    DebenuPDFLibrarySetPNGTransparencyColor: function(InstanceID, RedByte, 
      GreenByte, BlueByte: Integer): Integer; stdcall;
    DebenuPDFLibrarySetPageActionMenu: function(InstanceID: Integer; 
      MenuItem: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetPageBox: function(InstanceID, BoxType: Integer; Left, 
      Top, Width, Height: Double): Integer; stdcall;
    DebenuPDFLibrarySetPageContentFromString: function(InstanceID: Integer; 
      Source: PAnsiChar): Integer; stdcall;
    DebenuPDFLibrarySetPageDimensions: function(InstanceID: Integer; 
      NewPageWidth, NewPageHeight: Double): Integer; stdcall;
    DebenuPDFLibrarySetPageLayout: function(InstanceID, 
      NewPageLayout: Integer): Integer; stdcall;
    DebenuPDFLibrarySetPageMode: function(InstanceID, 
      NewPageMode: Integer): Integer; stdcall;
    DebenuPDFLibrarySetPageSize: function(InstanceID: Integer; 
      PaperName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetPageThumbnail: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetPageTransparencyGroup: function(InstanceID, CS, Isolate, 
      Knockout: Integer): Integer; stdcall;
    DebenuPDFLibrarySetPageUserUnit: function(InstanceID: Integer; 
      UserUnit: Double): Integer; stdcall;
    DebenuPDFLibrarySetPrecision: function(InstanceID, 
      NewPrecision: Integer): Integer; stdcall;
    DebenuPDFLibrarySetPrinterDevModeFromString: function(InstanceID: Integer; 
      Source: PAnsiChar): Integer; stdcall;
    DebenuPDFLibrarySetRenderCropType: function(InstanceID, 
      NewCropType: Integer): Integer; stdcall;
    DebenuPDFLibrarySetRenderDCErasePage: function(InstanceID, 
      NewErasePage: Integer): Integer; stdcall;
    DebenuPDFLibrarySetRenderDCOffset: function(InstanceID, NewOffsetX, 
      NewOffsetY: Integer): Integer; stdcall;
    DebenuPDFLibrarySetRenderOptions: function(InstanceID, OptionID, 
      NewValue: Integer): Integer; stdcall;
    DebenuPDFLibrarySetRenderScale: function(InstanceID: Integer; 
      NewScale: Double): Integer; stdcall;
    DebenuPDFLibrarySetScale: function(InstanceID: Integer; 
      NewScale: Double): Integer; stdcall;
    DebenuPDFLibrarySetSignProcessCustomSubFilter: function(InstanceID, 
      SignProcessID: Integer; SubFilterStr: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetSignProcessField: function(InstanceID, 
      SignProcessID: Integer; SignatureFieldName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetSignProcessFieldBounds: function(InstanceID, 
      SignProcessID: Integer; Left, Top, Width, 
      Height: Double): Integer; stdcall;
    DebenuPDFLibrarySetSignProcessFieldImageFromFile: function(InstanceID, 
      SignProcessID: Integer; ImageFileName: PWideChar; 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibrarySetSignProcessFieldPage: function(InstanceID, 
      SignProcessID, SignaturePage: Integer): Integer; stdcall;
    DebenuPDFLibrarySetSignProcessInfo: function(InstanceID, 
      SignProcessID: Integer; Reason, Location, 
      ContactInfo: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetSignProcessKeyset: function(InstanceID, SignProcessID, 
      KeysetID: Integer): Integer; stdcall;
    DebenuPDFLibrarySetSignProcessPFXFromFile: function(InstanceID, 
      SignProcessID: Integer; PFXFileName, 
      PFXPassword: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetSignProcessPassthrough: function(InstanceID, 
      SignProcessID, SignatureLength: Integer): Integer; stdcall;
    DebenuPDFLibrarySetSignProcessSubFilter: function(InstanceID, 
      SignProcessID, SubFilter: Integer): Integer; stdcall;
    DebenuPDFLibrarySetTabOrderMode: function(InstanceID: Integer; 
      Mode: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetTableBorderColor: function(InstanceID, TableID, 
      BorderIndex: Integer; Red, Green, Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableBorderColorCMYK: function(InstanceID, TableID, 
      BorderIndex: Integer; C, M, Y, K: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableBorderWidth: function(InstanceID, TableID, 
      BorderIndex: Integer; NewWidth: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableCellAlignment: function(InstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, 
      NewCellAlignment: Integer): Integer; stdcall;
    DebenuPDFLibrarySetTableCellBackgroundColor: function(InstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn: Integer; Red, Green, 
      Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableCellBackgroundColorCMYK: function(InstanceID, 
      TableID, FirstRow, FirstColumn, LastRow, LastColumn: Integer; C, M, Y, 
      K: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableCellBorderColor: function(InstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, BorderIndex: Integer; Red, 
      Green, Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableCellBorderColorCMYK: function(InstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, BorderIndex: Integer; C, M, 
      Y, K: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableCellBorderWidth: function(InstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, BorderIndex: Integer; 
      NewWidth: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableCellContent: function(InstanceID, TableID, 
      RowNumber, ColumnNumber: Integer; HTMLText: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetTableCellPadding: function(InstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, BorderIndex: Integer; 
      NewPadding: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableCellTextColor: function(InstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn: Integer; Red, Green, 
      Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableCellTextColorCMYK: function(InstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn: Integer; C, M, Y, 
      K: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableCellTextSize: function(InstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn: Integer; 
      NewTextSize: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableColumnWidth: function(InstanceID, TableID, 
      FirstColumn, LastColumn: Integer; NewWidth: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableRowHeight: function(InstanceID, TableID, FirstRow, 
      LastRow: Integer; NewHeight: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableThinBorders: function(InstanceID, TableID, 
      ThinBorders: Integer; Red, Green, Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetTableThinBordersCMYK: function(InstanceID, TableID, 
      ThinBorders: Integer; C, M, Y, K: Double): Integer; stdcall;
    DebenuPDFLibrarySetTempFile: function(InstanceID: Integer; 
      FileName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetTempPath: function(InstanceID: Integer; 
      NewPath: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetTextAlign: function(InstanceID, 
      TextAlign: Integer): Integer; stdcall;
    DebenuPDFLibrarySetTextCharSpacing: function(InstanceID: Integer; 
      CharSpacing: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextColor: function(InstanceID: Integer; Red, Green, 
      Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextColorCMYK: function(InstanceID: Integer; C, M, Y, 
      K: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextColorSep: function(InstanceID: Integer; 
      ColorName: PWideChar; Tint: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextExtractionArea: function(InstanceID: Integer; Left, 
      Top, Width, Height: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextExtractionOptions: function(InstanceID, OptionID, 
      NewValue: Integer): Integer; stdcall;
    DebenuPDFLibrarySetTextExtractionScaling: function(InstanceID, 
      Options: Integer; Horizontal, Vertical: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextExtractionWordGap: function(InstanceID: Integer; 
      NewWordGap: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextHighlight: function(InstanceID, 
      Highlight: Integer): Integer; stdcall;
    DebenuPDFLibrarySetTextHighlightColor: function(InstanceID: Integer; Red, 
      Green, Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextHighlightColorCMYK: function(InstanceID: Integer; C, 
      M, Y, K: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextHighlightColorSep: function(InstanceID: Integer; 
      ColorName: PWideChar; Tint: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextMode: function(InstanceID, 
      TextMode: Integer): Integer; stdcall;
    DebenuPDFLibrarySetTextRise: function(InstanceID: Integer; 
      Rise: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextScaling: function(InstanceID: Integer; 
      ScalePercentage: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextShader: function(InstanceID: Integer; 
      ShaderName: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetTextSize: function(InstanceID: Integer; 
      TextSize: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextSpacing: function(InstanceID: Integer; 
      Spacing: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextUnderline: function(InstanceID, 
      Underline: Integer): Integer; stdcall;
    DebenuPDFLibrarySetTextUnderlineColor: function(InstanceID: Integer; Red, 
      Green, Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextUnderlineColorCMYK: function(InstanceID: Integer; C, 
      M, Y, K: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextUnderlineColorSep: function(InstanceID: Integer; 
      ColorName: PWideChar; Tint: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextUnderlineCustomDash: function(InstanceID: Integer; 
      DashPattern: PWideChar; DashPhase: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextUnderlineDash: function(InstanceID: Integer; DashOn, 
      DashOff: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextUnderlineDistance: function(InstanceID: Integer; 
      UnderlineDistance: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextUnderlineWidth: function(InstanceID: Integer; 
      UnderlineWidth: Double): Integer; stdcall;
    DebenuPDFLibrarySetTextWordSpacing: function(InstanceID: Integer; 
      WordSpacing: Double): Integer; stdcall;
    DebenuPDFLibrarySetTransparency: function(InstanceID, 
      Transparency: Integer): Integer; stdcall;
    DebenuPDFLibrarySetViewerPreferences: function(InstanceID, Option, 
      NewValue: Integer): Integer; stdcall;
    DebenuPDFLibrarySetXFAFormFieldAccess: function(InstanceID: Integer; 
      XFAFieldName: PWideChar; NewAccess: Integer): Integer; stdcall;
    DebenuPDFLibrarySetXFAFormFieldBorderColor: function(InstanceID: Integer; 
      XFAFieldName: PWideChar; Red, Green, Blue: Double): Integer; stdcall;
    DebenuPDFLibrarySetXFAFormFieldBorderPresence: function(
      InstanceID: Integer; XFAFieldName: PWideChar; 
      NewPresence: Integer): Integer; stdcall;
    DebenuPDFLibrarySetXFAFormFieldBorderWidth: function(InstanceID: Integer; 
      XFAFieldName: PWideChar; BorderWidth: Double): Integer; stdcall;
    DebenuPDFLibrarySetXFAFormFieldValue: function(InstanceID: Integer; 
      XFAFieldName, NewValue: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySetXFAFromString: function(InstanceID: Integer; 
      Source: PAnsiChar; Options: Integer): Integer; stdcall;
    DebenuPDFLibrarySetupCustomPrinter: function(InstanceID: Integer; 
      CustomPrinterName: PWideChar; Setting, 
      NewValue: Integer): Integer; stdcall;
    DebenuPDFLibrarySignFile: function(InstanceID: Integer; InputFileName, 
      OpenPassword, SignatureFieldName, OutputFileName, PFXFileName, 
      PFXPassword, Reason, Location, ContactInfo: PWideChar): Integer; stdcall;
    DebenuPDFLibrarySplitPageText: function(InstanceID, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryStartPath: function(InstanceID: Integer; StartX, 
      StartY: Double): Integer; stdcall;
    DebenuPDFLibraryStoreCustomDataFromFile: function(InstanceID: Integer; Key, 
      FileName: PWideChar; Location, Options: Integer): Integer; stdcall;
    DebenuPDFLibraryStoreCustomDataFromString: function(InstanceID: Integer; 
      Key, NewValue: PAnsiChar; Location, Options: Integer): Integer; stdcall;
    DebenuPDFLibraryStringResultLength: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryTestTempPath: function(
      InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryTransformFile: function(InstanceID: Integer; InputFileName, 
      Password, OutputFileName: PWideChar; TransformType, 
      Options: Integer): Integer; stdcall;
    DebenuPDFLibraryUnlockKey: function(InstanceID: Integer; 
      LicenseKey: PWideChar): Integer; stdcall;
    DebenuPDFLibraryUnlocked: function(InstanceID: Integer): Integer; stdcall;
    DebenuPDFLibraryUpdateAndFlattenFormField: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryUpdateAppearanceStream: function(InstanceID, 
      Index: Integer): Integer; stdcall;
    DebenuPDFLibraryUpdateTrueTypeSubsettedFont: function(InstanceID: Integer; 
      SubsetChars: PWideChar): Integer; stdcall;
    DebenuPDFLibraryUseKerning: function(InstanceID, 
      Kern: Integer): Integer; stdcall;
    DebenuPDFLibraryUseUnsafeContentStreams: function(InstanceID, 
      SafetyLevel: Integer): Integer; stdcall;

    function GetString(Source: PWideChar): WideString;
    function GetAnsiString(Source: PAnsiChar): AnsiString;
    function StringParm(const ParmValue: WideString; var HasNulls: Boolean): PWideChar;
    function AnsiStringParm(const ParmValue: AnsiString; var HasNulls: Boolean): PAnsiChar;
    procedure ReleaseBuffer(P: PWideChar);
  public
    constructor Create(const DLLFileName: WideString);
    destructor Destroy; override;
    function LibraryLoaded: Boolean;
    function AddArcToPath(CenterX, CenterY, TotalAngle: Double): Integer;
    function AddBoxToPath(Left, Top, Width, Height: Double): Integer;
    function AddCJKFont(CJKFontID: Integer): Integer;
    function AddCurveToPath(CtAX, CtAY, CtBX, CtBY, EndX, 
      EndY: Double): Integer;
    function AddEmbeddedFile(const FileName, MIMEType: WideString): Integer;
    function AddFileAttachment(const Title: WideString; 
      EmbeddedFileID: Integer): Integer;
    function AddFormFieldChoiceSub(Index: Integer; const SubName, 
      DisplayName: WideString): Integer;
    function AddFormFieldSub(Index: Integer; 
      const SubName: WideString): Integer;
    function AddFormFont(FontID: Integer): Integer;
    function AddFreeTextAnnotation(Left, Top, Width, Height: Double; 
      const Text: WideString; Angle, Options: Integer): Integer;
    function AddFreeTextAnnotationEx(Left, Top, Width, Height: Double; 
      const Text: WideString; Angle, Options, Transparency: Integer): Integer;
    function AddGlobalJavaScript(const PackageName, 
      JavaScript: WideString): Integer;
    function AddImageFromFile(const FileName: WideString; 
      Options: Integer): Integer;
    function AddImageFromFileOffset(const FileName: WideString; Offset, 
      DataLength, Options: Integer): Integer;
    function AddImageFromString(const Source: AnsiString; 
      Options: Integer): Integer;
    function AddLGIDictToPage(const DictContent: WideString): Integer;
    function AddLineToPath(EndX, EndY: Double): Integer;
    function AddLinkToDestination(Left, Top, Width, Height: Double; DestID, 
      Options: Integer): Integer;
    function AddLinkToEmbeddedFile(Left, Top, Width, Height: Double; 
      EmbeddedFileID: Integer; const Title, Contents: WideString; IconType, 
      Transpareny: Integer): Integer;
    function AddLinkToFile(Left, Top, Width, Height: Double; 
      const FileName: WideString; Page: Integer; Position: Double; NewWindow, 
      Options: Integer): Integer;
    function AddLinkToFileDest(Left, Top, Width, Height: Double; 
      const FileName, NamedDest: WideString; Position: Double; NewWindow, 
      Options: Integer): Integer;
    function AddLinkToFileEx(Left, Top, Width, Height: Double; 
      const FileName: WideString; DestPage, NewWindow, Options, Zoom, 
      DestType: Integer; DestLeft, DestTop, DestRight, 
      DestBottom: Double): Integer;
    function AddLinkToJavaScript(Left, Top, Width, Height: Double; 
      const JavaScript: WideString; Options: Integer): Integer;
    function AddLinkToLocalFile(Left, Top, Width, Height: Double; 
      const FileName: WideString; Options: Integer): Integer;
    function AddLinkToPage(Left, Top, Width, Height: Double; Page: Integer; 
      Position: Double; Options: Integer): Integer;
    function AddLinkToWeb(Left, Top, Width, Height: Double; 
      const Link: WideString; Options: Integer): Integer;
    function AddNoteAnnotation(Left, Top: Double; AnnotType: Integer; 
      PopupLeft, PopupTop, PopupWidth, PopupHeight: Double; const Title, 
      Contents: WideString; Red, Green, Blue: Double; Open: Integer): Integer;
    function AddOpenTypeFontFromFile(const FileName: WideString; 
      Options: Integer): Integer;
    function AddPageLabels(Start, Style, Offset: Integer; 
      const Prefix: WideString): Integer;
    function AddPageMatrix(xscale, yscale, xoffset, yoffset: Double): Integer;
    function AddRelativeLinkToFile(Left, Top, Width, Height: Double; 
      const FileName: WideString; Page: Integer; Position: Double; NewWindow, 
      Options: Integer): Integer;
    function AddRelativeLinkToFileDest(Left, Top, Width, Height: Double; 
      const FileName, NamedDest: WideString; Position: Double; NewWindow, 
      Options: Integer): Integer;
    function AddRelativeLinkToFileEx(Left, Top, Width, Height: Double; 
      const FileName: WideString; DestPage, NewWindow, Options, Zoom, 
      DestType: Integer; DestLeft, DestTop, DestRight, 
      DestBottom: Double): Integer;
    function AddRelativeLinkToLocalFile(Left, Top, Width, Height: Double; 
      const FileName: WideString; Options: Integer): Integer;
    function AddSVGAnnotationFromFile(Left, Top, Width, Height: Double; 
      const FileName: WideString; Options: Integer): Integer;
    function AddSWFAnnotationFromFile(Left, Top, Width, Height: Double; 
      const FileName, Title: WideString; Options: Integer): Integer;
    function AddSeparationColor(const ColorName: WideString; C, M, Y, 
      K: Double; Options: Integer): Integer;
    function AddStampAnnotation(Left, Top, Width, Height: Double; 
      StampType: Integer; const Title, Contents: WideString; Red, Green, 
      Blue: Double; Options: Integer): Integer;
    function AddStampAnnotationFromImage(Left, Top, Width, Height: Double; 
      const FileName, Title, Contents: WideString; Red, Green, Blue: Double; 
      Options: Integer): Integer;
    function AddStampAnnotationFromImageID(Left, Top, Width, Height: Double; 
      ImageID: Integer; const Title, Contents: WideString; Red, Green, 
      Blue: Double; Options: Integer): Integer;
    function AddStandardFont(StandardFontID: Integer): Integer;
    function AddSubsettedFont(const FontName: WideString; 
      CharsetIndex: Integer; const SubsetChars: WideString): Integer;
    function AddTextMarkupAnnotation(MarkupType: Integer; Left, Top, Width, 
      Height: Double): Integer;
    function AddToBuffer(const Buffer, Source: AnsiString; 
      SourceLength: Integer): Integer;
    function AddToFileList(const ListName, FileName: WideString): Integer;
    function AddTrueTypeFont(const FontName: WideString; 
      Embed: Integer): Integer;
    function AddTrueTypeFontFromFile(const FileName: WideString): Integer;
    function AddTrueTypeSubsettedFont(const FontName, SubsetChars: WideString; 
      Options: Integer): Integer;
    function AddType1Font(const FileName: WideString): Integer;
    function AddU3DAnnotationFromFile(Left, Top, Width, Height: Double; 
      const FileName: WideString; Options: Integer): Integer;
    function AnalyseFile(const InputFileName, Password: WideString): Integer;
    function AnnotationCount(): Integer;
    function AnsiStringResultLength(): Integer;
    function AppendSpace(RelativeSpace: Double): Integer;
    function AppendTableColumns(TableID, NewColumnCount: Integer): Integer;
    function AppendTableRows(TableID, NewRowCount: Integer): Integer;
    function AppendText(const Text: WideString): Integer;
    function AppendToFile(const FileName: WideString): Integer;
    function AppendToString(AppendMode: Integer): AnsiString;
    function ApplyStyle(const StyleName: WideString): Integer;
    function AttachAnnotToForm(Index: Integer): Integer;
    function BalanceContentStream(): Integer;
    function BalancePageTree(Options: Integer): Integer;
    function BeginPageUpdate(): Integer;
    function CapturePage(Page: Integer): Integer;
    function CapturePageEx(Page, Options: Integer): Integer;
    function CharWidth(CharCode: Integer): Integer;
    function CheckFileCompliance(const InputFileName, Password: WideString; 
      ComplianceTest, Options: Integer): Integer;
    function CheckObjects(): Integer;
    function CheckPageAnnots(): Integer;
    function CheckPassword(const Password: WideString): Integer;
    function ClearFileList(const ListName: WideString): Integer;
    function ClearImage(ImageID: Integer): Integer;
    function ClearPageLabels(): Integer;
    function ClearTextFormatting(): Integer;
    function CloneOutlineAction(OutlineID: Integer): Integer;
    function ClonePages(StartPage, EndPage, RepeatCount: Integer): Integer;
    function CloseOutline(OutlineID: Integer): Integer;
    function ClosePath(): Integer;
    function CombineContentStreams(): Integer;
    function CompareOutlines(FirstOutlineID, SecondOutlineID: Integer): Integer;
    function CompressContent(): Integer;
    function CompressFonts(Compress: Integer): Integer;
    function CompressImages(Compress: Integer): Integer;
    function CompressPage(): Integer;
    function ContentStreamCount(): Integer;
    function ContentStreamSafe(): Integer;
    function CopyPageRanges(DocumentID: Integer; 
      const RangeList: WideString): Integer;
    function CopyPageRangesEx(DocumentID: Integer; const RangeList: WideString; 
      Options: Integer): Integer;
    function CreateNewObject(): Integer;
    function CreateTable(RowCount, ColumnCount: Integer): Integer;
    function DAAppendFile(FileHandle: Integer): Integer;
    function DACapturePage(FileHandle, PageRef: Integer): Integer;
    function DACapturePageEx(FileHandle, PageRef, Options: Integer): Integer;
    function DACloseFile(FileHandle: Integer): Integer;
    function DADrawCapturedPage(FileHandle, DACaptureID, DestPageRef: Integer; 
      PntLeft, PntBottom, PntWidth, PntHeight: Double): Integer;
    function DADrawRotatedCapturedPage(FileHandle, DACaptureID, 
      DestPageRef: Integer; PntLeft, PntBottom, PntWidth, PntHeight, 
      Angle: Double): Integer;
    function DAEmbedFileStreams(FileHandle: Integer; 
      const RootPath: WideString): Integer;
    function DAExtractPageText(FileHandle, PageRef, 
      Options: Integer): WideString;
    function DAExtractPageTextBlocks(FileHandle, PageRef, 
      ExtractOptions: Integer): Integer;
    function DAFindPage(FileHandle, Page: Integer): Integer;
    function DAGetAnnotationCount(FileHandle, PageRef: Integer): Integer;
    function DAGetFormFieldCount(FileHandle: Integer): Integer;
    function DAGetFormFieldTitle(FileHandle, FieldIndex: Integer): WideString;
    function DAGetFormFieldValue(FileHandle, FieldIndex: Integer): WideString;
    function DAGetImageDataToString(FileHandle, ImageListID, 
      ImageIndex: Integer): AnsiString;
    function DAGetImageDblProperty(FileHandle, ImageListID, ImageIndex, 
      PropertyID: Integer): Double;
    function DAGetImageIntProperty(FileHandle, ImageListID, ImageIndex, 
      PropertyID: Integer): Integer;
    function DAGetImageListCount(FileHandle, ImageListID: Integer): Integer;
    function DAGetInformation(FileHandle: Integer; 
      const Key: WideString): WideString;
    function DAGetObjectCount(FileHandle: Integer): Integer;
    function DAGetObjectToString(FileHandle, ObjectNumber: Integer): AnsiString;
    function DAGetPageBox(FileHandle, PageRef, BoxIndex, 
      Dimension: Integer): Double;
    function DAGetPageContentToString(FileHandle, PageRef: Integer): AnsiString;
    function DAGetPageCount(FileHandle: Integer): Integer;
    function DAGetPageHeight(FileHandle, PageRef: Integer): Double;
    function DAGetPageImageList(FileHandle, PageRef: Integer): Integer;
    function DAGetPageWidth(FileHandle, PageRef: Integer): Double;
    function DAGetTextBlockAsString(TextBlockListID, 
      Index: Integer): WideString;
    function DAGetTextBlockBound(TextBlockListID, Index, 
      BoundIndex: Integer): Double;
    function DAGetTextBlockCharWidth(TextBlockListID, Index, 
      CharIndex: Integer): Double;
    function DAGetTextBlockColor(TextBlockListID, Index, 
      ColorComponent: Integer): Double;
    function DAGetTextBlockColorType(TextBlockListID, Index: Integer): Integer;
    function DAGetTextBlockCount(TextBlockListID: Integer): Integer;
    function DAGetTextBlockFontName(TextBlockListID, 
      Index: Integer): WideString;
    function DAGetTextBlockFontSize(TextBlockListID, Index: Integer): Double;
    function DAGetTextBlockText(TextBlockListID, Index: Integer): WideString;
    function DAHasPageBox(FileHandle, PageRef, BoxIndex: Integer): Integer;
    function DAHidePage(FileHandle, PageRef: Integer): Integer;
    function DAMovePage(FileHandle, PageRef, TargetPageRef, 
      Options: Integer): Integer;
    function DANewPage(FileHandle: Integer): Integer;
    function DANewPages(FileHandle, PageCount: Integer): Integer;
    function DANormalizePage(FileHandle, PageRef, 
      NormalizeOptions: Integer): Integer;
    function DAOpenFile(const InputFileName, Password: WideString): Integer;
    function DAOpenFileReadOnly(const InputFileName, 
      Password: WideString): Integer;
    function DAPageRotation(FileHandle, PageRef: Integer): Integer;
    function DAReleaseImageList(FileHandle, ImageListID: Integer): Integer;
    function DAReleaseTextBlocks(TextBlockListID: Integer): Integer;
    function DARemoveUsageRights(FileHandle: Integer): Integer;
    function DARenderPageToDC(FileHandle, PageRef: Integer; DPI: Double; 
      DC: HDC): Integer;
    function DARenderPageToFile(FileHandle, PageRef, Options: Integer; 
      DPI: Double; const FileName: WideString): Integer;
    function DARenderPageToString(FileHandle, PageRef, Options: Integer; 
      DPI: Double): AnsiString;
    function DARotatePage(FileHandle, PageRef, Angle, 
      Options: Integer): Integer;
    function DASaveAsFile(FileHandle: Integer; 
      const OutputFileName: WideString): Integer;
    function DASaveImageDataToFile(FileHandle, ImageListID, 
      ImageIndex: Integer; const ImageFileName: WideString): Integer;
    function DASetInformation(FileHandle: Integer; const Key, 
      NewValue: WideString): Integer;
    function DASetPageBox(FileHandle, PageRef, BoxIndex: Integer; X1, Y1, X2, 
      Y2: Double): Integer;
    function DASetPageLayout(FileHandle, NewPageLayout: Integer): Integer;
    function DASetPageMode(FileHandle, NewPageMode: Integer): Integer;
    function DASetPageSize(FileHandle, PageRef: Integer; PntWidth, 
      PntHeight: Double): Integer;
    function DASetTextExtractionArea(Left, Top, Width, Height: Double): Integer;
    function DASetTextExtractionOptions(OptionID, NewValue: Integer): Integer;
    function DASetTextExtractionScaling(Options: Integer; Horizontal, 
      Vertical: Double): Integer;
    function DASetTextExtractionWordGap(NewWordGap: Double): Integer;
    function DAShiftedHeader(FileHandle: Integer): Integer;
    function Decrypt(): Integer;
    function DecryptFile(const InputFileName, OutputFileName, 
      Password: WideString): Integer;
    function DeleteAnalysis(AnalysisID: Integer): Integer;
    function DeleteAnnotation(Index: Integer): Integer;
    function DeleteContentStream(): Integer;
    function DeleteFormField(Index: Integer): Integer;
    function DeleteOptionalContentGroup(
      OptionalContentGroupID: Integer): Integer;
    function DeletePageLGIDict(DictIndex: Integer): Integer;
    function DeletePages(StartPage, PageCount: Integer): Integer;
    function DocJavaScriptAction(const ActionType, 
      JavaScript: WideString): Integer;
    function DocumentCount(): Integer;
    function DrawArc(XPos, YPos, Radius, StartAngle, EndAngle: Double; Pie, 
      DrawOptions: Integer): Integer;
    function DrawBarcode(Left, Top, Width, Height: Double; 
      const Text: WideString; Barcode, Options: Integer): Integer;
    function DrawBox(Left, Top, Width, Height: Double; 
      DrawOptions: Integer): Integer;
    function DrawCapturedPage(CaptureID: Integer; Left, Top, Width, 
      Height: Double): Integer;
    function DrawCapturedPageMatrix(CaptureID: Integer; M11, M12, M21, M22, 
      MDX, MDY: Double): Integer;
    function DrawCircle(XPos, YPos, Radius: Double; 
      DrawOptions: Integer): Integer;
    function DrawDataMatrixSymbol(Left, Top, ModuleSize: Double; 
      const Text: WideString; Encoding, SymbolSize, Options: Integer): Integer;
    function DrawEllipse(XPos, YPos, Width, Height: Double; 
      DrawOptions: Integer): Integer;
    function DrawEllipticArc(XPos, YPos, Width, Height, StartAngle, 
      EndAngle: Double; Pie, DrawOptions: Integer): Integer;
    function DrawHTMLText(Left, Top, Width: Double; 
      const HTMLText: WideString): Integer;
    function DrawHTMLTextBox(Left, Top, Width, Height: Double; 
      const HTMLText: WideString): WideString;
    function DrawHTMLTextBoxMatrix(Width, Height: Double; 
      const HTMLText: WideString; M11, M12, M21, M22, MDX, 
      MDY: Double): WideString;
    function DrawHTMLTextMatrix(Width: Double; const HTMLText: WideString; M11, 
      M12, M21, M22, MDX, MDY: Double): Integer;
    function DrawImage(Left, Top, Width, Height: Double): Integer;
    function DrawImageMatrix(M11, M12, M21, M22, MDX, MDY: Double): Integer;
    function DrawIntelligentMailBarcode(Left, Top, BarWidth, FullBarHeight, 
      TrackerHeight, SpaceWidth: Double; const BarcodeData: WideString; 
      Options: Integer): Integer;
    function DrawLine(StartX, StartY, EndX, EndY: Double): Integer;
    function DrawMultiLineText(XPos, YPos: Double; const Delimiter, 
      Text: WideString): Integer;
    function DrawPDF417Symbol(Left, Top: Double; const Text: WideString; 
      Options: Integer): Integer;
    function DrawPDF417SymbolEx(Left, Top: Double; const Text: WideString; 
      Options, FixedColumns, FixedRows, ErrorLevel: Integer; ModuleSize, 
      HeightWidthRatio: Double): Integer;
    function DrawPath(PathOptions: Integer): Integer;
    function DrawPathEvenOdd(PathOptions: Integer): Integer;
    function DrawPostScriptXObject(PSRef: Integer): Integer;
    function DrawQRCode(Left, Top, SymbolSize: Double; const Text: WideString; 
      EncodeOptions, DrawOptions: Integer): Integer;
    function DrawRotatedBox(Left, Bottom, Width, Height, Angle: Double; 
      DrawOptions: Integer): Integer;
    function DrawRotatedCapturedPage(CaptureID: Integer; Left, Bottom, Width, 
      Height, Angle: Double): Integer;
    function DrawRotatedImage(Left, Bottom, Width, Height, 
      Angle: Double): Integer;
    function DrawRotatedMultiLineText(XPos, YPos, Angle: Double; 
      const Delimiter, Text: WideString): Integer;
    function DrawRotatedText(XPos, YPos, Angle: Double; 
      const Text: WideString): Integer;
    function DrawRotatedTextBox(Left, Top, Width, Height, Angle: Double; 
      const Text: WideString; Options: Integer): Integer;
    function DrawRotatedTextBoxEx(Left, Top, Width, Height, Angle: Double; 
      const Text: WideString; Options, Border, Radius, 
      DrawOptions: Integer): Integer;
    function DrawRoundedBox(Left, Top, Width, Height, Radius: Double; 
      DrawOptions: Integer): Integer;
    function DrawRoundedRotatedBox(Left, Bottom, Width, Height, Radius, 
      Angle: Double; DrawOptions: Integer): Integer;
    function DrawScaledImage(Left, Top, Scale: Double): Integer;
    function DrawSpacedText(XPos, YPos, Spacing: Double; 
      const Text: WideString): Integer;
    function DrawTableRows(TableID: Integer; Left, Top, Height: Double; 
      FirstRow, LastRow: Integer): Double;
    function DrawText(XPos, YPos: Double; const Text: WideString): Integer;
    function DrawTextArc(XPos, YPos, Radius, Angle: Double; 
      const Text: WideString; DrawOptions: Integer): Integer;
    function DrawTextBox(Left, Top, Width, Height: Double; 
      const Text: WideString; Options: Integer): Integer;
    function DrawTextBoxMatrix(Width, Height: Double; const Text: WideString; 
      Options: Integer; M11, M12, M21, M22, MDX, MDY: Double): Integer;
    function DrawWrappedText(XPos, YPos, Width: Double; 
      const Text: WideString): Integer;
    function EditableContentStream(): Integer;
    function EmbedFile(const Title, FileName, MIMEType: WideString): Integer;
    function EmbeddedFileCount(): Integer;
    function EncapsulateContentStream(): Integer;
    function EncodePermissions(CanPrint, CanCopy, CanChange, CanAddNotes, 
      CanFillFields, CanCopyAccess, CanAssemble, 
      CanPrintFull: Integer): Integer;
    function Encrypt(const Owner, User: WideString; Strength, 
      Permissions: Integer): Integer;
    function EncryptFile(const InputFileName, OutputFileName, Owner, 
      User: WideString; Strength, Permissions: Integer): Integer;
    function EncryptWithFingerprint(const Fingerprint: WideString): Integer;
    function EncryptionAlgorithm(): Integer;
    function EncryptionStatus(): Integer;
    function EncryptionStrength(): Integer;
    function EndPageUpdate(): Integer;
    function EndSignProcessToFile(SignProcessID: Integer; 
      const OutputFile: WideString): Integer;
    function EndSignProcessToString(SignProcessID: Integer): AnsiString;
    function ExtractFilePageContentToString(const InputFileName, 
      Password: WideString; Page: Integer): AnsiString;
    function ExtractFilePageText(const InputFileName, Password: WideString; 
      Page, Options: Integer): WideString;
    function ExtractFilePageTextBlocks(const InputFileName, 
      Password: WideString; Page, Options: Integer): Integer;
    function ExtractFilePages(const InputFileName, Password, OutputFileName, 
      RangeList: WideString): Integer;
    function ExtractFilePagesEx(const InputFileName, Password, OutputFileName, 
      RangeList: WideString; Options: Integer): Integer;
    function ExtractPageRanges(const RangeList: WideString): Integer;
    function ExtractPageTextBlocks(ExtractOptions: Integer): Integer;
    function ExtractPages(StartPage, PageCount: Integer): Integer;
    function FileListCount(const ListName: WideString): Integer;
    function FileListItem(const ListName: WideString; 
      Index: Integer): WideString;
    function FindFonts(): Integer;
    function FindFormFieldByTitle(const Title: WideString): Integer;
    function FindImages(): Integer;
    function FitImage(Left, Top, Width, Height: Double; HAlign, VAlign, 
      Rotate: Integer): Integer;
    function FitRotatedTextBox(Left, Top, Width, Height, Angle: Double; 
      const Text: WideString; Options: Integer): Integer;
    function FitTextBox(Left, Top, Width, Height: Double; 
      const Text: WideString; Options: Integer): Integer;
    function FlattenAnnot(Index, Options: Integer): Integer;
    function FlattenFormField(Index: Integer): Integer;
    function FontCount(): Integer;
    function FontFamily(): WideString;
    function FontHasKerning(): Integer;
    function FontName(): WideString;
    function FontReference(): WideString;
    function FontSize(): Integer;
    function FontType(): Integer;
    function FormFieldCount(): Integer;
    function FormFieldHasParent(Index: Integer): Integer;
    function FormFieldJavaScriptAction(Index: Integer; const ActionType, 
      JavaScript: WideString): Integer;
    function FormFieldWebLinkAction(Index: Integer; const ActionType, 
      Link: WideString): Integer;
    function GetActionDest(ActionID: Integer): Integer;
    function GetActionType(ActionID: Integer): WideString;
    function GetActionURL(ActionID: Integer): WideString;
    function GetAnalysisInfo(AnalysisID, AnalysisItem: Integer): WideString;
    function GetAnnotActionID(Index: Integer): Integer;
    function GetAnnotDblProperty(Index, Tag: Integer): Double;
    function GetAnnotDest(Index: Integer): Integer;
    function GetAnnotEmbeddedFileName(Index, Options: Integer): WideString;
    function GetAnnotEmbeddedFileToFile(Index, Options: Integer; 
      const FileName: WideString): Integer;
    function GetAnnotEmbeddedFileToString(Index, Options: Integer): AnsiString;
    function GetAnnotIntProperty(Index, Tag: Integer): Integer;
    function GetAnnotQuadCount(Index: Integer): Integer;
    function GetAnnotQuadPoints(Index, QuadNumber, 
      PointNumber: Integer): Double;
    function GetAnnotSoundToFile(Index, Options: Integer; 
      const SoundFileName: WideString): Integer;
    function GetAnnotSoundToString(Index, Options: Integer): AnsiString;
    function GetAnnotStrProperty(Index, Tag: Integer): WideString;
    function GetBarcodeWidth(NominalWidth: Double; const Text: WideString; 
      Barcode: Integer): Double;
    function GetBaseURL(): WideString;
    function GetCSDictEPSG(CSDictID: Integer): Integer;
    function GetCSDictType(CSDictID: Integer): Integer;
    function GetCSDictWKT(CSDictID: Integer): WideString;
    function GetCanvasDC(CanvasWidth, CanvasHeight: Integer): HDC;
    function GetCanvasDCEx(CanvasWidth, CanvasHeight, 
      ReferenceDC: Integer): Integer;
    function GetCatalogInformation(const Key: WideString): WideString;
    function GetContentStreamToString(): AnsiString;
    function GetCustomInformation(const Key: WideString): WideString;
    function GetCustomKeys(Location: Integer): WideString;
    function GetDefaultPrinterName(): WideString;
    function GetDestName(DestID: Integer): WideString;
    function GetDestPage(DestID: Integer): Integer;
    function GetDestType(DestID: Integer): Integer;
    function GetDestValue(DestID, ValueKey: Integer): Double;
    function GetDocJavaScript(const ActionType: WideString): WideString;
    function GetDocumentFileName(): WideString;
    function GetDocumentFileSize(): Integer;
    function GetDocumentID(Index: Integer): Integer;
    function GetDocumentIdentifier(Part, Options: Integer): WideString;
    function GetDocumentMetadata(): WideString;
    function GetDocumentRepaired(): Integer;
    function GetDocumentResourceList(): WideString;
    function GetEmbeddedFileContentToFile(Index: Integer; 
      const FileName: WideString): Integer;
    function GetEmbeddedFileContentToString(Index: Integer): AnsiString;
    function GetEmbeddedFileID(Index: Integer): Integer;
    function GetEmbeddedFileIntProperty(Index, Tag: Integer): Integer;
    function GetEmbeddedFileStrProperty(Index, Tag: Integer): WideString;
    function GetEncryptionFingerprint(): WideString;
    function GetFileMetadata(const InputFileName, 
      Password: WideString): WideString;
    function GetFirstChildOutline(OutlineID: Integer): Integer;
    function GetFirstOutline(): Integer;
    function GetFontEncoding(): Integer;
    function GetFontFlags(FontFlagItemID: Integer): Integer;
    function GetFontID(Index: Integer): Integer;
    function GetFontIsEmbedded(): Integer;
    function GetFontIsSubsetted(): Integer;
    function GetFontMetrics(MetricType: Integer): Integer;
    function GetFontObjectNumber(): Integer;
    function GetFormFieldActionID(Index: Integer; 
      const TriggerEvent: WideString): Integer;
    function GetFormFieldAlignment(Index: Integer): Integer;
    function GetFormFieldAnnotFlags(Index: Integer): Integer;
    function GetFormFieldBackgroundColor(Index, 
      ColorComponent: Integer): Double;
    function GetFormFieldBackgroundColorType(Index: Integer): Integer;
    function GetFormFieldBorderColor(Index, ColorComponent: Integer): Double;
    function GetFormFieldBorderColorType(Index: Integer): Integer;
    function GetFormFieldBorderProperty(Index, PropKey: Integer): Double;
    function GetFormFieldBorderStyle(Index: Integer): Integer;
    function GetFormFieldBound(Index, Edge: Integer): Double;
    function GetFormFieldCaption(Index: Integer): WideString;
    function GetFormFieldCaptionEx(Index, StringType: Integer): WideString;
    function GetFormFieldCheckStyle(Index: Integer): Integer;
    function GetFormFieldChildTitle(Index: Integer): WideString;
    function GetFormFieldChoiceType(Index: Integer): Integer;
    function GetFormFieldColor(Index, ColorComponent: Integer): Double;
    function GetFormFieldComb(Index: Integer): Integer;
    function GetFormFieldDefaultValue(Index: Integer): WideString;
    function GetFormFieldDescription(Index: Integer): WideString;
    function GetFormFieldFlags(Index: Integer): Integer;
    function GetFormFieldFontName(Index: Integer): WideString;
    function GetFormFieldJavaScript(Index: Integer; 
      const ActionType: WideString): WideString;
    function GetFormFieldKidCount(Index: Integer): Integer;
    function GetFormFieldKidTempIndex(Index, SubIndex: Integer): Integer;
    function GetFormFieldMaxLen(Index: Integer): Integer;
    function GetFormFieldNoExport(Index: Integer): Integer;
    function GetFormFieldPage(Index: Integer): Integer;
    function GetFormFieldPrintable(Index: Integer): Integer;
    function GetFormFieldReadOnly(Index: Integer): Integer;
    function GetFormFieldRequired(Index: Integer): Integer;
    function GetFormFieldRichTextString(Index: Integer; 
      const Key: WideString): WideString;
    function GetFormFieldRotation(Index: Integer): Integer;
    function GetFormFieldSubCount(Index: Integer): Integer;
    function GetFormFieldSubDisplayName(Index, SubIndex: Integer): WideString;
    function GetFormFieldSubName(Index, SubIndex: Integer): WideString;
    function GetFormFieldSubmitActionString(Index: Integer; 
      const ActionType: WideString): WideString;
    function GetFormFieldTabOrder(Index: Integer): Integer;
    function GetFormFieldTabOrderEx(Index, Options: Integer): Integer;
    function GetFormFieldTextFlags(Index, ValueKey: Integer): Integer;
    function GetFormFieldTextSize(Index: Integer): Double;
    function GetFormFieldTitle(Index: Integer): WideString;
    function GetFormFieldType(Index: Integer): Integer;
    function GetFormFieldValue(Index: Integer): WideString;
    function GetFormFieldValueByTitle(const Title: WideString): WideString;
    function GetFormFieldVisible(Index: Integer): Integer;
    function GetFormFieldWebLink(Index: Integer; 
      const ActionType: WideString): WideString;
    function GetFormFontCount(): Integer;
    function GetFormFontName(FontIndex: Integer): WideString;
    function GetGlobalJavaScript(const PackageName: WideString): WideString;
    function GetHTMLTextHeight(Width: Double; 
      const HTMLText: WideString): Double;
    function GetHTMLTextLineCount(Width: Double; 
      const HTMLText: WideString): Integer;
    function GetHTMLTextWidth(MaxWidth: Double; 
      const HTMLText: WideString): Double;
    function GetImageID(Index: Integer): Integer;
    function GetImageListCount(ImageListID: Integer): Integer;
    function GetImageListItemDataToString(ImageListID, ImageIndex, 
      Options: Integer): AnsiString;
    function GetImageListItemDblProperty(ImageListID, ImageIndex, 
      PropertyID: Integer): Double;
    function GetImageListItemFormatDesc(ImageListID, ImageIndex, 
      Options: Integer): WideString;
    function GetImageListItemIntProperty(ImageListID, ImageIndex, 
      PropertyID: Integer): Integer;
    function GetImageMeasureDict(): Integer;
    function GetImagePageCount(const FileName: WideString): Integer;
    function GetImagePageCountFromString(const Source: AnsiString): Integer;
    function GetImagePtDataDict(): Integer;
    function GetInformation(Key: Integer): WideString;
    function GetInstalledFontsByCharset(CharsetIndex, 
      Options: Integer): WideString;
    function GetInstalledFontsByCodePage(CodePage, 
      Options: Integer): WideString;
    function GetKerning(const CharPair: WideString): Integer;
    function GetLatestPrinterNames(): WideString;
    function GetMaxObjectNumber(): Integer;
    function GetMeasureDictBoundsCount(MeasureDictID: Integer): Integer;
    function GetMeasureDictBoundsItem(MeasureDictID, 
      ItemIndex: Integer): Double;
    function GetMeasureDictCoordinateSystem(MeasureDictID: Integer): Integer;
    function GetMeasureDictDCSDict(MeasureDictID: Integer): Integer;
    function GetMeasureDictGCSDict(MeasureDictID: Integer): Integer;
    function GetMeasureDictGPTSCount(MeasureDictID: Integer): Integer;
    function GetMeasureDictGPTSItem(MeasureDictID, ItemIndex: Integer): Double;
    function GetMeasureDictLPTSCount(MeasureDictID: Integer): Integer;
    function GetMeasureDictLPTSItem(MeasureDictID, ItemIndex: Integer): Double;
    function GetMeasureDictPDU(MeasureDictID, UnitIndex: Integer): Integer;
    function GetNamedDestination(const DestName: WideString): Integer;
    function GetNextOutline(OutlineID: Integer): Integer;
    function GetObjectCount(): Integer;
    function GetObjectDecodeError(ObjectNumber: Integer): Integer;
    function GetObjectToString(ObjectNumber: Integer): AnsiString;
    function GetOpenActionDestination(): Integer;
    function GetOpenActionJavaScript(): WideString;
    function GetOptionalContentConfigCount(): Integer;
    function GetOptionalContentConfigLocked(OptionalContentConfigID, 
      OptionalContentGroupID: Integer): Integer;
    function GetOptionalContentConfigOrderCount(
      OptionalContentConfigID: Integer): Integer;
    function GetOptionalContentConfigOrderItemID(OptionalContentConfigID, 
      ItemIndex: Integer): Integer;
    function GetOptionalContentConfigOrderItemLabel(OptionalContentConfigID, 
      ItemIndex: Integer): WideString;
    function GetOptionalContentConfigOrderItemLevel(OptionalContentConfigID, 
      ItemIndex: Integer): Integer;
    function GetOptionalContentConfigOrderItemType(OptionalContentConfigID, 
      ItemIndex: Integer): Integer;
    function GetOptionalContentConfigState(OptionalContentConfigID, 
      OptionalContentGroupID: Integer): Integer;
    function GetOptionalContentGroupID(Index: Integer): Integer;
    function GetOptionalContentGroupName(
      OptionalContentGroupID: Integer): WideString;
    function GetOptionalContentGroupPrintable(
      OptionalContentGroupID: Integer): Integer;
    function GetOptionalContentGroupVisible(
      OptionalContentGroupID: Integer): Integer;
    function GetOrigin(): Integer;
    function GetOutlineActionID(OutlineID: Integer): Integer;
    function GetOutlineColor(OutlineID, ColorComponent: Integer): Double;
    function GetOutlineDest(OutlineID: Integer): Integer;
    function GetOutlineID(Index: Integer): Integer;
    function GetOutlineJavaScript(OutlineID: Integer): WideString;
    function GetOutlineObjectNumber(OutlineID: Integer): Integer;
    function GetOutlineOpenFile(OutlineID: Integer): WideString;
    function GetOutlinePage(OutlineID: Integer): Integer;
    function GetOutlineStyle(OutlineID: Integer): Integer;
    function GetOutlineWebLink(OutlineID: Integer): WideString;
    function GetPageBox(BoxType, Dimension: Integer): Double;
    function GetPageColorSpaces(Options: Integer): WideString;
    function GetPageContentToString(): AnsiString;
    function GetPageImageList(Options: Integer): Integer;
    function GetPageJavaScript(const ActionType: WideString): WideString;
    function GetPageLGIDictContent(DictIndex: Integer): WideString;
    function GetPageLGIDictCount(): Integer;
    function GetPageLabel(Page: Integer): WideString;
    function GetPageLayout(): Integer;
    function GetPageMetricsToString(StartPage, EndPage, 
      Options: Integer): AnsiString;
    function GetPageMode(): Integer;
    function GetPageText(ExtractOptions: Integer): WideString;
    function GetPageUserUnit(): Double;
    function GetPageViewPortCount(): Integer;
    function GetPageViewPortID(Index: Integer): Integer;
    function GetParentOutline(OutlineID: Integer): Integer;
    function GetPrevOutline(OutlineID: Integer): Integer;
    function GetPrintPreviewBitmapToString(const PrinterName: WideString; 
      PreviewPage, PrintOptions, MaxDimension, 
      PreviewOptions: Integer): AnsiString;
    function GetPrinterBins(const PrinterName: WideString): WideString;
    function GetPrinterDevModeToString(
      const PrinterName: WideString): AnsiString;
    function GetPrinterMediaTypes(const PrinterName: WideString): WideString;
    function GetPrinterNames(): WideString;
    function GetRenderScale(): Double;
    function GetSignProcessByteRange(SignProcessID, 
      ArrayPosition: Integer): Integer;
    function GetSignProcessResult(SignProcessID: Integer): Integer;
    function GetStringListCount(StringListID: Integer): Integer;
    function GetStringListItem(StringListID, ItemIndex: Integer): WideString;
    function GetTabOrderMode(): WideString;
    function GetTableCellDblProperty(TableID, RowNumber, ColumnNumber, 
      Tag: Integer): Double;
    function GetTableCellIntProperty(TableID, RowNumber, ColumnNumber, 
      Tag: Integer): Integer;
    function GetTableCellStrProperty(TableID, RowNumber, ColumnNumber, 
      Tag: Integer): WideString;
    function GetTableColumnCount(TableID: Integer): Integer;
    function GetTableLastDrawnRow(TableID: Integer): Integer;
    function GetTableRowCount(TableID: Integer): Integer;
    function GetTempPath(): WideString;
    function GetTextAscent(): Double;
    function GetTextBlockAsString(TextBlockListID, Index: Integer): WideString;
    function GetTextBlockBound(TextBlockListID, Index, 
      BoundIndex: Integer): Double;
    function GetTextBlockCharWidth(TextBlockListID, Index, 
      CharIndex: Integer): Double;
    function GetTextBlockColor(TextBlockListID, Index, 
      ColorComponent: Integer): Double;
    function GetTextBlockColorType(TextBlockListID, Index: Integer): Integer;
    function GetTextBlockCount(TextBlockListID: Integer): Integer;
    function GetTextBlockFontName(TextBlockListID, Index: Integer): WideString;
    function GetTextBlockFontSize(TextBlockListID, Index: Integer): Double;
    function GetTextBlockText(TextBlockListID, Index: Integer): WideString;
    function GetTextBound(Edge: Integer): Double;
    function GetTextDescent(): Double;
    function GetTextHeight(): Double;
    function GetTextSize(): Double;
    function GetTextWidth(const Text: WideString): Double;
    function GetUnicodeCharactersFromEncoding(Encoding: Integer): WideString;
    function GetViewPortBBox(ViewPortID, Dimension: Integer): Double;
    function GetViewPortMeasureDict(ViewPortID: Integer): Integer;
    function GetViewPortName(ViewPortID: Integer): WideString;
    function GetViewPortPtDataDict(ViewPortID: Integer): Integer;
    function GetViewerPreferences(Option: Integer): Integer;
    function GetWrappedText(Width: Double; const Delimiter, 
      Text: WideString): WideString;
    function GetWrappedTextBreakString(Width: Double; const Delimiter, 
      Text: WideString): WideString;
    function GetWrappedTextHeight(Width: Double; 
      const Text: WideString): Double;
    function GetWrappedTextLineCount(Width: Double; 
      const Text: WideString): Integer;
    function GetXFAFormFieldCount(): Integer;
    function GetXFAFormFieldName(Index: Integer): WideString;
    function GetXFAFormFieldNames(const Delimiter: WideString): WideString;
    function GetXFAFormFieldValue(const XFAFieldName: WideString): WideString;
    function GetXFAToString(Options: Integer): AnsiString;
    function GlobalJavaScriptCount(): Integer;
    function GlobalJavaScriptPackageName(Index: Integer): WideString;
    function HasFontResources(): Integer;
    function HasPageBox(BoxType: Integer): Integer;
    function HidePage(): Integer;
    function ImageCount(): Integer;
    function ImageFillColor(): Integer;
    function ImageHeight(): Integer;
    function ImageHorizontalResolution(): Integer;
    function ImageResolutionUnits(): Integer;
    function ImageType(): Integer;
    function ImageVerticalResolution(): Integer;
    function ImageWidth(): Integer;
    function ImportEMFFromFile(const FileName: WideString; FontOptions, 
      GeneralOptions: Integer): Integer;
    function InsertPages(StartPage, PageCount: Integer): Integer;
    function InsertTableColumns(TableID, Position, 
      NewColumnCount: Integer): Integer;
    function InsertTableRows(TableID, Position, NewRowCount: Integer): Integer;
    function IsAnnotFormField(Index: Integer): Integer;
    function IsLinearized(): Integer;
    function IsTaggedPDF(): Integer;
    function LastErrorCode(): Integer;
    function LastRenderError(): WideString;
    function LibraryVersion(): WideString;
    function LibraryVersionEx(): WideString;
    function LicenseInfo(): WideString;
    function LinearizeFile(const InputFileName, Password, 
      OutputFileName: WideString; Options: Integer): Integer;
    function LoadFromCanvasDC(DPI: Double; Options: Integer): Integer;
    function LoadFromFile(const FileName, Password: WideString): Integer;
    function LoadFromString(const Source: AnsiString; 
      const Password: WideString): Integer;
    function LoadState(): Integer;
    function MergeDocument(DocumentID: Integer): Integer;
    function MergeFileList(const ListName, OutputFileName: WideString): Integer;
    function MergeFileListFast(const ListName, 
      OutputFileName: WideString): Integer;
    function MergeFiles(const FirstFileName, SecondFileName, 
      OutputFileName: WideString): Integer;
    function MergeTableCells(TableID, FirstRow, FirstColumn, LastRow, 
      LastColumn: Integer): Integer;
    function MoveContentStream(FromPosition, ToPosition: Integer): Integer;
    function MoveOutlineAfter(OutlineID, SiblingID: Integer): Integer;
    function MoveOutlineBefore(OutlineID, SiblingID: Integer): Integer;
    function MovePage(NewPosition: Integer): Integer;
    function MovePath(NewX, NewY: Double): Integer;
    function MultiplyScale(MultScaleBy: Double): Integer;
    function NewChildFormField(Index: Integer; const Title: WideString; 
      FieldType: Integer): Integer;
    function NewContentStream(): Integer;
    function NewCustomPrinter(
      const OriginalPrinterName: WideString): WideString;
    function NewDestination(DestPage, Zoom, DestType: Integer; Left, Top, 
      Right, Bottom: Double): Integer;
    function NewDocument(): Integer;
    function NewFormField(const Title: WideString; FieldType: Integer): Integer;
    function NewInternalPrinterObject(Options: Integer): Integer;
    function NewNamedDestination(const DestName: WideString; 
      DestID: Integer): Integer;
    function NewOptionalContentGroup(const GroupName: WideString): Integer;
    function NewOutline(Parent: Integer; const Title: WideString; 
      DestPage: Integer; DestPosition: Double): Integer;
    function NewPage(): Integer;
    function NewPageFromCanvasDC(DPI: Double; Options: Integer): Integer;
    function NewPages(PageCount: Integer): Integer;
    function NewPostScriptXObject(const PS: WideString): Integer;
    function NewRGBAxialShader(const ShaderName: WideString; StartX, StartY, 
      StartRed, StartGreen, StartBlue, EndX, EndY, EndRed, EndGreen, 
      EndBlue: Double; Extend: Integer): Integer;
    function NewSignProcessFromFile(const InputFile, 
      Password: WideString): Integer;
    function NewSignProcessFromString(const Source: AnsiString; 
      const Password: WideString): Integer;
    function NewStaticOutline(Parent: Integer; 
      const Title: WideString): Integer;
    function NewTilingPatternFromCapturedPage(const PatternName: WideString; 
      CaptureID: Integer): Integer;
    function NoEmbedFontListAdd(const FontName: WideString): Integer;
    function NoEmbedFontListCount(): Integer;
    function NoEmbedFontListGet(Index: Integer): WideString;
    function NoEmbedFontListRemoveAll(): Integer;
    function NoEmbedFontListRemoveIndex(Index: Integer): Integer;
    function NoEmbedFontListRemoveName(const FontName: WideString): Integer;
    function NormalizePage(NormalizeOptions: Integer): Integer;
    function OpenOutline(OutlineID: Integer): Integer;
    function OptionalContentGroupCount(): Integer;
    function OutlineCount(): Integer;
    function OutlineTitle(OutlineID: Integer): WideString;
    function PageCount(): Integer;
    function PageHasFontResources(PageNumber: Integer): Integer;
    function PageHeight(): Double;
    function PageJavaScriptAction(const ActionType, 
      JavaScript: WideString): Integer;
    function PageRotation(): Integer;
    function PageWidth(): Double;
    function PrintDocument(const PrinterName: WideString; StartPage, EndPage, 
      Options: Integer): Integer;
    function PrintDocumentToFile(const PrinterName: WideString; StartPage, 
      EndPage, Options: Integer; const FileName: WideString): Integer;
    function PrintMode(Mode: Integer): Integer;
    function PrintOptions(PageScaling, AutoRotateCenter: Integer; 
      const Title: WideString): Integer;
    function PrintPages(const PrinterName, PageRanges: WideString; 
      Options: Integer): Integer;
    function PrintPagesToFile(const PrinterName, PageRanges: WideString; 
      Options: Integer; const FileName: WideString): Integer;
    function ReleaseImage(ImageID: Integer): Integer;
    function ReleaseImageList(ImageListID: Integer): Integer;
    function ReleaseSignProcess(SignProcessID: Integer): Integer;
    function ReleaseStringList(StringListID: Integer): Integer;
    function ReleaseTextBlocks(TextBlockListID: Integer): Integer;
    function RemoveAppearanceStream(Index: Integer): Integer;
    function RemoveCustomInformation(const Key: WideString): Integer;
    function RemoveDocument(DocumentID: Integer): Integer;
    function RemoveEmbeddedFile(Index: Integer): Integer;
    function RemoveFormFieldBackgroundColor(Index: Integer): Integer;
    function RemoveFormFieldBorderColor(Index: Integer): Integer;
    function RemoveFormFieldChoiceSub(Index: Integer; 
      const SubName: WideString): Integer;
    function RemoveGlobalJavaScript(const PackageName: WideString): Integer;
    function RemoveOpenAction(): Integer;
    function RemoveOutline(OutlineID: Integer): Integer;
    function RemovePageBox(BoxType: Integer): Integer;
    function RemoveSharedContentStreams(): Integer;
    function RemoveStyle(const StyleName: WideString): Integer;
    function RemoveUsageRights(): Integer;
    function RemoveXFAEntries(Options: Integer): Integer;
    function RenderAsMultipageTIFFToFile(DPI: Double; 
      const PageRanges: WideString; ImageOptions, OutputOptions: Integer; 
      const FileName: WideString): Integer;
    function RenderDocumentToFile(DPI: Double; StartPage, EndPage, 
      Options: Integer; const FileName: WideString): Integer;
    function RenderPageToDC(DPI: Double; Page: Integer; DC: HDC): Integer;
    function RenderPageToDCClip(DPI: Double; Page, DC: Integer; 
      const Clip: AnsiString): Integer;
    function RenderPageToFile(DPI: Double; Page, Options: Integer; 
      const FileName: WideString): Integer;
    function RenderPageToString(DPI: Double; Page, 
      Options: Integer): AnsiString;
    function ReplaceFonts(Options: Integer): Integer;
    function ReplaceImage(OriginalImageID, NewImageID: Integer): Integer;
    function ReplaceTag(const Tag, NewValue: WideString): Integer;
    function RequestPrinterStatus(StatusCommand: Integer): Integer;
    function RetrieveCustomDataToFile(const Key, FileName: WideString; 
      Location: Integer): Integer;
    function RetrieveCustomDataToString(const Key: AnsiString; 
      Location: Integer): AnsiString;
    function ReverseImage(Reset: Integer): Integer;
    function RotatePage(PageRotation: Integer): Integer;
    function SaveFontToFile(const FileName: WideString): Integer;
    function SaveImageListItemDataToFile(ImageListID, ImageIndex, 
      Options: Integer; const ImageFileName: WideString): Integer;
    function SaveImageToFile(const FileName: WideString): Integer;
    function SaveImageToString(): AnsiString;
    function SaveState(): Integer;
    function SaveStyle(const StyleName: WideString): Integer;
    function SaveToFile(const FileName: WideString): Integer;
    function SaveToString(): AnsiString;
    function SecurityInfo(SecurityItem: Integer): Integer;
    function SelectContentStream(NewIndex: Integer): Integer;
    function SelectDocument(DocumentID: Integer): Integer;
    function SelectFont(FontID: Integer): Integer;
    function SelectImage(ImageID: Integer): Integer;
    function SelectPage(PageNumber: Integer): Integer;
    function SelectRenderer(RendererID: Integer): Integer;
    function SelectedDocument(): Integer;
    function SelectedFont(): Integer;
    function SelectedImage(): Integer;
    function SelectedPage(): Integer;
    function SetActionURL(ActionID: Integer; const NewURL: WideString): Integer;
    function SetAnnotBorderColor(Index: Integer; Red, Green, 
      Blue: Double): Integer;
    function SetAnnotBorderStyle(Index: Integer; Width: Double; Style: Integer; 
      DashOn, DashOff: Double): Integer;
    function SetAnnotContents(Index: Integer; 
      const NewContents: WideString): Integer;
    function SetAnnotDblProperty(Index, Tag: Integer; 
      NewValue: Double): Integer;
    function SetAnnotIntProperty(Index, Tag, NewValue: Integer): Integer;
    function SetAnnotOptional(Index, OptionalContentGroupID: Integer): Integer;
    function SetAnnotQuadPoints(Index, QuadNumber: Integer; X1, Y1, X2, Y2, X3, 
      Y3, X4, Y4: Double): Integer;
    function SetAnnotRect(Index: Integer; Left, Top, Width, 
      Height: Double): Integer;
    function SetAnnotStrProperty(Index, Tag: Integer; 
      const NewValue: WideString): Integer;
    function SetAnsiMode(NewAnsiMode: Integer): Integer;
    function SetAppendInputFromString(const Source: AnsiString): Integer;
    function SetBaseURL(const NewBaseURL: WideString): Integer;
    function SetBlendMode(BlendMode: Integer): Integer;
    function SetBreakString(const NewBreakString: WideString): Integer;
    function SetCSDictEPSG(CSDictID, NewEPSG: Integer): Integer;
    function SetCSDictType(CSDictID, NewDictType: Integer): Integer;
    function SetCSDictWKT(CSDictID: Integer; const NewWKT: WideString): Integer;
    function SetCairoFileName(const FileName: WideString): Integer;
    function SetCapturedPageOptional(CaptureID, 
      OptionalContentGroupID: Integer): Integer;
    function SetCapturedPageTransparencyGroup(CaptureID, CS, Isolate, 
      Knockout: Integer): Integer;
    function SetCatalogInformation(const Key, NewValue: WideString): Integer;
    function SetCharWidth(CharCode, NewWidth: Integer): Integer;
    function SetClippingPath(): Integer;
    function SetClippingPathEvenOdd(): Integer;
    function SetCompatibility(CompatibilityItem, 
      CompatibilityMode: Integer): Integer;
    function SetContentStreamFromString(const Source: AnsiString): Integer;
    function SetContentStreamOptional(OptionalContentGroupID: Integer): Integer;
    function SetCropBox(Left, Top, Width, Height: Double): Integer;
    function SetCustomInformation(const Key, NewValue: WideString): Integer;
    function SetCustomLineDash(const DashPattern: WideString; 
      DashPhase: Double): Integer;
    function SetDPLRFileName(const FileName: WideString): Integer;
    function SetDecodeMode(NewDecodeMode: Integer): Integer;
    function SetDestProperties(DestID, Zoom, DestType: Integer; Left, Top, 
      Right, Bottom: Double): Integer;
    function SetDestValue(DestID, ValueKey: Integer; NewValue: Double): Integer;
    function SetDocumentMetadata(const XMP: WideString): Integer;
    function SetEmbeddedFileStrProperty(Index, Tag: Integer; 
      const NewValue: WideString): Integer;
    function SetFillColor(Red, Green, Blue: Double): Integer;
    function SetFillColorCMYK(C, M, Y, K: Double): Integer;
    function SetFillColorSep(const ColorName: WideString; 
      Tint: Double): Integer;
    function SetFillShader(const ShaderName: WideString): Integer;
    function SetFillTilingPattern(const PatternName: WideString): Integer;
    function SetFindImagesMode(NewFindImagesMode: Integer): Integer;
    function SetFontEncoding(Encoding: Integer): Integer;
    function SetFontFlags(Fixed, Serif, Symbolic, Script, Italic, AllCap, 
      SmallCap, ForceBold: Integer): Integer;
    function SetFormFieldAlignment(Index, Alignment: Integer): Integer;
    function SetFormFieldAnnotFlags(Index, NewFlags: Integer): Integer;
    function SetFormFieldBackgroundColor(Index: Integer; Red, Green, 
      Blue: Double): Integer;
    function SetFormFieldBackgroundColorCMYK(Index: Integer; C, M, Y, 
      K: Double): Integer;
    function SetFormFieldBackgroundColorGray(Index: Integer; 
      Gray: Double): Integer;
    function SetFormFieldBackgroundColorSep(Index: Integer; 
      const ColorName: WideString; Tint: Double): Integer;
    function SetFormFieldBorderColor(Index: Integer; Red, Green, 
      Blue: Double): Integer;
    function SetFormFieldBorderColorCMYK(Index: Integer; C, M, Y, 
      K: Double): Integer;
    function SetFormFieldBorderColorGray(Index: Integer; Gray: Double): Integer;
    function SetFormFieldBorderColorSep(Index: Integer; 
      const ColorName: WideString; Tint: Double): Integer;
    function SetFormFieldBorderStyle(Index: Integer; Width: Double; 
      Style: Integer; DashOn, DashOff: Double): Integer;
    function SetFormFieldBounds(Index: Integer; Left, Top, Width, 
      Height: Double): Integer;
    function SetFormFieldCalcOrder(Index, Order: Integer): Integer;
    function SetFormFieldCaption(Index: Integer; 
      const NewCaption: WideString): Integer;
    function SetFormFieldCheckStyle(Index, CheckStyle, 
      Position: Integer): Integer;
    function SetFormFieldChildTitle(Index: Integer; 
      const NewTitle: WideString): Integer;
    function SetFormFieldChoiceSub(Index, SubIndex: Integer; const SubName, 
      DisplayName: WideString): Integer;
    function SetFormFieldChoiceType(Index, ChoiceType: Integer): Integer;
    function SetFormFieldColor(Index: Integer; Red, Green, 
      Blue: Double): Integer;
    function SetFormFieldColorCMYK(Index: Integer; C, M, Y, K: Double): Integer;
    function SetFormFieldColorSep(Index: Integer; const ColorName: WideString; 
      Tint: Double): Integer;
    function SetFormFieldComb(Index, Comb: Integer): Integer;
    function SetFormFieldDefaultValue(Index: Integer; 
      const NewDefaultValue: WideString): Integer;
    function SetFormFieldDescription(Index: Integer; 
      const NewDescription: WideString): Integer;
    function SetFormFieldFlags(Index, NewFlags: Integer): Integer;
    function SetFormFieldFont(Index, FontIndex: Integer): Integer;
    function SetFormFieldHighlightMode(Index, NewMode: Integer): Integer;
    function SetFormFieldIcon(Index, IconType, CaptureID: Integer): Integer;
    function SetFormFieldIconStyle(Index, Placement, Scale, ScaleType, 
      HorizontalShift, VerticalShift: Integer): Integer;
    function SetFormFieldMaxLen(Index, NewMaxLen: Integer): Integer;
    function SetFormFieldNoExport(Index, NoExport: Integer): Integer;
    function SetFormFieldOptional(Index, 
      OptionalContentGroupID: Integer): Integer;
    function SetFormFieldPage(Index, NewPage: Integer): Integer;
    function SetFormFieldPrintable(Index, Printable: Integer): Integer;
    function SetFormFieldReadOnly(Index, ReadOnly: Integer): Integer;
    function SetFormFieldRequired(Index, Required: Integer): Integer;
    function SetFormFieldResetAction(Index: Integer; 
      const ActionType: WideString): Integer;
    function SetFormFieldRichTextString(Index: Integer; const Key, 
      NewValue: WideString): Integer;
    function SetFormFieldRotation(Index, Angle: Integer): Integer;
    function SetFormFieldSignatureImage(Index, ImageID, 
      Options: Integer): Integer;
    function SetFormFieldStandardFont(Index, StandardFontID: Integer): Integer;
    function SetFormFieldSubmitAction(Index: Integer; const ActionType, 
      Link: WideString): Integer;
    function SetFormFieldSubmitActionEx(Index: Integer; const ActionType, 
      Link: WideString; Flags: Integer): Integer;
    function SetFormFieldTabOrder(Index, Order: Integer): Integer;
    function SetFormFieldTextFlags(Index, Multiline, Password, FileSelect, 
      DoNotSpellCheck, DoNotScroll: Integer): Integer;
    function SetFormFieldTextSize(Index: Integer; NewTextSize: Double): Integer;
    function SetFormFieldTitle(Index: Integer; 
      const NewTitle: WideString): Integer;
    function SetFormFieldValue(Index: Integer; 
      const NewValue: WideString): Integer;
    function SetFormFieldValueByTitle(const Title, 
      NewValue: WideString): Integer;
    function SetFormFieldVisible(Index, Visible: Integer): Integer;
    function SetGDIPlusFileName(const DLLFileName: WideString): Integer;
    function SetGDIPlusOptions(OptionID, NewValue: Integer): Integer;
    function SetHTMLBoldFont(const FontSet: WideString; 
      FontID: Integer): Integer;
    function SetHTMLBoldItalicFont(const FontSet: WideString; 
      FontID: Integer): Integer;
    function SetHTMLItalicFont(const FontSet: WideString; 
      FontID: Integer): Integer;
    function SetHTMLNormalFont(const FontSet: WideString; 
      FontID: Integer): Integer;
    function SetHeaderCommentsFromString(const Source: AnsiString): Integer;
    function SetImageAsMask(MaskType: Integer): Integer;
    function SetImageMask(FromRed, FromGreen, FromBlue, ToRed, ToGreen, 
      ToBlue: Double): Integer;
    function SetImageMaskCMYK(FromC, FromM, FromY, FromK, ToC, ToM, ToY, 
      ToK: Double): Integer;
    function SetImageMaskFromImage(ImageID: Integer): Integer;
    function SetImageOptional(OptionalContentGroupID: Integer): Integer;
    function SetImageResolution(Horizontal, Vertical, Units: Integer): Integer;
    function SetInformation(Key: Integer; const NewValue: WideString): Integer;
    function SetJPEGQuality(Quality: Integer): Integer;
    function SetJavaScriptMode(JSMode: Integer): Integer;
    function SetKerning(const CharPair: WideString; 
      Adjustment: Integer): Integer;
    function SetLineCap(LineCap: Integer): Integer;
    function SetLineColor(Red, Green, Blue: Double): Integer;
    function SetLineColorCMYK(C, M, Y, K: Double): Integer;
    function SetLineColorSep(const ColorName: WideString; 
      Tint: Double): Integer;
    function SetLineDash(DashOn, DashOff: Double): Integer;
    function SetLineDashEx(const DashValues: WideString): Integer;
    function SetLineJoin(LineJoin: Integer): Integer;
    function SetLineShader(const ShaderName: WideString): Integer;
    function SetLineWidth(LineWidth: Double): Integer;
    function SetMarkupAnnotStyle(Index: Integer; Red, Green, Blue, 
      Transparency: Double): Integer;
    function SetMeasureDictBoundsCount(MeasureDictID, 
      NewCount: Integer): Integer;
    function SetMeasureDictBoundsItem(MeasureDictID, ItemIndex: Integer; 
      NewValue: Double): Integer;
    function SetMeasureDictCoordinateSystem(MeasureDictID, 
      CoordinateSystemID: Integer): Integer;
    function SetMeasureDictGPTSCount(MeasureDictID, NewCount: Integer): Integer;
    function SetMeasureDictGPTSItem(MeasureDictID, ItemIndex: Integer; 
      NewValue: Double): Integer;
    function SetMeasureDictLPTSCount(MeasureDictID, NewCount: Integer): Integer;
    function SetMeasureDictLPTSItem(MeasureDictID, ItemIndex: Integer; 
      NewValue: Double): Integer;
    function SetMeasureDictPDU(MeasureDictID, LinearUnit, AreaUnit, 
      AngularUnit: Integer): Integer;
    function SetMeasurementUnits(MeasurementUnits: Integer): Integer;
    function SetNeedAppearances(NewValue: Integer): Integer;
    function SetObjectFromString(ObjectNumber: Integer; 
      const Source: AnsiString): Integer;
    function SetOpenActionDestination(OpenPage, Zoom: Integer): Integer;
    function SetOpenActionDestinationFull(OpenPage, Zoom, DestType: Integer; 
      Left, Top, Right, Bottom: Double): Integer;
    function SetOpenActionJavaScript(const JavaScript: WideString): Integer;
    function SetOpenActionMenu(const MenuItem: WideString): Integer;
    function SetOptionalContentConfigLocked(OptionalContentConfigID, 
      OptionalContentGroupID, NewLocked: Integer): Integer;
    function SetOptionalContentConfigState(OptionalContentConfigID, 
      OptionalContentGroupID, NewState: Integer): Integer;
    function SetOptionalContentGroupName(OptionalContentGroupID: Integer; 
      const NewGroupName: WideString): Integer;
    function SetOptionalContentGroupPrintable(OptionalContentGroupID, 
      Printable: Integer): Integer;
    function SetOptionalContentGroupVisible(OptionalContentGroupID, 
      Visible: Integer): Integer;
    function SetOrigin(Origin: Integer): Integer;
    function SetOutlineColor(OutlineID: Integer; Red, Green, 
      Blue: Double): Integer;
    function SetOutlineDestination(OutlineID, DestPage: Integer; 
      DestPosition: Double): Integer;
    function SetOutlineDestinationFull(OutlineID, DestPage, Zoom, 
      DestType: Integer; Left, Top, Right, Bottom: Double): Integer;
    function SetOutlineDestinationZoom(OutlineID, DestPage: Integer; 
      DestPosition: Double; Zoom: Integer): Integer;
    function SetOutlineJavaScript(OutlineID: Integer; 
      const JavaScript: WideString): Integer;
    function SetOutlineNamedDestination(OutlineID: Integer; 
      const DestName: WideString): Integer;
    function SetOutlineOpenFile(OutlineID: Integer; 
      const FileName: WideString): Integer;
    function SetOutlineRemoteDestination(OutlineID: Integer; 
      const FileName: WideString; OpenPage, Zoom, DestType: Integer; PntLeft, 
      PntTop, PntRight, PntBottom: Double; NewWindow: Integer): Integer;
    function SetOutlineStyle(OutlineID, SetItalic, SetBold: Integer): Integer;
    function SetOutlineTitle(OutlineID: Integer; 
      const NewTitle: WideString): Integer;
    function SetOutlineWebLink(OutlineID: Integer; 
      const Link: WideString): Integer;
    function SetOverprint(StrokingOverprint, OtherOverprint, 
      OverprintMode: Integer): Integer;
    function SetPDFAMode(NewMode: Integer): Integer;
    function SetPNGTransparencyColor(RedByte, GreenByte, 
      BlueByte: Integer): Integer;
    function SetPageActionMenu(const MenuItem: WideString): Integer;
    function SetPageBox(BoxType: Integer; Left, Top, Width, 
      Height: Double): Integer;
    function SetPageContentFromString(const Source: AnsiString): Integer;
    function SetPageDimensions(NewPageWidth, NewPageHeight: Double): Integer;
    function SetPageLayout(NewPageLayout: Integer): Integer;
    function SetPageMode(NewPageMode: Integer): Integer;
    function SetPageSize(const PaperName: WideString): Integer;
    function SetPageThumbnail(): Integer;
    function SetPageTransparencyGroup(CS, Isolate, Knockout: Integer): Integer;
    function SetPageUserUnit(UserUnit: Double): Integer;
    function SetPrecision(NewPrecision: Integer): Integer;
    function SetPrinterDevModeFromString(const Source: AnsiString): Integer;
    function SetRenderCropType(NewCropType: Integer): Integer;
    function SetRenderDCErasePage(NewErasePage: Integer): Integer;
    function SetRenderDCOffset(NewOffsetX, NewOffsetY: Integer): Integer;
    function SetRenderOptions(OptionID, NewValue: Integer): Integer;
    function SetRenderScale(NewScale: Double): Integer;
    function SetScale(NewScale: Double): Integer;
    function SetSignProcessCustomSubFilter(SignProcessID: Integer; 
      const SubFilterStr: WideString): Integer;
    function SetSignProcessField(SignProcessID: Integer; 
      const SignatureFieldName: WideString): Integer;
    function SetSignProcessFieldBounds(SignProcessID: Integer; Left, Top, 
      Width, Height: Double): Integer;
    function SetSignProcessFieldImageFromFile(SignProcessID: Integer; 
      const ImageFileName: WideString; Options: Integer): Integer;
    function SetSignProcessFieldPage(SignProcessID, 
      SignaturePage: Integer): Integer;
    function SetSignProcessInfo(SignProcessID: Integer; const Reason, Location, 
      ContactInfo: WideString): Integer;
    function SetSignProcessKeyset(SignProcessID, KeysetID: Integer): Integer;
    function SetSignProcessPFXFromFile(SignProcessID: Integer; 
      const PFXFileName, PFXPassword: WideString): Integer;
    function SetSignProcessPassthrough(SignProcessID, 
      SignatureLength: Integer): Integer;
    function SetSignProcessSubFilter(SignProcessID, 
      SubFilter: Integer): Integer;
    function SetTabOrderMode(const Mode: WideString): Integer;
    function SetTableBorderColor(TableID, BorderIndex: Integer; Red, Green, 
      Blue: Double): Integer;
    function SetTableBorderColorCMYK(TableID, BorderIndex: Integer; C, M, Y, 
      K: Double): Integer;
    function SetTableBorderWidth(TableID, BorderIndex: Integer; 
      NewWidth: Double): Integer;
    function SetTableCellAlignment(TableID, FirstRow, FirstColumn, LastRow, 
      LastColumn, NewCellAlignment: Integer): Integer;
    function SetTableCellBackgroundColor(TableID, FirstRow, FirstColumn, 
      LastRow, LastColumn: Integer; Red, Green, Blue: Double): Integer;
    function SetTableCellBackgroundColorCMYK(TableID, FirstRow, FirstColumn, 
      LastRow, LastColumn: Integer; C, M, Y, K: Double): Integer;
    function SetTableCellBorderColor(TableID, FirstRow, FirstColumn, LastRow, 
      LastColumn, BorderIndex: Integer; Red, Green, Blue: Double): Integer;
    function SetTableCellBorderColorCMYK(TableID, FirstRow, FirstColumn, 
      LastRow, LastColumn, BorderIndex: Integer; C, M, Y, K: Double): Integer;
    function SetTableCellBorderWidth(TableID, FirstRow, FirstColumn, LastRow, 
      LastColumn, BorderIndex: Integer; NewWidth: Double): Integer;
    function SetTableCellContent(TableID, RowNumber, ColumnNumber: Integer; 
      const HTMLText: WideString): Integer;
    function SetTableCellPadding(TableID, FirstRow, FirstColumn, LastRow, 
      LastColumn, BorderIndex: Integer; NewPadding: Double): Integer;
    function SetTableCellTextColor(TableID, FirstRow, FirstColumn, LastRow, 
      LastColumn: Integer; Red, Green, Blue: Double): Integer;
    function SetTableCellTextColorCMYK(TableID, FirstRow, FirstColumn, LastRow, 
      LastColumn: Integer; C, M, Y, K: Double): Integer;
    function SetTableCellTextSize(TableID, FirstRow, FirstColumn, LastRow, 
      LastColumn: Integer; NewTextSize: Double): Integer;
    function SetTableColumnWidth(TableID, FirstColumn, LastColumn: Integer; 
      NewWidth: Double): Integer;
    function SetTableRowHeight(TableID, FirstRow, LastRow: Integer; 
      NewHeight: Double): Integer;
    function SetTableThinBorders(TableID, ThinBorders: Integer; Red, Green, 
      Blue: Double): Integer;
    function SetTableThinBordersCMYK(TableID, ThinBorders: Integer; C, M, Y, 
      K: Double): Integer;
    function SetTempFile(const FileName: WideString): Integer;
    function SetTempPath(const NewPath: WideString): Integer;
    function SetTextAlign(TextAlign: Integer): Integer;
    function SetTextCharSpacing(CharSpacing: Double): Integer;
    function SetTextColor(Red, Green, Blue: Double): Integer;
    function SetTextColorCMYK(C, M, Y, K: Double): Integer;
    function SetTextColorSep(const ColorName: WideString; 
      Tint: Double): Integer;
    function SetTextExtractionArea(Left, Top, Width, Height: Double): Integer;
    function SetTextExtractionOptions(OptionID, NewValue: Integer): Integer;
    function SetTextExtractionScaling(Options: Integer; Horizontal, 
      Vertical: Double): Integer;
    function SetTextExtractionWordGap(NewWordGap: Double): Integer;
    function SetTextHighlight(Highlight: Integer): Integer;
    function SetTextHighlightColor(Red, Green, Blue: Double): Integer;
    function SetTextHighlightColorCMYK(C, M, Y, K: Double): Integer;
    function SetTextHighlightColorSep(const ColorName: WideString; 
      Tint: Double): Integer;
    function SetTextMode(TextMode: Integer): Integer;
    function SetTextRise(Rise: Double): Integer;
    function SetTextScaling(ScalePercentage: Double): Integer;
    function SetTextShader(const ShaderName: WideString): Integer;
    function SetTextSize(TextSize: Double): Integer;
    function SetTextSpacing(Spacing: Double): Integer;
    function SetTextUnderline(Underline: Integer): Integer;
    function SetTextUnderlineColor(Red, Green, Blue: Double): Integer;
    function SetTextUnderlineColorCMYK(C, M, Y, K: Double): Integer;
    function SetTextUnderlineColorSep(const ColorName: WideString; 
      Tint: Double): Integer;
    function SetTextUnderlineCustomDash(const DashPattern: WideString; 
      DashPhase: Double): Integer;
    function SetTextUnderlineDash(DashOn, DashOff: Double): Integer;
    function SetTextUnderlineDistance(UnderlineDistance: Double): Integer;
    function SetTextUnderlineWidth(UnderlineWidth: Double): Integer;
    function SetTextWordSpacing(WordSpacing: Double): Integer;
    function SetTransparency(Transparency: Integer): Integer;
    function SetViewerPreferences(Option, NewValue: Integer): Integer;
    function SetXFAFormFieldAccess(const XFAFieldName: WideString; 
      NewAccess: Integer): Integer;
    function SetXFAFormFieldBorderColor(const XFAFieldName: WideString; Red, 
      Green, Blue: Double): Integer;
    function SetXFAFormFieldBorderPresence(const XFAFieldName: WideString; 
      NewPresence: Integer): Integer;
    function SetXFAFormFieldBorderWidth(const XFAFieldName: WideString; 
      BorderWidth: Double): Integer;
    function SetXFAFormFieldValue(const XFAFieldName, 
      NewValue: WideString): Integer;
    function SetXFAFromString(const Source: AnsiString; 
      Options: Integer): Integer;
    function SetupCustomPrinter(const CustomPrinterName: WideString; Setting, 
      NewValue: Integer): Integer;
    function SignFile(const InputFileName, OpenPassword, SignatureFieldName, 
      OutputFileName, PFXFileName, PFXPassword, Reason, Location, 
      ContactInfo: WideString): Integer;
    function SplitPageText(Options: Integer): Integer;
    function StartPath(StartX, StartY: Double): Integer;
    function StoreCustomDataFromFile(const Key, FileName: WideString; Location, 
      Options: Integer): Integer;
    function StoreCustomDataFromString(const Key, NewValue: AnsiString; 
      Location, Options: Integer): Integer;
    function StringResultLength(): Integer;
    function TestTempPath(): Integer;
    function TransformFile(const InputFileName, Password, 
      OutputFileName: WideString; TransformType, Options: Integer): Integer;
    function UnlockKey(const LicenseKey: WideString): Integer;
    function Unlocked(): Integer;
    function UpdateAndFlattenFormField(Index: Integer): Integer;
    function UpdateAppearanceStream(Index: Integer): Integer;
    function UpdateTrueTypeSubsettedFont(
      const SubsetChars: WideString): Integer;
    function UseKerning(Kern: Integer): Integer;
    function UseUnsafeContentStreams(SafetyLevel: Integer): Integer;
  end;

implementation

uses
  {$IFDEF UNICODE}
  AnsiStrings,
  {$ENDIF}
  SysUtils;

{ TDebenuPDFLibraryDLL1114 }

constructor TDebenuPDFLibraryDLL1114.Create(const DLLFileName: WideString);

procedure AssignProc(var Proc: Pointer; ProcName: PAnsiChar);
begin
  Proc := GetProcAddress(FDLLHandle, ProcName);
  if not Assigned(Proc) then FLibraryLoaded := False;
end;

begin
  FDLLHandle := 0;
  FInstanceID := 0;
  FLibraryLoaded := False;
  if (DLLFileName <> '') then
  begin
    FDLLHandle := LoadLibraryW(@DLLFileName[1]);
    if (FDLLHandle <> 0) then
    begin
      FLibraryLoaded := True;
      AssignProc(@DebenuPDFLibraryAddArcToPath, 'DPLAddArcToPath');
      AssignProc(@DebenuPDFLibraryAddBoxToPath, 'DPLAddBoxToPath');
      AssignProc(@DebenuPDFLibraryAddCJKFont, 'DPLAddCJKFont');
      AssignProc(@DebenuPDFLibraryAddCurveToPath, 'DPLAddCurveToPath');
      AssignProc(@DebenuPDFLibraryAddEmbeddedFile, 'DPLAddEmbeddedFile');
      AssignProc(@DebenuPDFLibraryAddFileAttachment, 'DPLAddFileAttachment');
      AssignProc(@DebenuPDFLibraryAddFormFieldChoiceSub, 'DPLAddFormFieldChoiceSub');
      AssignProc(@DebenuPDFLibraryAddFormFieldSub, 'DPLAddFormFieldSub');
      AssignProc(@DebenuPDFLibraryAddFormFont, 'DPLAddFormFont');
      AssignProc(@DebenuPDFLibraryAddFreeTextAnnotation, 'DPLAddFreeTextAnnotation');
      AssignProc(@DebenuPDFLibraryAddFreeTextAnnotationEx, 'DPLAddFreeTextAnnotationEx');
      AssignProc(@DebenuPDFLibraryAddGlobalJavaScript, 'DPLAddGlobalJavaScript');
      AssignProc(@DebenuPDFLibraryAddImageFromFile, 'DPLAddImageFromFile');
      AssignProc(@DebenuPDFLibraryAddImageFromFileOffset, 'DPLAddImageFromFileOffset');
      AssignProc(@DebenuPDFLibraryAddImageFromString, 'DPLAddImageFromString');
      AssignProc(@DebenuPDFLibraryAddLGIDictToPage, 'DPLAddLGIDictToPage');
      AssignProc(@DebenuPDFLibraryAddLineToPath, 'DPLAddLineToPath');
      AssignProc(@DebenuPDFLibraryAddLinkToDestination, 'DPLAddLinkToDestination');
      AssignProc(@DebenuPDFLibraryAddLinkToEmbeddedFile, 'DPLAddLinkToEmbeddedFile');
      AssignProc(@DebenuPDFLibraryAddLinkToFile, 'DPLAddLinkToFile');
      AssignProc(@DebenuPDFLibraryAddLinkToFileDest, 'DPLAddLinkToFileDest');
      AssignProc(@DebenuPDFLibraryAddLinkToFileEx, 'DPLAddLinkToFileEx');
      AssignProc(@DebenuPDFLibraryAddLinkToJavaScript, 'DPLAddLinkToJavaScript');
      AssignProc(@DebenuPDFLibraryAddLinkToLocalFile, 'DPLAddLinkToLocalFile');
      AssignProc(@DebenuPDFLibraryAddLinkToPage, 'DPLAddLinkToPage');
      AssignProc(@DebenuPDFLibraryAddLinkToWeb, 'DPLAddLinkToWeb');
      AssignProc(@DebenuPDFLibraryAddNoteAnnotation, 'DPLAddNoteAnnotation');
      AssignProc(@DebenuPDFLibraryAddOpenTypeFontFromFile, 'DPLAddOpenTypeFontFromFile');
      AssignProc(@DebenuPDFLibraryAddPageLabels, 'DPLAddPageLabels');
      AssignProc(@DebenuPDFLibraryAddPageMatrix, 'DPLAddPageMatrix');
      AssignProc(@DebenuPDFLibraryAddRelativeLinkToFile, 'DPLAddRelativeLinkToFile');
      AssignProc(@DebenuPDFLibraryAddRelativeLinkToFileDest, 'DPLAddRelativeLinkToFileDest');
      AssignProc(@DebenuPDFLibraryAddRelativeLinkToFileEx, 'DPLAddRelativeLinkToFileEx');
      AssignProc(@DebenuPDFLibraryAddRelativeLinkToLocalFile, 'DPLAddRelativeLinkToLocalFile');
      AssignProc(@DebenuPDFLibraryAddSVGAnnotationFromFile, 'DPLAddSVGAnnotationFromFile');
      AssignProc(@DebenuPDFLibraryAddSWFAnnotationFromFile, 'DPLAddSWFAnnotationFromFile');
      AssignProc(@DebenuPDFLibraryAddSeparationColor, 'DPLAddSeparationColor');
      AssignProc(@DebenuPDFLibraryAddStampAnnotation, 'DPLAddStampAnnotation');
      AssignProc(@DebenuPDFLibraryAddStampAnnotationFromImage, 'DPLAddStampAnnotationFromImage');
      AssignProc(@DebenuPDFLibraryAddStampAnnotationFromImageID, 'DPLAddStampAnnotationFromImageID');
      AssignProc(@DebenuPDFLibraryAddStandardFont, 'DPLAddStandardFont');
      AssignProc(@DebenuPDFLibraryAddSubsettedFont, 'DPLAddSubsettedFont');
      AssignProc(@DebenuPDFLibraryAddTextMarkupAnnotation, 'DPLAddTextMarkupAnnotation');
      AssignProc(@DebenuPDFLibraryAddToBuffer, 'DPLAddToBuffer');
      AssignProc(@DebenuPDFLibraryAddToFileList, 'DPLAddToFileList');
      AssignProc(@DebenuPDFLibraryAddTrueTypeFont, 'DPLAddTrueTypeFont');
      AssignProc(@DebenuPDFLibraryAddTrueTypeFontFromFile, 'DPLAddTrueTypeFontFromFile');
      AssignProc(@DebenuPDFLibraryAddTrueTypeSubsettedFont, 'DPLAddTrueTypeSubsettedFont');
      AssignProc(@DebenuPDFLibraryAddType1Font, 'DPLAddType1Font');
      AssignProc(@DebenuPDFLibraryAddU3DAnnotationFromFile, 'DPLAddU3DAnnotationFromFile');
      AssignProc(@DebenuPDFLibraryAnalyseFile, 'DPLAnalyseFile');
      AssignProc(@DebenuPDFLibraryAnnotationCount, 'DPLAnnotationCount');
      AssignProc(@DebenuPDFLibraryAnsiStringResultLength, 'DPLAnsiStringResultLength');
      AssignProc(@DebenuPDFLibraryAppendSpace, 'DPLAppendSpace');
      AssignProc(@DebenuPDFLibraryAppendTableColumns, 'DPLAppendTableColumns');
      AssignProc(@DebenuPDFLibraryAppendTableRows, 'DPLAppendTableRows');
      AssignProc(@DebenuPDFLibraryAppendText, 'DPLAppendText');
      AssignProc(@DebenuPDFLibraryAppendToFile, 'DPLAppendToFile');
      AssignProc(@DebenuPDFLibraryAppendToString, 'DPLAppendToString');
      AssignProc(@DebenuPDFLibraryApplyStyle, 'DPLApplyStyle');
      AssignProc(@DebenuPDFLibraryAttachAnnotToForm, 'DPLAttachAnnotToForm');
      AssignProc(@DebenuPDFLibraryBalanceContentStream, 'DPLBalanceContentStream');
      AssignProc(@DebenuPDFLibraryBalancePageTree, 'DPLBalancePageTree');
      AssignProc(@DebenuPDFLibraryBeginPageUpdate, 'DPLBeginPageUpdate');
      AssignProc(@DebenuPDFLibraryCapturePage, 'DPLCapturePage');
      AssignProc(@DebenuPDFLibraryCapturePageEx, 'DPLCapturePageEx');
      AssignProc(@DebenuPDFLibraryCharWidth, 'DPLCharWidth');
      AssignProc(@DebenuPDFLibraryCheckFileCompliance, 'DPLCheckFileCompliance');
      AssignProc(@DebenuPDFLibraryCheckObjects, 'DPLCheckObjects');
      AssignProc(@DebenuPDFLibraryCheckPageAnnots, 'DPLCheckPageAnnots');
      AssignProc(@DebenuPDFLibraryCheckPassword, 'DPLCheckPassword');
      AssignProc(@DebenuPDFLibraryClearFileList, 'DPLClearFileList');
      AssignProc(@DebenuPDFLibraryClearImage, 'DPLClearImage');
      AssignProc(@DebenuPDFLibraryClearPageLabels, 'DPLClearPageLabels');
      AssignProc(@DebenuPDFLibraryClearTextFormatting, 'DPLClearTextFormatting');
      AssignProc(@DebenuPDFLibraryCloneOutlineAction, 'DPLCloneOutlineAction');
      AssignProc(@DebenuPDFLibraryClonePages, 'DPLClonePages');
      AssignProc(@DebenuPDFLibraryCloseOutline, 'DPLCloseOutline');
      AssignProc(@DebenuPDFLibraryClosePath, 'DPLClosePath');
      AssignProc(@DebenuPDFLibraryCombineContentStreams, 'DPLCombineContentStreams');
      AssignProc(@DebenuPDFLibraryCompareOutlines, 'DPLCompareOutlines');
      AssignProc(@DebenuPDFLibraryCompressContent, 'DPLCompressContent');
      AssignProc(@DebenuPDFLibraryCompressFonts, 'DPLCompressFonts');
      AssignProc(@DebenuPDFLibraryCompressImages, 'DPLCompressImages');
      AssignProc(@DebenuPDFLibraryCompressPage, 'DPLCompressPage');
      AssignProc(@DebenuPDFLibraryContentStreamCount, 'DPLContentStreamCount');
      AssignProc(@DebenuPDFLibraryContentStreamSafe, 'DPLContentStreamSafe');
      AssignProc(@DebenuPDFLibraryCopyPageRanges, 'DPLCopyPageRanges');
      AssignProc(@DebenuPDFLibraryCopyPageRangesEx, 'DPLCopyPageRangesEx');
      AssignProc(@DebenuPDFLibraryCreateBuffer, 'DPLCreateBuffer');
      AssignProc(@DebenuPDFLibraryCreateLibrary, 'DPLCreateLibrary');
      AssignProc(@DebenuPDFLibraryCreateNewObject, 'DPLCreateNewObject');
      AssignProc(@DebenuPDFLibraryCreateTable, 'DPLCreateTable');
      AssignProc(@DebenuPDFLibraryDAAppendFile, 'DPLDAAppendFile');
      AssignProc(@DebenuPDFLibraryDACapturePage, 'DPLDACapturePage');
      AssignProc(@DebenuPDFLibraryDACapturePageEx, 'DPLDACapturePageEx');
      AssignProc(@DebenuPDFLibraryDACloseFile, 'DPLDACloseFile');
      AssignProc(@DebenuPDFLibraryDADrawCapturedPage, 'DPLDADrawCapturedPage');
      AssignProc(@DebenuPDFLibraryDADrawRotatedCapturedPage, 'DPLDADrawRotatedCapturedPage');
      AssignProc(@DebenuPDFLibraryDAEmbedFileStreams, 'DPLDAEmbedFileStreams');
      AssignProc(@DebenuPDFLibraryDAExtractPageText, 'DPLDAExtractPageText');
      AssignProc(@DebenuPDFLibraryDAExtractPageTextBlocks, 'DPLDAExtractPageTextBlocks');
      AssignProc(@DebenuPDFLibraryDAFindPage, 'DPLDAFindPage');
      AssignProc(@DebenuPDFLibraryDAGetAnnotationCount, 'DPLDAGetAnnotationCount');
      AssignProc(@DebenuPDFLibraryDAGetFormFieldCount, 'DPLDAGetFormFieldCount');
      AssignProc(@DebenuPDFLibraryDAGetFormFieldTitle, 'DPLDAGetFormFieldTitle');
      AssignProc(@DebenuPDFLibraryDAGetFormFieldValue, 'DPLDAGetFormFieldValue');
      AssignProc(@DebenuPDFLibraryDAGetImageDataToString, 'DPLDAGetImageDataToString');
      AssignProc(@DebenuPDFLibraryDAGetImageDblProperty, 'DPLDAGetImageDblProperty');
      AssignProc(@DebenuPDFLibraryDAGetImageIntProperty, 'DPLDAGetImageIntProperty');
      AssignProc(@DebenuPDFLibraryDAGetImageListCount, 'DPLDAGetImageListCount');
      AssignProc(@DebenuPDFLibraryDAGetInformation, 'DPLDAGetInformation');
      AssignProc(@DebenuPDFLibraryDAGetObjectCount, 'DPLDAGetObjectCount');
      AssignProc(@DebenuPDFLibraryDAGetObjectToString, 'DPLDAGetObjectToString');
      AssignProc(@DebenuPDFLibraryDAGetPageBox, 'DPLDAGetPageBox');
      AssignProc(@DebenuPDFLibraryDAGetPageContentToString, 'DPLDAGetPageContentToString');
      AssignProc(@DebenuPDFLibraryDAGetPageCount, 'DPLDAGetPageCount');
      AssignProc(@DebenuPDFLibraryDAGetPageHeight, 'DPLDAGetPageHeight');
      AssignProc(@DebenuPDFLibraryDAGetPageImageList, 'DPLDAGetPageImageList');
      AssignProc(@DebenuPDFLibraryDAGetPageWidth, 'DPLDAGetPageWidth');
      AssignProc(@DebenuPDFLibraryDAGetTextBlockAsString, 'DPLDAGetTextBlockAsString');
      AssignProc(@DebenuPDFLibraryDAGetTextBlockBound, 'DPLDAGetTextBlockBound');
      AssignProc(@DebenuPDFLibraryDAGetTextBlockCharWidth, 'DPLDAGetTextBlockCharWidth');
      AssignProc(@DebenuPDFLibraryDAGetTextBlockColor, 'DPLDAGetTextBlockColor');
      AssignProc(@DebenuPDFLibraryDAGetTextBlockColorType, 'DPLDAGetTextBlockColorType');
      AssignProc(@DebenuPDFLibraryDAGetTextBlockCount, 'DPLDAGetTextBlockCount');
      AssignProc(@DebenuPDFLibraryDAGetTextBlockFontName, 'DPLDAGetTextBlockFontName');
      AssignProc(@DebenuPDFLibraryDAGetTextBlockFontSize, 'DPLDAGetTextBlockFontSize');
      AssignProc(@DebenuPDFLibraryDAGetTextBlockText, 'DPLDAGetTextBlockText');
      AssignProc(@DebenuPDFLibraryDAHasPageBox, 'DPLDAHasPageBox');
      AssignProc(@DebenuPDFLibraryDAHidePage, 'DPLDAHidePage');
      AssignProc(@DebenuPDFLibraryDAMovePage, 'DPLDAMovePage');
      AssignProc(@DebenuPDFLibraryDANewPage, 'DPLDANewPage');
      AssignProc(@DebenuPDFLibraryDANewPages, 'DPLDANewPages');
      AssignProc(@DebenuPDFLibraryDANormalizePage, 'DPLDANormalizePage');
      AssignProc(@DebenuPDFLibraryDAOpenFile, 'DPLDAOpenFile');
      AssignProc(@DebenuPDFLibraryDAOpenFileReadOnly, 'DPLDAOpenFileReadOnly');
      AssignProc(@DebenuPDFLibraryDAPageRotation, 'DPLDAPageRotation');
      AssignProc(@DebenuPDFLibraryDAReleaseImageList, 'DPLDAReleaseImageList');
      AssignProc(@DebenuPDFLibraryDAReleaseTextBlocks, 'DPLDAReleaseTextBlocks');
      AssignProc(@DebenuPDFLibraryDARemoveUsageRights, 'DPLDARemoveUsageRights');
      AssignProc(@DebenuPDFLibraryDARenderPageToDC, 'DPLDARenderPageToDC');
      AssignProc(@DebenuPDFLibraryDARenderPageToFile, 'DPLDARenderPageToFile');
      AssignProc(@DebenuPDFLibraryDARenderPageToString, 'DPLDARenderPageToString');
      AssignProc(@DebenuPDFLibraryDARotatePage, 'DPLDARotatePage');
      AssignProc(@DebenuPDFLibraryDASaveAsFile, 'DPLDASaveAsFile');
      AssignProc(@DebenuPDFLibraryDASaveImageDataToFile, 'DPLDASaveImageDataToFile');
      AssignProc(@DebenuPDFLibraryDASetInformation, 'DPLDASetInformation');
      AssignProc(@DebenuPDFLibraryDASetPageBox, 'DPLDASetPageBox');
      AssignProc(@DebenuPDFLibraryDASetPageLayout, 'DPLDASetPageLayout');
      AssignProc(@DebenuPDFLibraryDASetPageMode, 'DPLDASetPageMode');
      AssignProc(@DebenuPDFLibraryDASetPageSize, 'DPLDASetPageSize');
      AssignProc(@DebenuPDFLibraryDASetTextExtractionArea, 'DPLDASetTextExtractionArea');
      AssignProc(@DebenuPDFLibraryDASetTextExtractionOptions, 'DPLDASetTextExtractionOptions');
      AssignProc(@DebenuPDFLibraryDASetTextExtractionScaling, 'DPLDASetTextExtractionScaling');
      AssignProc(@DebenuPDFLibraryDASetTextExtractionWordGap, 'DPLDASetTextExtractionWordGap');
      AssignProc(@DebenuPDFLibraryDAShiftedHeader, 'DPLDAShiftedHeader');
      AssignProc(@DebenuPDFLibraryDecrypt, 'DPLDecrypt');
      AssignProc(@DebenuPDFLibraryDecryptFile, 'DPLDecryptFile');
      AssignProc(@DebenuPDFLibraryDeleteAnalysis, 'DPLDeleteAnalysis');
      AssignProc(@DebenuPDFLibraryDeleteAnnotation, 'DPLDeleteAnnotation');
      AssignProc(@DebenuPDFLibraryDeleteContentStream, 'DPLDeleteContentStream');
      AssignProc(@DebenuPDFLibraryDeleteFormField, 'DPLDeleteFormField');
      AssignProc(@DebenuPDFLibraryDeleteOptionalContentGroup, 'DPLDeleteOptionalContentGroup');
      AssignProc(@DebenuPDFLibraryDeletePageLGIDict, 'DPLDeletePageLGIDict');
      AssignProc(@DebenuPDFLibraryDeletePages, 'DPLDeletePages');
      AssignProc(@DebenuPDFLibraryDocJavaScriptAction, 'DPLDocJavaScriptAction');
      AssignProc(@DebenuPDFLibraryDocumentCount, 'DPLDocumentCount');
      AssignProc(@DebenuPDFLibraryDrawArc, 'DPLDrawArc');
      AssignProc(@DebenuPDFLibraryDrawBarcode, 'DPLDrawBarcode');
      AssignProc(@DebenuPDFLibraryDrawBox, 'DPLDrawBox');
      AssignProc(@DebenuPDFLibraryDrawCapturedPage, 'DPLDrawCapturedPage');
      AssignProc(@DebenuPDFLibraryDrawCapturedPageMatrix, 'DPLDrawCapturedPageMatrix');
      AssignProc(@DebenuPDFLibraryDrawCircle, 'DPLDrawCircle');
      AssignProc(@DebenuPDFLibraryDrawDataMatrixSymbol, 'DPLDrawDataMatrixSymbol');
      AssignProc(@DebenuPDFLibraryDrawEllipse, 'DPLDrawEllipse');
      AssignProc(@DebenuPDFLibraryDrawEllipticArc, 'DPLDrawEllipticArc');
      AssignProc(@DebenuPDFLibraryDrawHTMLText, 'DPLDrawHTMLText');
      AssignProc(@DebenuPDFLibraryDrawHTMLTextBox, 'DPLDrawHTMLTextBox');
      AssignProc(@DebenuPDFLibraryDrawHTMLTextBoxMatrix, 'DPLDrawHTMLTextBoxMatrix');
      AssignProc(@DebenuPDFLibraryDrawHTMLTextMatrix, 'DPLDrawHTMLTextMatrix');
      AssignProc(@DebenuPDFLibraryDrawImage, 'DPLDrawImage');
      AssignProc(@DebenuPDFLibraryDrawImageMatrix, 'DPLDrawImageMatrix');
      AssignProc(@DebenuPDFLibraryDrawIntelligentMailBarcode, 'DPLDrawIntelligentMailBarcode');
      AssignProc(@DebenuPDFLibraryDrawLine, 'DPLDrawLine');
      AssignProc(@DebenuPDFLibraryDrawMultiLineText, 'DPLDrawMultiLineText');
      AssignProc(@DebenuPDFLibraryDrawPDF417Symbol, 'DPLDrawPDF417Symbol');
      AssignProc(@DebenuPDFLibraryDrawPDF417SymbolEx, 'DPLDrawPDF417SymbolEx');
      AssignProc(@DebenuPDFLibraryDrawPath, 'DPLDrawPath');
      AssignProc(@DebenuPDFLibraryDrawPathEvenOdd, 'DPLDrawPathEvenOdd');
      AssignProc(@DebenuPDFLibraryDrawPostScriptXObject, 'DPLDrawPostScriptXObject');
      AssignProc(@DebenuPDFLibraryDrawQRCode, 'DPLDrawQRCode');
      AssignProc(@DebenuPDFLibraryDrawRotatedBox, 'DPLDrawRotatedBox');
      AssignProc(@DebenuPDFLibraryDrawRotatedCapturedPage, 'DPLDrawRotatedCapturedPage');
      AssignProc(@DebenuPDFLibraryDrawRotatedImage, 'DPLDrawRotatedImage');
      AssignProc(@DebenuPDFLibraryDrawRotatedMultiLineText, 'DPLDrawRotatedMultiLineText');
      AssignProc(@DebenuPDFLibraryDrawRotatedText, 'DPLDrawRotatedText');
      AssignProc(@DebenuPDFLibraryDrawRotatedTextBox, 'DPLDrawRotatedTextBox');
      AssignProc(@DebenuPDFLibraryDrawRotatedTextBoxEx, 'DPLDrawRotatedTextBoxEx');
      AssignProc(@DebenuPDFLibraryDrawRoundedBox, 'DPLDrawRoundedBox');
      AssignProc(@DebenuPDFLibraryDrawRoundedRotatedBox, 'DPLDrawRoundedRotatedBox');
      AssignProc(@DebenuPDFLibraryDrawScaledImage, 'DPLDrawScaledImage');
      AssignProc(@DebenuPDFLibraryDrawSpacedText, 'DPLDrawSpacedText');
      AssignProc(@DebenuPDFLibraryDrawTableRows, 'DPLDrawTableRows');
      AssignProc(@DebenuPDFLibraryDrawText, 'DPLDrawText');
      AssignProc(@DebenuPDFLibraryDrawTextArc, 'DPLDrawTextArc');
      AssignProc(@DebenuPDFLibraryDrawTextBox, 'DPLDrawTextBox');
      AssignProc(@DebenuPDFLibraryDrawTextBoxMatrix, 'DPLDrawTextBoxMatrix');
      AssignProc(@DebenuPDFLibraryDrawWrappedText, 'DPLDrawWrappedText');
      AssignProc(@DebenuPDFLibraryEditableContentStream, 'DPLEditableContentStream');
      AssignProc(@DebenuPDFLibraryEmbedFile, 'DPLEmbedFile');
      AssignProc(@DebenuPDFLibraryEmbeddedFileCount, 'DPLEmbeddedFileCount');
      AssignProc(@DebenuPDFLibraryEncapsulateContentStream, 'DPLEncapsulateContentStream');
      AssignProc(@DebenuPDFLibraryEncodePermissions, 'DPLEncodePermissions');
      AssignProc(@DebenuPDFLibraryEncrypt, 'DPLEncrypt');
      AssignProc(@DebenuPDFLibraryEncryptFile, 'DPLEncryptFile');
      AssignProc(@DebenuPDFLibraryEncryptWithFingerprint, 'DPLEncryptWithFingerprint');
      AssignProc(@DebenuPDFLibraryEncryptionAlgorithm, 'DPLEncryptionAlgorithm');
      AssignProc(@DebenuPDFLibraryEncryptionStatus, 'DPLEncryptionStatus');
      AssignProc(@DebenuPDFLibraryEncryptionStrength, 'DPLEncryptionStrength');
      AssignProc(@DebenuPDFLibraryEndPageUpdate, 'DPLEndPageUpdate');
      AssignProc(@DebenuPDFLibraryEndSignProcessToFile, 'DPLEndSignProcessToFile');
      AssignProc(@DebenuPDFLibraryEndSignProcessToString, 'DPLEndSignProcessToString');
      AssignProc(@DebenuPDFLibraryExtractFilePageContentToString, 'DPLExtractFilePageContentToString');
      AssignProc(@DebenuPDFLibraryExtractFilePageText, 'DPLExtractFilePageText');
      AssignProc(@DebenuPDFLibraryExtractFilePageTextBlocks, 'DPLExtractFilePageTextBlocks');
      AssignProc(@DebenuPDFLibraryExtractFilePages, 'DPLExtractFilePages');
      AssignProc(@DebenuPDFLibraryExtractFilePagesEx, 'DPLExtractFilePagesEx');
      AssignProc(@DebenuPDFLibraryExtractPageRanges, 'DPLExtractPageRanges');
      AssignProc(@DebenuPDFLibraryExtractPageTextBlocks, 'DPLExtractPageTextBlocks');
      AssignProc(@DebenuPDFLibraryExtractPages, 'DPLExtractPages');
      AssignProc(@DebenuPDFLibraryFileListCount, 'DPLFileListCount');
      AssignProc(@DebenuPDFLibraryFileListItem, 'DPLFileListItem');
      AssignProc(@DebenuPDFLibraryFindFonts, 'DPLFindFonts');
      AssignProc(@DebenuPDFLibraryFindFormFieldByTitle, 'DPLFindFormFieldByTitle');
      AssignProc(@DebenuPDFLibraryFindImages, 'DPLFindImages');
      AssignProc(@DebenuPDFLibraryFitImage, 'DPLFitImage');
      AssignProc(@DebenuPDFLibraryFitRotatedTextBox, 'DPLFitRotatedTextBox');
      AssignProc(@DebenuPDFLibraryFitTextBox, 'DPLFitTextBox');
      AssignProc(@DebenuPDFLibraryFlattenAnnot, 'DPLFlattenAnnot');
      AssignProc(@DebenuPDFLibraryFlattenFormField, 'DPLFlattenFormField');
      AssignProc(@DebenuPDFLibraryFontCount, 'DPLFontCount');
      AssignProc(@DebenuPDFLibraryFontFamily, 'DPLFontFamily');
      AssignProc(@DebenuPDFLibraryFontHasKerning, 'DPLFontHasKerning');
      AssignProc(@DebenuPDFLibraryFontName, 'DPLFontName');
      AssignProc(@DebenuPDFLibraryFontReference, 'DPLFontReference');
      AssignProc(@DebenuPDFLibraryFontSize, 'DPLFontSize');
      AssignProc(@DebenuPDFLibraryFontType, 'DPLFontType');
      AssignProc(@DebenuPDFLibraryFormFieldCount, 'DPLFormFieldCount');
      AssignProc(@DebenuPDFLibraryFormFieldHasParent, 'DPLFormFieldHasParent');
      AssignProc(@DebenuPDFLibraryFormFieldJavaScriptAction, 'DPLFormFieldJavaScriptAction');
      AssignProc(@DebenuPDFLibraryFormFieldWebLinkAction, 'DPLFormFieldWebLinkAction');
      AssignProc(@DebenuPDFLibraryGetActionDest, 'DPLGetActionDest');
      AssignProc(@DebenuPDFLibraryGetActionType, 'DPLGetActionType');
      AssignProc(@DebenuPDFLibraryGetActionURL, 'DPLGetActionURL');
      AssignProc(@DebenuPDFLibraryGetAnalysisInfo, 'DPLGetAnalysisInfo');
      AssignProc(@DebenuPDFLibraryGetAnnotActionID, 'DPLGetAnnotActionID');
      AssignProc(@DebenuPDFLibraryGetAnnotDblProperty, 'DPLGetAnnotDblProperty');
      AssignProc(@DebenuPDFLibraryGetAnnotDest, 'DPLGetAnnotDest');
      AssignProc(@DebenuPDFLibraryGetAnnotEmbeddedFileName, 'DPLGetAnnotEmbeddedFileName');
      AssignProc(@DebenuPDFLibraryGetAnnotEmbeddedFileToFile, 'DPLGetAnnotEmbeddedFileToFile');
      AssignProc(@DebenuPDFLibraryGetAnnotEmbeddedFileToString, 'DPLGetAnnotEmbeddedFileToString');
      AssignProc(@DebenuPDFLibraryGetAnnotIntProperty, 'DPLGetAnnotIntProperty');
      AssignProc(@DebenuPDFLibraryGetAnnotQuadCount, 'DPLGetAnnotQuadCount');
      AssignProc(@DebenuPDFLibraryGetAnnotQuadPoints, 'DPLGetAnnotQuadPoints');
      AssignProc(@DebenuPDFLibraryGetAnnotSoundToFile, 'DPLGetAnnotSoundToFile');
      AssignProc(@DebenuPDFLibraryGetAnnotSoundToString, 'DPLGetAnnotSoundToString');
      AssignProc(@DebenuPDFLibraryGetAnnotStrProperty, 'DPLGetAnnotStrProperty');
      AssignProc(@DebenuPDFLibraryGetBarcodeWidth, 'DPLGetBarcodeWidth');
      AssignProc(@DebenuPDFLibraryGetBaseURL, 'DPLGetBaseURL');
      AssignProc(@DebenuPDFLibraryGetCSDictEPSG, 'DPLGetCSDictEPSG');
      AssignProc(@DebenuPDFLibraryGetCSDictType, 'DPLGetCSDictType');
      AssignProc(@DebenuPDFLibraryGetCSDictWKT, 'DPLGetCSDictWKT');
      AssignProc(@DebenuPDFLibraryGetCanvasDC, 'DPLGetCanvasDC');
      AssignProc(@DebenuPDFLibraryGetCanvasDCEx, 'DPLGetCanvasDCEx');
      AssignProc(@DebenuPDFLibraryGetCatalogInformation, 'DPLGetCatalogInformation');
      AssignProc(@DebenuPDFLibraryGetContentStreamToString, 'DPLGetContentStreamToString');
      AssignProc(@DebenuPDFLibraryGetCustomInformation, 'DPLGetCustomInformation');
      AssignProc(@DebenuPDFLibraryGetCustomKeys, 'DPLGetCustomKeys');
      AssignProc(@DebenuPDFLibraryGetDefaultPrinterName, 'DPLGetDefaultPrinterName');
      AssignProc(@DebenuPDFLibraryGetDestName, 'DPLGetDestName');
      AssignProc(@DebenuPDFLibraryGetDestPage, 'DPLGetDestPage');
      AssignProc(@DebenuPDFLibraryGetDestType, 'DPLGetDestType');
      AssignProc(@DebenuPDFLibraryGetDestValue, 'DPLGetDestValue');
      AssignProc(@DebenuPDFLibraryGetDocJavaScript, 'DPLGetDocJavaScript');
      AssignProc(@DebenuPDFLibraryGetDocumentFileName, 'DPLGetDocumentFileName');
      AssignProc(@DebenuPDFLibraryGetDocumentFileSize, 'DPLGetDocumentFileSize');
      AssignProc(@DebenuPDFLibraryGetDocumentID, 'DPLGetDocumentID');
      AssignProc(@DebenuPDFLibraryGetDocumentIdentifier, 'DPLGetDocumentIdentifier');
      AssignProc(@DebenuPDFLibraryGetDocumentMetadata, 'DPLGetDocumentMetadata');
      AssignProc(@DebenuPDFLibraryGetDocumentRepaired, 'DPLGetDocumentRepaired');
      AssignProc(@DebenuPDFLibraryGetDocumentResourceList, 'DPLGetDocumentResourceList');
      AssignProc(@DebenuPDFLibraryGetEmbeddedFileContentToFile, 'DPLGetEmbeddedFileContentToFile');
      AssignProc(@DebenuPDFLibraryGetEmbeddedFileContentToString, 'DPLGetEmbeddedFileContentToString');
      AssignProc(@DebenuPDFLibraryGetEmbeddedFileID, 'DPLGetEmbeddedFileID');
      AssignProc(@DebenuPDFLibraryGetEmbeddedFileIntProperty, 'DPLGetEmbeddedFileIntProperty');
      AssignProc(@DebenuPDFLibraryGetEmbeddedFileStrProperty, 'DPLGetEmbeddedFileStrProperty');
      AssignProc(@DebenuPDFLibraryGetEncryptionFingerprint, 'DPLGetEncryptionFingerprint');
      AssignProc(@DebenuPDFLibraryGetFileMetadata, 'DPLGetFileMetadata');
      AssignProc(@DebenuPDFLibraryGetFirstChildOutline, 'DPLGetFirstChildOutline');
      AssignProc(@DebenuPDFLibraryGetFirstOutline, 'DPLGetFirstOutline');
      AssignProc(@DebenuPDFLibraryGetFontEncoding, 'DPLGetFontEncoding');
      AssignProc(@DebenuPDFLibraryGetFontFlags, 'DPLGetFontFlags');
      AssignProc(@DebenuPDFLibraryGetFontID, 'DPLGetFontID');
      AssignProc(@DebenuPDFLibraryGetFontIsEmbedded, 'DPLGetFontIsEmbedded');
      AssignProc(@DebenuPDFLibraryGetFontIsSubsetted, 'DPLGetFontIsSubsetted');
      AssignProc(@DebenuPDFLibraryGetFontMetrics, 'DPLGetFontMetrics');
      AssignProc(@DebenuPDFLibraryGetFontObjectNumber, 'DPLGetFontObjectNumber');
      AssignProc(@DebenuPDFLibraryGetFormFieldActionID, 'DPLGetFormFieldActionID');
      AssignProc(@DebenuPDFLibraryGetFormFieldAlignment, 'DPLGetFormFieldAlignment');
      AssignProc(@DebenuPDFLibraryGetFormFieldAnnotFlags, 'DPLGetFormFieldAnnotFlags');
      AssignProc(@DebenuPDFLibraryGetFormFieldBackgroundColor, 'DPLGetFormFieldBackgroundColor');
      AssignProc(@DebenuPDFLibraryGetFormFieldBackgroundColorType, 'DPLGetFormFieldBackgroundColorType');
      AssignProc(@DebenuPDFLibraryGetFormFieldBorderColor, 'DPLGetFormFieldBorderColor');
      AssignProc(@DebenuPDFLibraryGetFormFieldBorderColorType, 'DPLGetFormFieldBorderColorType');
      AssignProc(@DebenuPDFLibraryGetFormFieldBorderProperty, 'DPLGetFormFieldBorderProperty');
      AssignProc(@DebenuPDFLibraryGetFormFieldBorderStyle, 'DPLGetFormFieldBorderStyle');
      AssignProc(@DebenuPDFLibraryGetFormFieldBound, 'DPLGetFormFieldBound');
      AssignProc(@DebenuPDFLibraryGetFormFieldCaption, 'DPLGetFormFieldCaption');
      AssignProc(@DebenuPDFLibraryGetFormFieldCaptionEx, 'DPLGetFormFieldCaptionEx');
      AssignProc(@DebenuPDFLibraryGetFormFieldCheckStyle, 'DPLGetFormFieldCheckStyle');
      AssignProc(@DebenuPDFLibraryGetFormFieldChildTitle, 'DPLGetFormFieldChildTitle');
      AssignProc(@DebenuPDFLibraryGetFormFieldChoiceType, 'DPLGetFormFieldChoiceType');
      AssignProc(@DebenuPDFLibraryGetFormFieldColor, 'DPLGetFormFieldColor');
      AssignProc(@DebenuPDFLibraryGetFormFieldComb, 'DPLGetFormFieldComb');
      AssignProc(@DebenuPDFLibraryGetFormFieldDefaultValue, 'DPLGetFormFieldDefaultValue');
      AssignProc(@DebenuPDFLibraryGetFormFieldDescription, 'DPLGetFormFieldDescription');
      AssignProc(@DebenuPDFLibraryGetFormFieldFlags, 'DPLGetFormFieldFlags');
      AssignProc(@DebenuPDFLibraryGetFormFieldFontName, 'DPLGetFormFieldFontName');
      AssignProc(@DebenuPDFLibraryGetFormFieldJavaScript, 'DPLGetFormFieldJavaScript');
      AssignProc(@DebenuPDFLibraryGetFormFieldKidCount, 'DPLGetFormFieldKidCount');
      AssignProc(@DebenuPDFLibraryGetFormFieldKidTempIndex, 'DPLGetFormFieldKidTempIndex');
      AssignProc(@DebenuPDFLibraryGetFormFieldMaxLen, 'DPLGetFormFieldMaxLen');
      AssignProc(@DebenuPDFLibraryGetFormFieldNoExport, 'DPLGetFormFieldNoExport');
      AssignProc(@DebenuPDFLibraryGetFormFieldPage, 'DPLGetFormFieldPage');
      AssignProc(@DebenuPDFLibraryGetFormFieldPrintable, 'DPLGetFormFieldPrintable');
      AssignProc(@DebenuPDFLibraryGetFormFieldReadOnly, 'DPLGetFormFieldReadOnly');
      AssignProc(@DebenuPDFLibraryGetFormFieldRequired, 'DPLGetFormFieldRequired');
      AssignProc(@DebenuPDFLibraryGetFormFieldRichTextString, 'DPLGetFormFieldRichTextString');
      AssignProc(@DebenuPDFLibraryGetFormFieldRotation, 'DPLGetFormFieldRotation');
      AssignProc(@DebenuPDFLibraryGetFormFieldSubCount, 'DPLGetFormFieldSubCount');
      AssignProc(@DebenuPDFLibraryGetFormFieldSubDisplayName, 'DPLGetFormFieldSubDisplayName');
      AssignProc(@DebenuPDFLibraryGetFormFieldSubName, 'DPLGetFormFieldSubName');
      AssignProc(@DebenuPDFLibraryGetFormFieldSubmitActionString, 'DPLGetFormFieldSubmitActionString');
      AssignProc(@DebenuPDFLibraryGetFormFieldTabOrder, 'DPLGetFormFieldTabOrder');
      AssignProc(@DebenuPDFLibraryGetFormFieldTabOrderEx, 'DPLGetFormFieldTabOrderEx');
      AssignProc(@DebenuPDFLibraryGetFormFieldTextFlags, 'DPLGetFormFieldTextFlags');
      AssignProc(@DebenuPDFLibraryGetFormFieldTextSize, 'DPLGetFormFieldTextSize');
      AssignProc(@DebenuPDFLibraryGetFormFieldTitle, 'DPLGetFormFieldTitle');
      AssignProc(@DebenuPDFLibraryGetFormFieldType, 'DPLGetFormFieldType');
      AssignProc(@DebenuPDFLibraryGetFormFieldValue, 'DPLGetFormFieldValue');
      AssignProc(@DebenuPDFLibraryGetFormFieldValueByTitle, 'DPLGetFormFieldValueByTitle');
      AssignProc(@DebenuPDFLibraryGetFormFieldVisible, 'DPLGetFormFieldVisible');
      AssignProc(@DebenuPDFLibraryGetFormFieldWebLink, 'DPLGetFormFieldWebLink');
      AssignProc(@DebenuPDFLibraryGetFormFontCount, 'DPLGetFormFontCount');
      AssignProc(@DebenuPDFLibraryGetFormFontName, 'DPLGetFormFontName');
      AssignProc(@DebenuPDFLibraryGetGlobalJavaScript, 'DPLGetGlobalJavaScript');
      AssignProc(@DebenuPDFLibraryGetHTMLTextHeight, 'DPLGetHTMLTextHeight');
      AssignProc(@DebenuPDFLibraryGetHTMLTextLineCount, 'DPLGetHTMLTextLineCount');
      AssignProc(@DebenuPDFLibraryGetHTMLTextWidth, 'DPLGetHTMLTextWidth');
      AssignProc(@DebenuPDFLibraryGetImageID, 'DPLGetImageID');
      AssignProc(@DebenuPDFLibraryGetImageListCount, 'DPLGetImageListCount');
      AssignProc(@DebenuPDFLibraryGetImageListItemDataToString, 'DPLGetImageListItemDataToString');
      AssignProc(@DebenuPDFLibraryGetImageListItemDblProperty, 'DPLGetImageListItemDblProperty');
      AssignProc(@DebenuPDFLibraryGetImageListItemFormatDesc, 'DPLGetImageListItemFormatDesc');
      AssignProc(@DebenuPDFLibraryGetImageListItemIntProperty, 'DPLGetImageListItemIntProperty');
      AssignProc(@DebenuPDFLibraryGetImageMeasureDict, 'DPLGetImageMeasureDict');
      AssignProc(@DebenuPDFLibraryGetImagePageCount, 'DPLGetImagePageCount');
      AssignProc(@DebenuPDFLibraryGetImagePageCountFromString, 'DPLGetImagePageCountFromString');
      AssignProc(@DebenuPDFLibraryGetImagePtDataDict, 'DPLGetImagePtDataDict');
      AssignProc(@DebenuPDFLibraryGetInformation, 'DPLGetInformation');
      AssignProc(@DebenuPDFLibraryGetInstalledFontsByCharset, 'DPLGetInstalledFontsByCharset');
      AssignProc(@DebenuPDFLibraryGetInstalledFontsByCodePage, 'DPLGetInstalledFontsByCodePage');
      AssignProc(@DebenuPDFLibraryGetKerning, 'DPLGetKerning');
      AssignProc(@DebenuPDFLibraryGetLatestPrinterNames, 'DPLGetLatestPrinterNames');
      AssignProc(@DebenuPDFLibraryGetMaxObjectNumber, 'DPLGetMaxObjectNumber');
      AssignProc(@DebenuPDFLibraryGetMeasureDictBoundsCount, 'DPLGetMeasureDictBoundsCount');
      AssignProc(@DebenuPDFLibraryGetMeasureDictBoundsItem, 'DPLGetMeasureDictBoundsItem');
      AssignProc(@DebenuPDFLibraryGetMeasureDictCoordinateSystem, 'DPLGetMeasureDictCoordinateSystem');
      AssignProc(@DebenuPDFLibraryGetMeasureDictDCSDict, 'DPLGetMeasureDictDCSDict');
      AssignProc(@DebenuPDFLibraryGetMeasureDictGCSDict, 'DPLGetMeasureDictGCSDict');
      AssignProc(@DebenuPDFLibraryGetMeasureDictGPTSCount, 'DPLGetMeasureDictGPTSCount');
      AssignProc(@DebenuPDFLibraryGetMeasureDictGPTSItem, 'DPLGetMeasureDictGPTSItem');
      AssignProc(@DebenuPDFLibraryGetMeasureDictLPTSCount, 'DPLGetMeasureDictLPTSCount');
      AssignProc(@DebenuPDFLibraryGetMeasureDictLPTSItem, 'DPLGetMeasureDictLPTSItem');
      AssignProc(@DebenuPDFLibraryGetMeasureDictPDU, 'DPLGetMeasureDictPDU');
      AssignProc(@DebenuPDFLibraryGetNamedDestination, 'DPLGetNamedDestination');
      AssignProc(@DebenuPDFLibraryGetNextOutline, 'DPLGetNextOutline');
      AssignProc(@DebenuPDFLibraryGetObjectCount, 'DPLGetObjectCount');
      AssignProc(@DebenuPDFLibraryGetObjectDecodeError, 'DPLGetObjectDecodeError');
      AssignProc(@DebenuPDFLibraryGetObjectToString, 'DPLGetObjectToString');
      AssignProc(@DebenuPDFLibraryGetOpenActionDestination, 'DPLGetOpenActionDestination');
      AssignProc(@DebenuPDFLibraryGetOpenActionJavaScript, 'DPLGetOpenActionJavaScript');
      AssignProc(@DebenuPDFLibraryGetOptionalContentConfigCount, 'DPLGetOptionalContentConfigCount');
      AssignProc(@DebenuPDFLibraryGetOptionalContentConfigLocked, 'DPLGetOptionalContentConfigLocked');
      AssignProc(@DebenuPDFLibraryGetOptionalContentConfigOrderCount, 'DPLGetOptionalContentConfigOrderCount');
      AssignProc(@DebenuPDFLibraryGetOptionalContentConfigOrderItemID, 'DPLGetOptionalContentConfigOrderItemID');
      AssignProc(@DebenuPDFLibraryGetOptionalContentConfigOrderItemLabel, 'DPLGetOptionalContentConfigOrderItemLabel');
      AssignProc(@DebenuPDFLibraryGetOptionalContentConfigOrderItemLevel, 'DPLGetOptionalContentConfigOrderItemLevel');
      AssignProc(@DebenuPDFLibraryGetOptionalContentConfigOrderItemType, 'DPLGetOptionalContentConfigOrderItemType');
      AssignProc(@DebenuPDFLibraryGetOptionalContentConfigState, 'DPLGetOptionalContentConfigState');
      AssignProc(@DebenuPDFLibraryGetOptionalContentGroupID, 'DPLGetOptionalContentGroupID');
      AssignProc(@DebenuPDFLibraryGetOptionalContentGroupName, 'DPLGetOptionalContentGroupName');
      AssignProc(@DebenuPDFLibraryGetOptionalContentGroupPrintable, 'DPLGetOptionalContentGroupPrintable');
      AssignProc(@DebenuPDFLibraryGetOptionalContentGroupVisible, 'DPLGetOptionalContentGroupVisible');
      AssignProc(@DebenuPDFLibraryGetOrigin, 'DPLGetOrigin');
      AssignProc(@DebenuPDFLibraryGetOutlineActionID, 'DPLGetOutlineActionID');
      AssignProc(@DebenuPDFLibraryGetOutlineColor, 'DPLGetOutlineColor');
      AssignProc(@DebenuPDFLibraryGetOutlineDest, 'DPLGetOutlineDest');
      AssignProc(@DebenuPDFLibraryGetOutlineID, 'DPLGetOutlineID');
      AssignProc(@DebenuPDFLibraryGetOutlineJavaScript, 'DPLGetOutlineJavaScript');
      AssignProc(@DebenuPDFLibraryGetOutlineObjectNumber, 'DPLGetOutlineObjectNumber');
      AssignProc(@DebenuPDFLibraryGetOutlineOpenFile, 'DPLGetOutlineOpenFile');
      AssignProc(@DebenuPDFLibraryGetOutlinePage, 'DPLGetOutlinePage');
      AssignProc(@DebenuPDFLibraryGetOutlineStyle, 'DPLGetOutlineStyle');
      AssignProc(@DebenuPDFLibraryGetOutlineWebLink, 'DPLGetOutlineWebLink');
      AssignProc(@DebenuPDFLibraryGetPageBox, 'DPLGetPageBox');
      AssignProc(@DebenuPDFLibraryGetPageColorSpaces, 'DPLGetPageColorSpaces');
      AssignProc(@DebenuPDFLibraryGetPageContentToString, 'DPLGetPageContentToString');
      AssignProc(@DebenuPDFLibraryGetPageImageList, 'DPLGetPageImageList');
      AssignProc(@DebenuPDFLibraryGetPageJavaScript, 'DPLGetPageJavaScript');
      AssignProc(@DebenuPDFLibraryGetPageLGIDictContent, 'DPLGetPageLGIDictContent');
      AssignProc(@DebenuPDFLibraryGetPageLGIDictCount, 'DPLGetPageLGIDictCount');
      AssignProc(@DebenuPDFLibraryGetPageLabel, 'DPLGetPageLabel');
      AssignProc(@DebenuPDFLibraryGetPageLayout, 'DPLGetPageLayout');
      AssignProc(@DebenuPDFLibraryGetPageMetricsToString, 'DPLGetPageMetricsToString');
      AssignProc(@DebenuPDFLibraryGetPageMode, 'DPLGetPageMode');
      AssignProc(@DebenuPDFLibraryGetPageText, 'DPLGetPageText');
      AssignProc(@DebenuPDFLibraryGetPageUserUnit, 'DPLGetPageUserUnit');
      AssignProc(@DebenuPDFLibraryGetPageViewPortCount, 'DPLGetPageViewPortCount');
      AssignProc(@DebenuPDFLibraryGetPageViewPortID, 'DPLGetPageViewPortID');
      AssignProc(@DebenuPDFLibraryGetParentOutline, 'DPLGetParentOutline');
      AssignProc(@DebenuPDFLibraryGetPrevOutline, 'DPLGetPrevOutline');
      AssignProc(@DebenuPDFLibraryGetPrintPreviewBitmapToString, 'DPLGetPrintPreviewBitmapToString');
      AssignProc(@DebenuPDFLibraryGetPrinterBins, 'DPLGetPrinterBins');
      AssignProc(@DebenuPDFLibraryGetPrinterDevModeToString, 'DPLGetPrinterDevModeToString');
      AssignProc(@DebenuPDFLibraryGetPrinterMediaTypes, 'DPLGetPrinterMediaTypes');
      AssignProc(@DebenuPDFLibraryGetPrinterNames, 'DPLGetPrinterNames');
      AssignProc(@DebenuPDFLibraryGetRenderScale, 'DPLGetRenderScale');
      AssignProc(@DebenuPDFLibraryGetSignProcessByteRange, 'DPLGetSignProcessByteRange');
      AssignProc(@DebenuPDFLibraryGetSignProcessResult, 'DPLGetSignProcessResult');
      AssignProc(@DebenuPDFLibraryGetStringListCount, 'DPLGetStringListCount');
      AssignProc(@DebenuPDFLibraryGetStringListItem, 'DPLGetStringListItem');
      AssignProc(@DebenuPDFLibraryGetTabOrderMode, 'DPLGetTabOrderMode');
      AssignProc(@DebenuPDFLibraryGetTableCellDblProperty, 'DPLGetTableCellDblProperty');
      AssignProc(@DebenuPDFLibraryGetTableCellIntProperty, 'DPLGetTableCellIntProperty');
      AssignProc(@DebenuPDFLibraryGetTableCellStrProperty, 'DPLGetTableCellStrProperty');
      AssignProc(@DebenuPDFLibraryGetTableColumnCount, 'DPLGetTableColumnCount');
      AssignProc(@DebenuPDFLibraryGetTableLastDrawnRow, 'DPLGetTableLastDrawnRow');
      AssignProc(@DebenuPDFLibraryGetTableRowCount, 'DPLGetTableRowCount');
      AssignProc(@DebenuPDFLibraryGetTempPath, 'DPLGetTempPath');
      AssignProc(@DebenuPDFLibraryGetTextAscent, 'DPLGetTextAscent');
      AssignProc(@DebenuPDFLibraryGetTextBlockAsString, 'DPLGetTextBlockAsString');
      AssignProc(@DebenuPDFLibraryGetTextBlockBound, 'DPLGetTextBlockBound');
      AssignProc(@DebenuPDFLibraryGetTextBlockCharWidth, 'DPLGetTextBlockCharWidth');
      AssignProc(@DebenuPDFLibraryGetTextBlockColor, 'DPLGetTextBlockColor');
      AssignProc(@DebenuPDFLibraryGetTextBlockColorType, 'DPLGetTextBlockColorType');
      AssignProc(@DebenuPDFLibraryGetTextBlockCount, 'DPLGetTextBlockCount');
      AssignProc(@DebenuPDFLibraryGetTextBlockFontName, 'DPLGetTextBlockFontName');
      AssignProc(@DebenuPDFLibraryGetTextBlockFontSize, 'DPLGetTextBlockFontSize');
      AssignProc(@DebenuPDFLibraryGetTextBlockText, 'DPLGetTextBlockText');
      AssignProc(@DebenuPDFLibraryGetTextBound, 'DPLGetTextBound');
      AssignProc(@DebenuPDFLibraryGetTextDescent, 'DPLGetTextDescent');
      AssignProc(@DebenuPDFLibraryGetTextHeight, 'DPLGetTextHeight');
      AssignProc(@DebenuPDFLibraryGetTextSize, 'DPLGetTextSize');
      AssignProc(@DebenuPDFLibraryGetTextWidth, 'DPLGetTextWidth');
      AssignProc(@DebenuPDFLibraryGetUnicodeCharactersFromEncoding, 'DPLGetUnicodeCharactersFromEncoding');
      AssignProc(@DebenuPDFLibraryGetViewPortBBox, 'DPLGetViewPortBBox');
      AssignProc(@DebenuPDFLibraryGetViewPortMeasureDict, 'DPLGetViewPortMeasureDict');
      AssignProc(@DebenuPDFLibraryGetViewPortName, 'DPLGetViewPortName');
      AssignProc(@DebenuPDFLibraryGetViewPortPtDataDict, 'DPLGetViewPortPtDataDict');
      AssignProc(@DebenuPDFLibraryGetViewerPreferences, 'DPLGetViewerPreferences');
      AssignProc(@DebenuPDFLibraryGetWrappedText, 'DPLGetWrappedText');
      AssignProc(@DebenuPDFLibraryGetWrappedTextBreakString, 'DPLGetWrappedTextBreakString');
      AssignProc(@DebenuPDFLibraryGetWrappedTextHeight, 'DPLGetWrappedTextHeight');
      AssignProc(@DebenuPDFLibraryGetWrappedTextLineCount, 'DPLGetWrappedTextLineCount');
      AssignProc(@DebenuPDFLibraryGetXFAFormFieldCount, 'DPLGetXFAFormFieldCount');
      AssignProc(@DebenuPDFLibraryGetXFAFormFieldName, 'DPLGetXFAFormFieldName');
      AssignProc(@DebenuPDFLibraryGetXFAFormFieldNames, 'DPLGetXFAFormFieldNames');
      AssignProc(@DebenuPDFLibraryGetXFAFormFieldValue, 'DPLGetXFAFormFieldValue');
      AssignProc(@DebenuPDFLibraryGetXFAToString, 'DPLGetXFAToString');
      AssignProc(@DebenuPDFLibraryGlobalJavaScriptCount, 'DPLGlobalJavaScriptCount');
      AssignProc(@DebenuPDFLibraryGlobalJavaScriptPackageName, 'DPLGlobalJavaScriptPackageName');
      AssignProc(@DebenuPDFLibraryHasFontResources, 'DPLHasFontResources');
      AssignProc(@DebenuPDFLibraryHasPageBox, 'DPLHasPageBox');
      AssignProc(@DebenuPDFLibraryHidePage, 'DPLHidePage');
      AssignProc(@DebenuPDFLibraryImageCount, 'DPLImageCount');
      AssignProc(@DebenuPDFLibraryImageFillColor, 'DPLImageFillColor');
      AssignProc(@DebenuPDFLibraryImageHeight, 'DPLImageHeight');
      AssignProc(@DebenuPDFLibraryImageHorizontalResolution, 'DPLImageHorizontalResolution');
      AssignProc(@DebenuPDFLibraryImageResolutionUnits, 'DPLImageResolutionUnits');
      AssignProc(@DebenuPDFLibraryImageType, 'DPLImageType');
      AssignProc(@DebenuPDFLibraryImageVerticalResolution, 'DPLImageVerticalResolution');
      AssignProc(@DebenuPDFLibraryImageWidth, 'DPLImageWidth');
      AssignProc(@DebenuPDFLibraryImportEMFFromFile, 'DPLImportEMFFromFile');
      AssignProc(@DebenuPDFLibraryInsertPages, 'DPLInsertPages');
      AssignProc(@DebenuPDFLibraryInsertTableColumns, 'DPLInsertTableColumns');
      AssignProc(@DebenuPDFLibraryInsertTableRows, 'DPLInsertTableRows');
      AssignProc(@DebenuPDFLibraryIsAnnotFormField, 'DPLIsAnnotFormField');
      AssignProc(@DebenuPDFLibraryIsLinearized, 'DPLIsLinearized');
      AssignProc(@DebenuPDFLibraryIsTaggedPDF, 'DPLIsTaggedPDF');
      AssignProc(@DebenuPDFLibraryLastErrorCode, 'DPLLastErrorCode');
      AssignProc(@DebenuPDFLibraryLastRenderError, 'DPLLastRenderError');
      AssignProc(@DebenuPDFLibraryLibraryVersion, 'DPLLibraryVersion');
      AssignProc(@DebenuPDFLibraryLibraryVersionEx, 'DPLLibraryVersionEx');
      AssignProc(@DebenuPDFLibraryLicenseInfo, 'DPLLicenseInfo');
      AssignProc(@DebenuPDFLibraryLinearizeFile, 'DPLLinearizeFile');
      AssignProc(@DebenuPDFLibraryLoadFromCanvasDC, 'DPLLoadFromCanvasDC');
      AssignProc(@DebenuPDFLibraryLoadFromFile, 'DPLLoadFromFile');
      AssignProc(@DebenuPDFLibraryLoadFromString, 'DPLLoadFromString');
      AssignProc(@DebenuPDFLibraryLoadState, 'DPLLoadState');
      AssignProc(@DebenuPDFLibraryMergeDocument, 'DPLMergeDocument');
      AssignProc(@DebenuPDFLibraryMergeFileList, 'DPLMergeFileList');
      AssignProc(@DebenuPDFLibraryMergeFileListFast, 'DPLMergeFileListFast');
      AssignProc(@DebenuPDFLibraryMergeFiles, 'DPLMergeFiles');
      AssignProc(@DebenuPDFLibraryMergeTableCells, 'DPLMergeTableCells');
      AssignProc(@DebenuPDFLibraryMoveContentStream, 'DPLMoveContentStream');
      AssignProc(@DebenuPDFLibraryMoveOutlineAfter, 'DPLMoveOutlineAfter');
      AssignProc(@DebenuPDFLibraryMoveOutlineBefore, 'DPLMoveOutlineBefore');
      AssignProc(@DebenuPDFLibraryMovePage, 'DPLMovePage');
      AssignProc(@DebenuPDFLibraryMovePath, 'DPLMovePath');
      AssignProc(@DebenuPDFLibraryMultiplyScale, 'DPLMultiplyScale');
      AssignProc(@DebenuPDFLibraryNewChildFormField, 'DPLNewChildFormField');
      AssignProc(@DebenuPDFLibraryNewContentStream, 'DPLNewContentStream');
      AssignProc(@DebenuPDFLibraryNewCustomPrinter, 'DPLNewCustomPrinter');
      AssignProc(@DebenuPDFLibraryNewDestination, 'DPLNewDestination');
      AssignProc(@DebenuPDFLibraryNewDocument, 'DPLNewDocument');
      AssignProc(@DebenuPDFLibraryNewFormField, 'DPLNewFormField');
      AssignProc(@DebenuPDFLibraryNewInternalPrinterObject, 'DPLNewInternalPrinterObject');
      AssignProc(@DebenuPDFLibraryNewNamedDestination, 'DPLNewNamedDestination');
      AssignProc(@DebenuPDFLibraryNewOptionalContentGroup, 'DPLNewOptionalContentGroup');
      AssignProc(@DebenuPDFLibraryNewOutline, 'DPLNewOutline');
      AssignProc(@DebenuPDFLibraryNewPage, 'DPLNewPage');
      AssignProc(@DebenuPDFLibraryNewPageFromCanvasDC, 'DPLNewPageFromCanvasDC');
      AssignProc(@DebenuPDFLibraryNewPages, 'DPLNewPages');
      AssignProc(@DebenuPDFLibraryNewPostScriptXObject, 'DPLNewPostScriptXObject');
      AssignProc(@DebenuPDFLibraryNewRGBAxialShader, 'DPLNewRGBAxialShader');
      AssignProc(@DebenuPDFLibraryNewSignProcessFromFile, 'DPLNewSignProcessFromFile');
      AssignProc(@DebenuPDFLibraryNewSignProcessFromString, 'DPLNewSignProcessFromString');
      AssignProc(@DebenuPDFLibraryNewStaticOutline, 'DPLNewStaticOutline');
      AssignProc(@DebenuPDFLibraryNewTilingPatternFromCapturedPage, 'DPLNewTilingPatternFromCapturedPage');
      AssignProc(@DebenuPDFLibraryNoEmbedFontListAdd, 'DPLNoEmbedFontListAdd');
      AssignProc(@DebenuPDFLibraryNoEmbedFontListCount, 'DPLNoEmbedFontListCount');
      AssignProc(@DebenuPDFLibraryNoEmbedFontListGet, 'DPLNoEmbedFontListGet');
      AssignProc(@DebenuPDFLibraryNoEmbedFontListRemoveAll, 'DPLNoEmbedFontListRemoveAll');
      AssignProc(@DebenuPDFLibraryNoEmbedFontListRemoveIndex, 'DPLNoEmbedFontListRemoveIndex');
      AssignProc(@DebenuPDFLibraryNoEmbedFontListRemoveName, 'DPLNoEmbedFontListRemoveName');
      AssignProc(@DebenuPDFLibraryNormalizePage, 'DPLNormalizePage');
      AssignProc(@DebenuPDFLibraryOpenOutline, 'DPLOpenOutline');
      AssignProc(@DebenuPDFLibraryOptionalContentGroupCount, 'DPLOptionalContentGroupCount');
      AssignProc(@DebenuPDFLibraryOutlineCount, 'DPLOutlineCount');
      AssignProc(@DebenuPDFLibraryOutlineTitle, 'DPLOutlineTitle');
      AssignProc(@DebenuPDFLibraryPageCount, 'DPLPageCount');
      AssignProc(@DebenuPDFLibraryPageHasFontResources, 'DPLPageHasFontResources');
      AssignProc(@DebenuPDFLibraryPageHeight, 'DPLPageHeight');
      AssignProc(@DebenuPDFLibraryPageJavaScriptAction, 'DPLPageJavaScriptAction');
      AssignProc(@DebenuPDFLibraryPageRotation, 'DPLPageRotation');
      AssignProc(@DebenuPDFLibraryPageWidth, 'DPLPageWidth');
      AssignProc(@DebenuPDFLibraryPrintDocument, 'DPLPrintDocument');
      AssignProc(@DebenuPDFLibraryPrintDocumentToFile, 'DPLPrintDocumentToFile');
      AssignProc(@DebenuPDFLibraryPrintMode, 'DPLPrintMode');
      AssignProc(@DebenuPDFLibraryPrintOptions, 'DPLPrintOptions');
      AssignProc(@DebenuPDFLibraryPrintPages, 'DPLPrintPages');
      AssignProc(@DebenuPDFLibraryPrintPagesToFile, 'DPLPrintPagesToFile');
      AssignProc(@DebenuPDFLibraryReleaseBuffer, 'DPLReleaseBuffer');
      AssignProc(@DebenuPDFLibraryReleaseImage, 'DPLReleaseImage');
      AssignProc(@DebenuPDFLibraryReleaseImageList, 'DPLReleaseImageList');
      AssignProc(@DebenuPDFLibraryReleaseLibrary, 'DPLReleaseLibrary');
      AssignProc(@DebenuPDFLibraryReleaseSignProcess, 'DPLReleaseSignProcess');
      AssignProc(@DebenuPDFLibraryReleaseStringList, 'DPLReleaseStringList');
      AssignProc(@DebenuPDFLibraryReleaseTextBlocks, 'DPLReleaseTextBlocks');
      AssignProc(@DebenuPDFLibraryRemoveAppearanceStream, 'DPLRemoveAppearanceStream');
      AssignProc(@DebenuPDFLibraryRemoveCustomInformation, 'DPLRemoveCustomInformation');
      AssignProc(@DebenuPDFLibraryRemoveDocument, 'DPLRemoveDocument');
      AssignProc(@DebenuPDFLibraryRemoveEmbeddedFile, 'DPLRemoveEmbeddedFile');
      AssignProc(@DebenuPDFLibraryRemoveFormFieldBackgroundColor, 'DPLRemoveFormFieldBackgroundColor');
      AssignProc(@DebenuPDFLibraryRemoveFormFieldBorderColor, 'DPLRemoveFormFieldBorderColor');
      AssignProc(@DebenuPDFLibraryRemoveFormFieldChoiceSub, 'DPLRemoveFormFieldChoiceSub');
      AssignProc(@DebenuPDFLibraryRemoveGlobalJavaScript, 'DPLRemoveGlobalJavaScript');
      AssignProc(@DebenuPDFLibraryRemoveOpenAction, 'DPLRemoveOpenAction');
      AssignProc(@DebenuPDFLibraryRemoveOutline, 'DPLRemoveOutline');
      AssignProc(@DebenuPDFLibraryRemovePageBox, 'DPLRemovePageBox');
      AssignProc(@DebenuPDFLibraryRemoveSharedContentStreams, 'DPLRemoveSharedContentStreams');
      AssignProc(@DebenuPDFLibraryRemoveStyle, 'DPLRemoveStyle');
      AssignProc(@DebenuPDFLibraryRemoveUsageRights, 'DPLRemoveUsageRights');
      AssignProc(@DebenuPDFLibraryRemoveXFAEntries, 'DPLRemoveXFAEntries');
      AssignProc(@DebenuPDFLibraryRenderAsMultipageTIFFToFile, 'DPLRenderAsMultipageTIFFToFile');
      AssignProc(@DebenuPDFLibraryRenderDocumentToFile, 'DPLRenderDocumentToFile');
      AssignProc(@DebenuPDFLibraryRenderPageToDC, 'DPLRenderPageToDC');
      AssignProc(@DebenuPDFLibraryRenderPageToDCClip, 'DPLRenderPageToDCClip');
      AssignProc(@DebenuPDFLibraryRenderPageToFile, 'DPLRenderPageToFile');
      AssignProc(@DebenuPDFLibraryRenderPageToString, 'DPLRenderPageToString');
      AssignProc(@DebenuPDFLibraryReplaceFonts, 'DPLReplaceFonts');
      AssignProc(@DebenuPDFLibraryReplaceImage, 'DPLReplaceImage');
      AssignProc(@DebenuPDFLibraryReplaceTag, 'DPLReplaceTag');
      AssignProc(@DebenuPDFLibraryRequestPrinterStatus, 'DPLRequestPrinterStatus');
      AssignProc(@DebenuPDFLibraryRetrieveCustomDataToFile, 'DPLRetrieveCustomDataToFile');
      AssignProc(@DebenuPDFLibraryRetrieveCustomDataToString, 'DPLRetrieveCustomDataToString');
      AssignProc(@DebenuPDFLibraryReverseImage, 'DPLReverseImage');
      AssignProc(@DebenuPDFLibraryRotatePage, 'DPLRotatePage');
      AssignProc(@DebenuPDFLibrarySaveFontToFile, 'DPLSaveFontToFile');
      AssignProc(@DebenuPDFLibrarySaveImageListItemDataToFile, 'DPLSaveImageListItemDataToFile');
      AssignProc(@DebenuPDFLibrarySaveImageToFile, 'DPLSaveImageToFile');
      AssignProc(@DebenuPDFLibrarySaveImageToString, 'DPLSaveImageToString');
      AssignProc(@DebenuPDFLibrarySaveState, 'DPLSaveState');
      AssignProc(@DebenuPDFLibrarySaveStyle, 'DPLSaveStyle');
      AssignProc(@DebenuPDFLibrarySaveToFile, 'DPLSaveToFile');
      AssignProc(@DebenuPDFLibrarySaveToString, 'DPLSaveToString');
      AssignProc(@DebenuPDFLibrarySecurityInfo, 'DPLSecurityInfo');
      AssignProc(@DebenuPDFLibrarySelectContentStream, 'DPLSelectContentStream');
      AssignProc(@DebenuPDFLibrarySelectDocument, 'DPLSelectDocument');
      AssignProc(@DebenuPDFLibrarySelectFont, 'DPLSelectFont');
      AssignProc(@DebenuPDFLibrarySelectImage, 'DPLSelectImage');
      AssignProc(@DebenuPDFLibrarySelectPage, 'DPLSelectPage');
      AssignProc(@DebenuPDFLibrarySelectRenderer, 'DPLSelectRenderer');
      AssignProc(@DebenuPDFLibrarySelectedDocument, 'DPLSelectedDocument');
      AssignProc(@DebenuPDFLibrarySelectedFont, 'DPLSelectedFont');
      AssignProc(@DebenuPDFLibrarySelectedImage, 'DPLSelectedImage');
      AssignProc(@DebenuPDFLibrarySelectedPage, 'DPLSelectedPage');
      AssignProc(@DebenuPDFLibrarySetActionURL, 'DPLSetActionURL');
      AssignProc(@DebenuPDFLibrarySetAnnotBorderColor, 'DPLSetAnnotBorderColor');
      AssignProc(@DebenuPDFLibrarySetAnnotBorderStyle, 'DPLSetAnnotBorderStyle');
      AssignProc(@DebenuPDFLibrarySetAnnotContents, 'DPLSetAnnotContents');
      AssignProc(@DebenuPDFLibrarySetAnnotDblProperty, 'DPLSetAnnotDblProperty');
      AssignProc(@DebenuPDFLibrarySetAnnotIntProperty, 'DPLSetAnnotIntProperty');
      AssignProc(@DebenuPDFLibrarySetAnnotOptional, 'DPLSetAnnotOptional');
      AssignProc(@DebenuPDFLibrarySetAnnotQuadPoints, 'DPLSetAnnotQuadPoints');
      AssignProc(@DebenuPDFLibrarySetAnnotRect, 'DPLSetAnnotRect');
      AssignProc(@DebenuPDFLibrarySetAnnotStrProperty, 'DPLSetAnnotStrProperty');
      AssignProc(@DebenuPDFLibrarySetAnsiMode, 'DPLSetAnsiMode');
      AssignProc(@DebenuPDFLibrarySetAppendInputFromString, 'DPLSetAppendInputFromString');
      AssignProc(@DebenuPDFLibrarySetBaseURL, 'DPLSetBaseURL');
      AssignProc(@DebenuPDFLibrarySetBlendMode, 'DPLSetBlendMode');
      AssignProc(@DebenuPDFLibrarySetBreakString, 'DPLSetBreakString');
      AssignProc(@DebenuPDFLibrarySetCSDictEPSG, 'DPLSetCSDictEPSG');
      AssignProc(@DebenuPDFLibrarySetCSDictType, 'DPLSetCSDictType');
      AssignProc(@DebenuPDFLibrarySetCSDictWKT, 'DPLSetCSDictWKT');
      AssignProc(@DebenuPDFLibrarySetCairoFileName, 'DPLSetCairoFileName');
      AssignProc(@DebenuPDFLibrarySetCapturedPageOptional, 'DPLSetCapturedPageOptional');
      AssignProc(@DebenuPDFLibrarySetCapturedPageTransparencyGroup, 'DPLSetCapturedPageTransparencyGroup');
      AssignProc(@DebenuPDFLibrarySetCatalogInformation, 'DPLSetCatalogInformation');
      AssignProc(@DebenuPDFLibrarySetCharWidth, 'DPLSetCharWidth');
      AssignProc(@DebenuPDFLibrarySetClippingPath, 'DPLSetClippingPath');
      AssignProc(@DebenuPDFLibrarySetClippingPathEvenOdd, 'DPLSetClippingPathEvenOdd');
      AssignProc(@DebenuPDFLibrarySetCompatibility, 'DPLSetCompatibility');
      AssignProc(@DebenuPDFLibrarySetContentStreamFromString, 'DPLSetContentStreamFromString');
      AssignProc(@DebenuPDFLibrarySetContentStreamOptional, 'DPLSetContentStreamOptional');
      AssignProc(@DebenuPDFLibrarySetCropBox, 'DPLSetCropBox');
      AssignProc(@DebenuPDFLibrarySetCustomInformation, 'DPLSetCustomInformation');
      AssignProc(@DebenuPDFLibrarySetCustomLineDash, 'DPLSetCustomLineDash');
      AssignProc(@DebenuPDFLibrarySetDPLRFileName, 'DPLSetDPLRFileName');
      AssignProc(@DebenuPDFLibrarySetDecodeMode, 'DPLSetDecodeMode');
      AssignProc(@DebenuPDFLibrarySetDestProperties, 'DPLSetDestProperties');
      AssignProc(@DebenuPDFLibrarySetDestValue, 'DPLSetDestValue');
      AssignProc(@DebenuPDFLibrarySetDocumentMetadata, 'DPLSetDocumentMetadata');
      AssignProc(@DebenuPDFLibrarySetEmbeddedFileStrProperty, 'DPLSetEmbeddedFileStrProperty');
      AssignProc(@DebenuPDFLibrarySetFillColor, 'DPLSetFillColor');
      AssignProc(@DebenuPDFLibrarySetFillColorCMYK, 'DPLSetFillColorCMYK');
      AssignProc(@DebenuPDFLibrarySetFillColorSep, 'DPLSetFillColorSep');
      AssignProc(@DebenuPDFLibrarySetFillShader, 'DPLSetFillShader');
      AssignProc(@DebenuPDFLibrarySetFillTilingPattern, 'DPLSetFillTilingPattern');
      AssignProc(@DebenuPDFLibrarySetFindImagesMode, 'DPLSetFindImagesMode');
      AssignProc(@DebenuPDFLibrarySetFontEncoding, 'DPLSetFontEncoding');
      AssignProc(@DebenuPDFLibrarySetFontFlags, 'DPLSetFontFlags');
      AssignProc(@DebenuPDFLibrarySetFormFieldAlignment, 'DPLSetFormFieldAlignment');
      AssignProc(@DebenuPDFLibrarySetFormFieldAnnotFlags, 'DPLSetFormFieldAnnotFlags');
      AssignProc(@DebenuPDFLibrarySetFormFieldBackgroundColor, 'DPLSetFormFieldBackgroundColor');
      AssignProc(@DebenuPDFLibrarySetFormFieldBackgroundColorCMYK, 'DPLSetFormFieldBackgroundColorCMYK');
      AssignProc(@DebenuPDFLibrarySetFormFieldBackgroundColorGray, 'DPLSetFormFieldBackgroundColorGray');
      AssignProc(@DebenuPDFLibrarySetFormFieldBackgroundColorSep, 'DPLSetFormFieldBackgroundColorSep');
      AssignProc(@DebenuPDFLibrarySetFormFieldBorderColor, 'DPLSetFormFieldBorderColor');
      AssignProc(@DebenuPDFLibrarySetFormFieldBorderColorCMYK, 'DPLSetFormFieldBorderColorCMYK');
      AssignProc(@DebenuPDFLibrarySetFormFieldBorderColorGray, 'DPLSetFormFieldBorderColorGray');
      AssignProc(@DebenuPDFLibrarySetFormFieldBorderColorSep, 'DPLSetFormFieldBorderColorSep');
      AssignProc(@DebenuPDFLibrarySetFormFieldBorderStyle, 'DPLSetFormFieldBorderStyle');
      AssignProc(@DebenuPDFLibrarySetFormFieldBounds, 'DPLSetFormFieldBounds');
      AssignProc(@DebenuPDFLibrarySetFormFieldCalcOrder, 'DPLSetFormFieldCalcOrder');
      AssignProc(@DebenuPDFLibrarySetFormFieldCaption, 'DPLSetFormFieldCaption');
      AssignProc(@DebenuPDFLibrarySetFormFieldCheckStyle, 'DPLSetFormFieldCheckStyle');
      AssignProc(@DebenuPDFLibrarySetFormFieldChildTitle, 'DPLSetFormFieldChildTitle');
      AssignProc(@DebenuPDFLibrarySetFormFieldChoiceSub, 'DPLSetFormFieldChoiceSub');
      AssignProc(@DebenuPDFLibrarySetFormFieldChoiceType, 'DPLSetFormFieldChoiceType');
      AssignProc(@DebenuPDFLibrarySetFormFieldColor, 'DPLSetFormFieldColor');
      AssignProc(@DebenuPDFLibrarySetFormFieldColorCMYK, 'DPLSetFormFieldColorCMYK');
      AssignProc(@DebenuPDFLibrarySetFormFieldColorSep, 'DPLSetFormFieldColorSep');
      AssignProc(@DebenuPDFLibrarySetFormFieldComb, 'DPLSetFormFieldComb');
      AssignProc(@DebenuPDFLibrarySetFormFieldDefaultValue, 'DPLSetFormFieldDefaultValue');
      AssignProc(@DebenuPDFLibrarySetFormFieldDescription, 'DPLSetFormFieldDescription');
      AssignProc(@DebenuPDFLibrarySetFormFieldFlags, 'DPLSetFormFieldFlags');
      AssignProc(@DebenuPDFLibrarySetFormFieldFont, 'DPLSetFormFieldFont');
      AssignProc(@DebenuPDFLibrarySetFormFieldHighlightMode, 'DPLSetFormFieldHighlightMode');
      AssignProc(@DebenuPDFLibrarySetFormFieldIcon, 'DPLSetFormFieldIcon');
      AssignProc(@DebenuPDFLibrarySetFormFieldIconStyle, 'DPLSetFormFieldIconStyle');
      AssignProc(@DebenuPDFLibrarySetFormFieldMaxLen, 'DPLSetFormFieldMaxLen');
      AssignProc(@DebenuPDFLibrarySetFormFieldNoExport, 'DPLSetFormFieldNoExport');
      AssignProc(@DebenuPDFLibrarySetFormFieldOptional, 'DPLSetFormFieldOptional');
      AssignProc(@DebenuPDFLibrarySetFormFieldPage, 'DPLSetFormFieldPage');
      AssignProc(@DebenuPDFLibrarySetFormFieldPrintable, 'DPLSetFormFieldPrintable');
      AssignProc(@DebenuPDFLibrarySetFormFieldReadOnly, 'DPLSetFormFieldReadOnly');
      AssignProc(@DebenuPDFLibrarySetFormFieldRequired, 'DPLSetFormFieldRequired');
      AssignProc(@DebenuPDFLibrarySetFormFieldResetAction, 'DPLSetFormFieldResetAction');
      AssignProc(@DebenuPDFLibrarySetFormFieldRichTextString, 'DPLSetFormFieldRichTextString');
      AssignProc(@DebenuPDFLibrarySetFormFieldRotation, 'DPLSetFormFieldRotation');
      AssignProc(@DebenuPDFLibrarySetFormFieldSignatureImage, 'DPLSetFormFieldSignatureImage');
      AssignProc(@DebenuPDFLibrarySetFormFieldStandardFont, 'DPLSetFormFieldStandardFont');
      AssignProc(@DebenuPDFLibrarySetFormFieldSubmitAction, 'DPLSetFormFieldSubmitAction');
      AssignProc(@DebenuPDFLibrarySetFormFieldSubmitActionEx, 'DPLSetFormFieldSubmitActionEx');
      AssignProc(@DebenuPDFLibrarySetFormFieldTabOrder, 'DPLSetFormFieldTabOrder');
      AssignProc(@DebenuPDFLibrarySetFormFieldTextFlags, 'DPLSetFormFieldTextFlags');
      AssignProc(@DebenuPDFLibrarySetFormFieldTextSize, 'DPLSetFormFieldTextSize');
      AssignProc(@DebenuPDFLibrarySetFormFieldTitle, 'DPLSetFormFieldTitle');
      AssignProc(@DebenuPDFLibrarySetFormFieldValue, 'DPLSetFormFieldValue');
      AssignProc(@DebenuPDFLibrarySetFormFieldValueByTitle, 'DPLSetFormFieldValueByTitle');
      AssignProc(@DebenuPDFLibrarySetFormFieldVisible, 'DPLSetFormFieldVisible');
      AssignProc(@DebenuPDFLibrarySetGDIPlusFileName, 'DPLSetGDIPlusFileName');
      AssignProc(@DebenuPDFLibrarySetGDIPlusOptions, 'DPLSetGDIPlusOptions');
      AssignProc(@DebenuPDFLibrarySetHTMLBoldFont, 'DPLSetHTMLBoldFont');
      AssignProc(@DebenuPDFLibrarySetHTMLBoldItalicFont, 'DPLSetHTMLBoldItalicFont');
      AssignProc(@DebenuPDFLibrarySetHTMLItalicFont, 'DPLSetHTMLItalicFont');
      AssignProc(@DebenuPDFLibrarySetHTMLNormalFont, 'DPLSetHTMLNormalFont');
      AssignProc(@DebenuPDFLibrarySetHeaderCommentsFromString, 'DPLSetHeaderCommentsFromString');
      AssignProc(@DebenuPDFLibrarySetImageAsMask, 'DPLSetImageAsMask');
      AssignProc(@DebenuPDFLibrarySetImageMask, 'DPLSetImageMask');
      AssignProc(@DebenuPDFLibrarySetImageMaskCMYK, 'DPLSetImageMaskCMYK');
      AssignProc(@DebenuPDFLibrarySetImageMaskFromImage, 'DPLSetImageMaskFromImage');
      AssignProc(@DebenuPDFLibrarySetImageOptional, 'DPLSetImageOptional');
      AssignProc(@DebenuPDFLibrarySetImageResolution, 'DPLSetImageResolution');
      AssignProc(@DebenuPDFLibrarySetInformation, 'DPLSetInformation');
      AssignProc(@DebenuPDFLibrarySetJPEGQuality, 'DPLSetJPEGQuality');
      AssignProc(@DebenuPDFLibrarySetJavaScriptMode, 'DPLSetJavaScriptMode');
      AssignProc(@DebenuPDFLibrarySetKerning, 'DPLSetKerning');
      AssignProc(@DebenuPDFLibrarySetLineCap, 'DPLSetLineCap');
      AssignProc(@DebenuPDFLibrarySetLineColor, 'DPLSetLineColor');
      AssignProc(@DebenuPDFLibrarySetLineColorCMYK, 'DPLSetLineColorCMYK');
      AssignProc(@DebenuPDFLibrarySetLineColorSep, 'DPLSetLineColorSep');
      AssignProc(@DebenuPDFLibrarySetLineDash, 'DPLSetLineDash');
      AssignProc(@DebenuPDFLibrarySetLineDashEx, 'DPLSetLineDashEx');
      AssignProc(@DebenuPDFLibrarySetLineJoin, 'DPLSetLineJoin');
      AssignProc(@DebenuPDFLibrarySetLineShader, 'DPLSetLineShader');
      AssignProc(@DebenuPDFLibrarySetLineWidth, 'DPLSetLineWidth');
      AssignProc(@DebenuPDFLibrarySetMarkupAnnotStyle, 'DPLSetMarkupAnnotStyle');
      AssignProc(@DebenuPDFLibrarySetMeasureDictBoundsCount, 'DPLSetMeasureDictBoundsCount');
      AssignProc(@DebenuPDFLibrarySetMeasureDictBoundsItem, 'DPLSetMeasureDictBoundsItem');
      AssignProc(@DebenuPDFLibrarySetMeasureDictCoordinateSystem, 'DPLSetMeasureDictCoordinateSystem');
      AssignProc(@DebenuPDFLibrarySetMeasureDictGPTSCount, 'DPLSetMeasureDictGPTSCount');
      AssignProc(@DebenuPDFLibrarySetMeasureDictGPTSItem, 'DPLSetMeasureDictGPTSItem');
      AssignProc(@DebenuPDFLibrarySetMeasureDictLPTSCount, 'DPLSetMeasureDictLPTSCount');
      AssignProc(@DebenuPDFLibrarySetMeasureDictLPTSItem, 'DPLSetMeasureDictLPTSItem');
      AssignProc(@DebenuPDFLibrarySetMeasureDictPDU, 'DPLSetMeasureDictPDU');
      AssignProc(@DebenuPDFLibrarySetMeasurementUnits, 'DPLSetMeasurementUnits');
      AssignProc(@DebenuPDFLibrarySetNeedAppearances, 'DPLSetNeedAppearances');
      AssignProc(@DebenuPDFLibrarySetObjectFromString, 'DPLSetObjectFromString');
      AssignProc(@DebenuPDFLibrarySetOpenActionDestination, 'DPLSetOpenActionDestination');
      AssignProc(@DebenuPDFLibrarySetOpenActionDestinationFull, 'DPLSetOpenActionDestinationFull');
      AssignProc(@DebenuPDFLibrarySetOpenActionJavaScript, 'DPLSetOpenActionJavaScript');
      AssignProc(@DebenuPDFLibrarySetOpenActionMenu, 'DPLSetOpenActionMenu');
      AssignProc(@DebenuPDFLibrarySetOptionalContentConfigLocked, 'DPLSetOptionalContentConfigLocked');
      AssignProc(@DebenuPDFLibrarySetOptionalContentConfigState, 'DPLSetOptionalContentConfigState');
      AssignProc(@DebenuPDFLibrarySetOptionalContentGroupName, 'DPLSetOptionalContentGroupName');
      AssignProc(@DebenuPDFLibrarySetOptionalContentGroupPrintable, 'DPLSetOptionalContentGroupPrintable');
      AssignProc(@DebenuPDFLibrarySetOptionalContentGroupVisible, 'DPLSetOptionalContentGroupVisible');
      AssignProc(@DebenuPDFLibrarySetOrigin, 'DPLSetOrigin');
      AssignProc(@DebenuPDFLibrarySetOutlineColor, 'DPLSetOutlineColor');
      AssignProc(@DebenuPDFLibrarySetOutlineDestination, 'DPLSetOutlineDestination');
      AssignProc(@DebenuPDFLibrarySetOutlineDestinationFull, 'DPLSetOutlineDestinationFull');
      AssignProc(@DebenuPDFLibrarySetOutlineDestinationZoom, 'DPLSetOutlineDestinationZoom');
      AssignProc(@DebenuPDFLibrarySetOutlineJavaScript, 'DPLSetOutlineJavaScript');
      AssignProc(@DebenuPDFLibrarySetOutlineNamedDestination, 'DPLSetOutlineNamedDestination');
      AssignProc(@DebenuPDFLibrarySetOutlineOpenFile, 'DPLSetOutlineOpenFile');
      AssignProc(@DebenuPDFLibrarySetOutlineRemoteDestination, 'DPLSetOutlineRemoteDestination');
      AssignProc(@DebenuPDFLibrarySetOutlineStyle, 'DPLSetOutlineStyle');
      AssignProc(@DebenuPDFLibrarySetOutlineTitle, 'DPLSetOutlineTitle');
      AssignProc(@DebenuPDFLibrarySetOutlineWebLink, 'DPLSetOutlineWebLink');
      AssignProc(@DebenuPDFLibrarySetOverprint, 'DPLSetOverprint');
      AssignProc(@DebenuPDFLibrarySetPDFAMode, 'DPLSetPDFAMode');
      AssignProc(@DebenuPDFLibrarySetPNGTransparencyColor, 'DPLSetPNGTransparencyColor');
      AssignProc(@DebenuPDFLibrarySetPageActionMenu, 'DPLSetPageActionMenu');
      AssignProc(@DebenuPDFLibrarySetPageBox, 'DPLSetPageBox');
      AssignProc(@DebenuPDFLibrarySetPageContentFromString, 'DPLSetPageContentFromString');
      AssignProc(@DebenuPDFLibrarySetPageDimensions, 'DPLSetPageDimensions');
      AssignProc(@DebenuPDFLibrarySetPageLayout, 'DPLSetPageLayout');
      AssignProc(@DebenuPDFLibrarySetPageMode, 'DPLSetPageMode');
      AssignProc(@DebenuPDFLibrarySetPageSize, 'DPLSetPageSize');
      AssignProc(@DebenuPDFLibrarySetPageThumbnail, 'DPLSetPageThumbnail');
      AssignProc(@DebenuPDFLibrarySetPageTransparencyGroup, 'DPLSetPageTransparencyGroup');
      AssignProc(@DebenuPDFLibrarySetPageUserUnit, 'DPLSetPageUserUnit');
      AssignProc(@DebenuPDFLibrarySetPrecision, 'DPLSetPrecision');
      AssignProc(@DebenuPDFLibrarySetPrinterDevModeFromString, 'DPLSetPrinterDevModeFromString');
      AssignProc(@DebenuPDFLibrarySetRenderCropType, 'DPLSetRenderCropType');
      AssignProc(@DebenuPDFLibrarySetRenderDCErasePage, 'DPLSetRenderDCErasePage');
      AssignProc(@DebenuPDFLibrarySetRenderDCOffset, 'DPLSetRenderDCOffset');
      AssignProc(@DebenuPDFLibrarySetRenderOptions, 'DPLSetRenderOptions');
      AssignProc(@DebenuPDFLibrarySetRenderScale, 'DPLSetRenderScale');
      AssignProc(@DebenuPDFLibrarySetScale, 'DPLSetScale');
      AssignProc(@DebenuPDFLibrarySetSignProcessCustomSubFilter, 'DPLSetSignProcessCustomSubFilter');
      AssignProc(@DebenuPDFLibrarySetSignProcessField, 'DPLSetSignProcessField');
      AssignProc(@DebenuPDFLibrarySetSignProcessFieldBounds, 'DPLSetSignProcessFieldBounds');
      AssignProc(@DebenuPDFLibrarySetSignProcessFieldImageFromFile, 'DPLSetSignProcessFieldImageFromFile');
      AssignProc(@DebenuPDFLibrarySetSignProcessFieldPage, 'DPLSetSignProcessFieldPage');
      AssignProc(@DebenuPDFLibrarySetSignProcessInfo, 'DPLSetSignProcessInfo');
      AssignProc(@DebenuPDFLibrarySetSignProcessKeyset, 'DPLSetSignProcessKeyset');
      AssignProc(@DebenuPDFLibrarySetSignProcessPFXFromFile, 'DPLSetSignProcessPFXFromFile');
      AssignProc(@DebenuPDFLibrarySetSignProcessPassthrough, 'DPLSetSignProcessPassthrough');
      AssignProc(@DebenuPDFLibrarySetSignProcessSubFilter, 'DPLSetSignProcessSubFilter');
      AssignProc(@DebenuPDFLibrarySetTabOrderMode, 'DPLSetTabOrderMode');
      AssignProc(@DebenuPDFLibrarySetTableBorderColor, 'DPLSetTableBorderColor');
      AssignProc(@DebenuPDFLibrarySetTableBorderColorCMYK, 'DPLSetTableBorderColorCMYK');
      AssignProc(@DebenuPDFLibrarySetTableBorderWidth, 'DPLSetTableBorderWidth');
      AssignProc(@DebenuPDFLibrarySetTableCellAlignment, 'DPLSetTableCellAlignment');
      AssignProc(@DebenuPDFLibrarySetTableCellBackgroundColor, 'DPLSetTableCellBackgroundColor');
      AssignProc(@DebenuPDFLibrarySetTableCellBackgroundColorCMYK, 'DPLSetTableCellBackgroundColorCMYK');
      AssignProc(@DebenuPDFLibrarySetTableCellBorderColor, 'DPLSetTableCellBorderColor');
      AssignProc(@DebenuPDFLibrarySetTableCellBorderColorCMYK, 'DPLSetTableCellBorderColorCMYK');
      AssignProc(@DebenuPDFLibrarySetTableCellBorderWidth, 'DPLSetTableCellBorderWidth');
      AssignProc(@DebenuPDFLibrarySetTableCellContent, 'DPLSetTableCellContent');
      AssignProc(@DebenuPDFLibrarySetTableCellPadding, 'DPLSetTableCellPadding');
      AssignProc(@DebenuPDFLibrarySetTableCellTextColor, 'DPLSetTableCellTextColor');
      AssignProc(@DebenuPDFLibrarySetTableCellTextColorCMYK, 'DPLSetTableCellTextColorCMYK');
      AssignProc(@DebenuPDFLibrarySetTableCellTextSize, 'DPLSetTableCellTextSize');
      AssignProc(@DebenuPDFLibrarySetTableColumnWidth, 'DPLSetTableColumnWidth');
      AssignProc(@DebenuPDFLibrarySetTableRowHeight, 'DPLSetTableRowHeight');
      AssignProc(@DebenuPDFLibrarySetTableThinBorders, 'DPLSetTableThinBorders');
      AssignProc(@DebenuPDFLibrarySetTableThinBordersCMYK, 'DPLSetTableThinBordersCMYK');
      AssignProc(@DebenuPDFLibrarySetTempFile, 'DPLSetTempFile');
      AssignProc(@DebenuPDFLibrarySetTempPath, 'DPLSetTempPath');
      AssignProc(@DebenuPDFLibrarySetTextAlign, 'DPLSetTextAlign');
      AssignProc(@DebenuPDFLibrarySetTextCharSpacing, 'DPLSetTextCharSpacing');
      AssignProc(@DebenuPDFLibrarySetTextColor, 'DPLSetTextColor');
      AssignProc(@DebenuPDFLibrarySetTextColorCMYK, 'DPLSetTextColorCMYK');
      AssignProc(@DebenuPDFLibrarySetTextColorSep, 'DPLSetTextColorSep');
      AssignProc(@DebenuPDFLibrarySetTextExtractionArea, 'DPLSetTextExtractionArea');
      AssignProc(@DebenuPDFLibrarySetTextExtractionOptions, 'DPLSetTextExtractionOptions');
      AssignProc(@DebenuPDFLibrarySetTextExtractionScaling, 'DPLSetTextExtractionScaling');
      AssignProc(@DebenuPDFLibrarySetTextExtractionWordGap, 'DPLSetTextExtractionWordGap');
      AssignProc(@DebenuPDFLibrarySetTextHighlight, 'DPLSetTextHighlight');
      AssignProc(@DebenuPDFLibrarySetTextHighlightColor, 'DPLSetTextHighlightColor');
      AssignProc(@DebenuPDFLibrarySetTextHighlightColorCMYK, 'DPLSetTextHighlightColorCMYK');
      AssignProc(@DebenuPDFLibrarySetTextHighlightColorSep, 'DPLSetTextHighlightColorSep');
      AssignProc(@DebenuPDFLibrarySetTextMode, 'DPLSetTextMode');
      AssignProc(@DebenuPDFLibrarySetTextRise, 'DPLSetTextRise');
      AssignProc(@DebenuPDFLibrarySetTextScaling, 'DPLSetTextScaling');
      AssignProc(@DebenuPDFLibrarySetTextShader, 'DPLSetTextShader');
      AssignProc(@DebenuPDFLibrarySetTextSize, 'DPLSetTextSize');
      AssignProc(@DebenuPDFLibrarySetTextSpacing, 'DPLSetTextSpacing');
      AssignProc(@DebenuPDFLibrarySetTextUnderline, 'DPLSetTextUnderline');
      AssignProc(@DebenuPDFLibrarySetTextUnderlineColor, 'DPLSetTextUnderlineColor');
      AssignProc(@DebenuPDFLibrarySetTextUnderlineColorCMYK, 'DPLSetTextUnderlineColorCMYK');
      AssignProc(@DebenuPDFLibrarySetTextUnderlineColorSep, 'DPLSetTextUnderlineColorSep');
      AssignProc(@DebenuPDFLibrarySetTextUnderlineCustomDash, 'DPLSetTextUnderlineCustomDash');
      AssignProc(@DebenuPDFLibrarySetTextUnderlineDash, 'DPLSetTextUnderlineDash');
      AssignProc(@DebenuPDFLibrarySetTextUnderlineDistance, 'DPLSetTextUnderlineDistance');
      AssignProc(@DebenuPDFLibrarySetTextUnderlineWidth, 'DPLSetTextUnderlineWidth');
      AssignProc(@DebenuPDFLibrarySetTextWordSpacing, 'DPLSetTextWordSpacing');
      AssignProc(@DebenuPDFLibrarySetTransparency, 'DPLSetTransparency');
      AssignProc(@DebenuPDFLibrarySetViewerPreferences, 'DPLSetViewerPreferences');
      AssignProc(@DebenuPDFLibrarySetXFAFormFieldAccess, 'DPLSetXFAFormFieldAccess');
      AssignProc(@DebenuPDFLibrarySetXFAFormFieldBorderColor, 'DPLSetXFAFormFieldBorderColor');
      AssignProc(@DebenuPDFLibrarySetXFAFormFieldBorderPresence, 'DPLSetXFAFormFieldBorderPresence');
      AssignProc(@DebenuPDFLibrarySetXFAFormFieldBorderWidth, 'DPLSetXFAFormFieldBorderWidth');
      AssignProc(@DebenuPDFLibrarySetXFAFormFieldValue, 'DPLSetXFAFormFieldValue');
      AssignProc(@DebenuPDFLibrarySetXFAFromString, 'DPLSetXFAFromString');
      AssignProc(@DebenuPDFLibrarySetupCustomPrinter, 'DPLSetupCustomPrinter');
      AssignProc(@DebenuPDFLibrarySignFile, 'DPLSignFile');
      AssignProc(@DebenuPDFLibrarySplitPageText, 'DPLSplitPageText');
      AssignProc(@DebenuPDFLibraryStartPath, 'DPLStartPath');
      AssignProc(@DebenuPDFLibraryStoreCustomDataFromFile, 'DPLStoreCustomDataFromFile');
      AssignProc(@DebenuPDFLibraryStoreCustomDataFromString, 'DPLStoreCustomDataFromString');
      AssignProc(@DebenuPDFLibraryStringResultLength, 'DPLStringResultLength');
      AssignProc(@DebenuPDFLibraryTestTempPath, 'DPLTestTempPath');
      AssignProc(@DebenuPDFLibraryTransformFile, 'DPLTransformFile');
      AssignProc(@DebenuPDFLibraryUnlockKey, 'DPLUnlockKey');
      AssignProc(@DebenuPDFLibraryUnlocked, 'DPLUnlocked');
      AssignProc(@DebenuPDFLibraryUpdateAndFlattenFormField, 'DPLUpdateAndFlattenFormField');
      AssignProc(@DebenuPDFLibraryUpdateAppearanceStream, 'DPLUpdateAppearanceStream');
      AssignProc(@DebenuPDFLibraryUpdateTrueTypeSubsettedFont, 'DPLUpdateTrueTypeSubsettedFont');
      AssignProc(@DebenuPDFLibraryUseKerning, 'DPLUseKerning');
      AssignProc(@DebenuPDFLibraryUseUnsafeContentStreams, 'DPLUseUnsafeContentStreams');
      if FLibraryLoaded then
        FInstanceID := DebenuPDFLibraryCreateLibrary();
    end;
  end;
end;

destructor TDebenuPDFLibraryDLL1114.Destroy;
begin
  if FDLLHandle > 0 then
  begin
    if FInstanceID > 0 then
      DebenuPDFLibraryReleaseLibrary(FInstanceID);
    FreeLibrary(FDLLHandle);
  end;
  inherited;
end;

function TDebenuPDFLibraryDLL1114.GetString(Source: PWideChar): WideString;
begin
  if Assigned(Source) then
  begin
    SetLength(Result, DebenuPDFLibraryStringResultLength(FInstanceID));
    if Length(Result) > 0 then
      Move(Source^, Result[1], Length(Result) * 2);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetAnsiString(Source: PAnsiChar): AnsiString;
begin
  if Assigned(Source) then
  begin
    SetLength(Result, DebenuPDFLibraryAnsiStringResultLength(FInstanceID));
    if Length(Result) > 0 then
      Move(Source^, Result[1], Length(Result));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.StringParm(const ParmValue: WideString; var HasNulls: Boolean): PWideChar;
var
  P: Integer;
begin
  HasNulls := False;
  if ParmValue = '' then
  begin
    Result := nil;
  end else
  begin
    HasNulls := True;
    P := Length(ParmValue);
    Result := PWideChar(DebenuPDFLibraryCreateBuffer(FInstanceID, P * 2));
    DebenuPDFLibraryAddToBuffer(FInstanceID, Pointer(Result), @ParmValue[1], P * 2);
  end;
end;

function TDebenuPDFLibraryDLL1114.AnsiStringParm(const ParmValue: AnsiString; var HasNulls: Boolean): PAnsiChar;
var
  P: Integer;
begin
  HasNulls := False;
  if ParmValue = '' then
  begin
    Result := nil;
  end else
  begin
    HasNulls := True;
    P := Length(ParmValue);
    Result := DebenuPDFLibraryCreateBuffer(FInstanceID, P);
    DebenuPDFLibraryAddToBuffer(FInstanceID, Result, @ParmValue[1], P);
  end;
end;

procedure TDebenuPDFLibraryDLL1114.ReleaseBuffer(P: PWideChar);
begin
  DebenuPDFLibraryReleaseBuffer(FInstanceID, Pointer(P));
end;

function TDebenuPDFLibraryDLL1114.LibraryLoaded: Boolean;
begin
  Result := FLibraryLoaded;
end;

function TDebenuPDFLibraryDLL1114.AddArcToPath(CenterX, CenterY, 
  TotalAngle: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAddArcToPath(FInstanceID, CenterX, CenterY, 
      TotalAngle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddBoxToPath(Left, Top, Width, 
  Height: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAddBoxToPath(FInstanceID, Left, Top, Width, 
      Height);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddCJKFont(CJKFontID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAddCJKFont(FInstanceID, CJKFontID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddCurveToPath(CtAX, CtAY, CtBX, CtBY, EndX, 
  EndY: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAddCurveToPath(FInstanceID, CtAX, CtAY, CtBX, 
      CtBY, EndX, EndY);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddEmbeddedFile(const FileName, 
  MIMEType: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    SP2 := StringParm(MIMEType, SN2);
    Result := DebenuPDFLibraryAddEmbeddedFile(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddFileAttachment(const Title: WideString; 
  EmbeddedFileID: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    Result := DebenuPDFLibraryAddFileAttachment(FInstanceID, SP1, 
      EmbeddedFileID);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddFormFieldChoiceSub(Index: Integer; 
  const SubName, DisplayName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(SubName, SN1);
    SP2 := StringParm(DisplayName, SN2);
    Result := DebenuPDFLibraryAddFormFieldChoiceSub(FInstanceID, Index, SP1, 
      SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddFormFieldSub(Index: Integer; 
  const SubName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(SubName, SN1);
    Result := DebenuPDFLibraryAddFormFieldSub(FInstanceID, Index, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddFormFont(FontID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAddFormFont(FInstanceID, FontID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddFreeTextAnnotation(Left, Top, Width, 
  Height: Double; const Text: WideString; Angle, Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryAddFreeTextAnnotation(FInstanceID, Left, Top, 
      Width, Height, SP1, Angle, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddFreeTextAnnotationEx(Left, Top, Width, 
  Height: Double; const Text: WideString; Angle, Options, 
  Transparency: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryAddFreeTextAnnotationEx(FInstanceID, Left, Top, 
      Width, Height, SP1, Angle, Options, Transparency);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddGlobalJavaScript(const PackageName, 
  JavaScript: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PackageName, SN1);
    SP2 := StringParm(JavaScript, SN2);
    Result := DebenuPDFLibraryAddGlobalJavaScript(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddImageFromFile(const FileName: WideString; 
  Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddImageFromFile(FInstanceID, SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddImageFromFileOffset(
  const FileName: WideString; Offset, DataLength, Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddImageFromFileOffset(FInstanceID, SP1, Offset, 
      DataLength, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddImageFromString(const Source: AnsiString; 
  Options: Integer): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Source, SN1);
    Result := DebenuPDFLibraryAddImageFromString(FInstanceID, SP1, Options);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddLGIDictToPage(
  const DictContent: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(DictContent, SN1);
    Result := DebenuPDFLibraryAddLGIDictToPage(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddLineToPath(EndX, EndY: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAddLineToPath(FInstanceID, EndX, EndY);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddLinkToDestination(Left, Top, Width, 
  Height: Double; DestID, Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAddLinkToDestination(FInstanceID, Left, Top, 
      Width, Height, DestID, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddLinkToEmbeddedFile(Left, Top, Width, 
  Height: Double; EmbeddedFileID: Integer; const Title, Contents: WideString; 
  IconType, Transpareny: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    SP2 := StringParm(Contents, SN2);
    Result := DebenuPDFLibraryAddLinkToEmbeddedFile(FInstanceID, Left, Top, 
      Width, Height, EmbeddedFileID, SP1, SP2, IconType, Transpareny);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddLinkToFile(Left, Top, Width, 
  Height: Double; const FileName: WideString; Page: Integer; Position: Double; 
  NewWindow, Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddLinkToFile(FInstanceID, Left, Top, Width, 
      Height, SP1, Page, Position, NewWindow, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddLinkToFileDest(Left, Top, Width, 
  Height: Double; const FileName, NamedDest: WideString; Position: Double; 
  NewWindow, Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    SP2 := StringParm(NamedDest, SN2);
    Result := DebenuPDFLibraryAddLinkToFileDest(FInstanceID, Left, Top, Width, 
      Height, SP1, SP2, Position, NewWindow, Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddLinkToFileEx(Left, Top, Width, 
  Height: Double; const FileName: WideString; DestPage, NewWindow, Options, 
  Zoom, DestType: Integer; DestLeft, DestTop, DestRight, 
  DestBottom: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddLinkToFileEx(FInstanceID, Left, Top, Width, 
      Height, SP1, DestPage, NewWindow, Options, Zoom, DestType, DestLeft, 
      DestTop, DestRight, DestBottom);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddLinkToJavaScript(Left, Top, Width, 
  Height: Double; const JavaScript: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(JavaScript, SN1);
    Result := DebenuPDFLibraryAddLinkToJavaScript(FInstanceID, Left, Top, 
      Width, Height, SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddLinkToLocalFile(Left, Top, Width, 
  Height: Double; const FileName: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddLinkToLocalFile(FInstanceID, Left, Top, Width, 
      Height, SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddLinkToPage(Left, Top, Width, 
  Height: Double; Page: Integer; Position: Double; Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAddLinkToPage(FInstanceID, Left, Top, Width, 
      Height, Page, Position, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddLinkToWeb(Left, Top, Width, 
  Height: Double; const Link: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Link, SN1);
    Result := DebenuPDFLibraryAddLinkToWeb(FInstanceID, Left, Top, Width, 
      Height, SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddNoteAnnotation(Left, Top: Double; 
  AnnotType: Integer; PopupLeft, PopupTop, PopupWidth, PopupHeight: Double; 
  const Title, Contents: WideString; Red, Green, Blue: Double; 
  Open: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    SP2 := StringParm(Contents, SN2);
    Result := DebenuPDFLibraryAddNoteAnnotation(FInstanceID, Left, Top, 
      AnnotType, PopupLeft, PopupTop, PopupWidth, PopupHeight, SP1, SP2, Red, 
      Green, Blue, Open);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddOpenTypeFontFromFile(
  const FileName: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddOpenTypeFontFromFile(FInstanceID, SP1, 
      Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddPageLabels(Start, Style, Offset: Integer; 
  const Prefix: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Prefix, SN1);
    Result := DebenuPDFLibraryAddPageLabels(FInstanceID, Start, Style, Offset, 
      SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddPageMatrix(xscale, yscale, xoffset, 
  yoffset: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAddPageMatrix(FInstanceID, xscale, yscale, 
      xoffset, yoffset);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddRelativeLinkToFile(Left, Top, Width, 
  Height: Double; const FileName: WideString; Page: Integer; Position: Double; 
  NewWindow, Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddRelativeLinkToFile(FInstanceID, Left, Top, 
      Width, Height, SP1, Page, Position, NewWindow, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddRelativeLinkToFileDest(Left, Top, Width, 
  Height: Double; const FileName, NamedDest: WideString; Position: Double; 
  NewWindow, Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    SP2 := StringParm(NamedDest, SN2);
    Result := DebenuPDFLibraryAddRelativeLinkToFileDest(FInstanceID, Left, Top, 
      Width, Height, SP1, SP2, Position, NewWindow, Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddRelativeLinkToFileEx(Left, Top, Width, 
  Height: Double; const FileName: WideString; DestPage, NewWindow, Options, 
  Zoom, DestType: Integer; DestLeft, DestTop, DestRight, 
  DestBottom: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddRelativeLinkToFileEx(FInstanceID, Left, Top, 
      Width, Height, SP1, DestPage, NewWindow, Options, Zoom, DestType, 
      DestLeft, DestTop, DestRight, DestBottom);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddRelativeLinkToLocalFile(Left, Top, Width, 
  Height: Double; const FileName: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddRelativeLinkToLocalFile(FInstanceID, Left, 
      Top, Width, Height, SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddSVGAnnotationFromFile(Left, Top, Width, 
  Height: Double; const FileName: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddSVGAnnotationFromFile(FInstanceID, Left, Top, 
      Width, Height, SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddSWFAnnotationFromFile(Left, Top, Width, 
  Height: Double; const FileName, Title: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    SP2 := StringParm(Title, SN2);
    Result := DebenuPDFLibraryAddSWFAnnotationFromFile(FInstanceID, Left, Top, 
      Width, Height, SP1, SP2, Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddSeparationColor(
  const ColorName: WideString; C, M, Y, K: Double; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ColorName, SN1);
    Result := DebenuPDFLibraryAddSeparationColor(FInstanceID, SP1, C, M, Y, K, 
      Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddStampAnnotation(Left, Top, Width, 
  Height: Double; StampType: Integer; const Title, Contents: WideString; Red, 
  Green, Blue: Double; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    SP2 := StringParm(Contents, SN2);
    Result := DebenuPDFLibraryAddStampAnnotation(FInstanceID, Left, Top, Width, 
      Height, StampType, SP1, SP2, Red, Green, Blue, Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddStampAnnotationFromImage(Left, Top, Width, 
  Height: Double; const FileName, Title, Contents: WideString; Red, Green, 
  Blue: Double; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
  SP3: PWideChar;
  SN3: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    SP2 := StringParm(Title, SN2);
    SP3 := StringParm(Contents, SN3);
    Result := DebenuPDFLibraryAddStampAnnotationFromImage(FInstanceID, Left, 
      Top, Width, Height, SP1, SP2, SP3, Red, Green, Blue, Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
    if (SN3) then ReleaseBuffer(SP3);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddStampAnnotationFromImageID(Left, Top, 
  Width, Height: Double; ImageID: Integer; const Title, Contents: WideString; 
  Red, Green, Blue: Double; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    SP2 := StringParm(Contents, SN2);
    Result := DebenuPDFLibraryAddStampAnnotationFromImageID(FInstanceID, Left, 
      Top, Width, Height, ImageID, SP1, SP2, Red, Green, Blue, Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddStandardFont(
  StandardFontID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAddStandardFont(FInstanceID, StandardFontID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddSubsettedFont(const FontName: WideString; 
  CharsetIndex: Integer; const SubsetChars: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FontName, SN1);
    SP2 := StringParm(SubsetChars, SN2);
    Result := DebenuPDFLibraryAddSubsettedFont(FInstanceID, SP1, CharsetIndex, 
      SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddTextMarkupAnnotation(MarkupType: Integer; 
  Left, Top, Width, Height: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAddTextMarkupAnnotation(FInstanceID, MarkupType, 
      Left, Top, Width, Height);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddToBuffer(const Buffer, Source: AnsiString; 
  SourceLength: Integer): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
  SP2: PAnsiChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Buffer, SN1);
    SP2 := AnsiStringParm(Source, SN2);
    Result := DebenuPDFLibraryAddToBuffer(FInstanceID, SP1, SP2, SourceLength);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
    if (SN2) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddToFileList(const ListName, 
  FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ListName, SN1);
    SP2 := StringParm(FileName, SN2);
    Result := DebenuPDFLibraryAddToFileList(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddTrueTypeFont(const FontName: WideString; 
  Embed: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FontName, SN1);
    Result := DebenuPDFLibraryAddTrueTypeFont(FInstanceID, SP1, Embed);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddTrueTypeFontFromFile(
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddTrueTypeFontFromFile(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddTrueTypeSubsettedFont(const FontName, 
  SubsetChars: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FontName, SN1);
    SP2 := StringParm(SubsetChars, SN2);
    Result := DebenuPDFLibraryAddTrueTypeSubsettedFont(FInstanceID, SP1, SP2, 
      Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddType1Font(
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddType1Font(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AddU3DAnnotationFromFile(Left, Top, Width, 
  Height: Double; const FileName: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAddU3DAnnotationFromFile(FInstanceID, Left, Top, 
      Width, Height, SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AnalyseFile(const InputFileName, 
  Password: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(Password, SN2);
    Result := DebenuPDFLibraryAnalyseFile(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AnnotationCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAnnotationCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AnsiStringResultLength(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAnsiStringResultLength(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AppendSpace(RelativeSpace: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAppendSpace(FInstanceID, RelativeSpace);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AppendTableColumns(TableID, 
  NewColumnCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAppendTableColumns(FInstanceID, TableID, 
      NewColumnCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AppendTableRows(TableID, 
  NewRowCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAppendTableRows(FInstanceID, TableID, 
      NewRowCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AppendText(const Text: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryAppendText(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AppendToFile(
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryAppendToFile(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AppendToString(
  AppendMode: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryAppendToString(FInstanceID, 
      AppendMode));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.ApplyStyle(
  const StyleName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(StyleName, SN1);
    Result := DebenuPDFLibraryApplyStyle(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.AttachAnnotToForm(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryAttachAnnotToForm(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.BalanceContentStream(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryBalanceContentStream(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.BalancePageTree(Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryBalancePageTree(FInstanceID, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.BeginPageUpdate(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryBeginPageUpdate(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CapturePage(Page: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCapturePage(FInstanceID, Page);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CapturePageEx(Page, 
  Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCapturePageEx(FInstanceID, Page, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CharWidth(CharCode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCharWidth(FInstanceID, CharCode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CheckFileCompliance(const InputFileName, 
  Password: WideString; ComplianceTest, Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(Password, SN2);
    Result := DebenuPDFLibraryCheckFileCompliance(FInstanceID, SP1, SP2, 
      ComplianceTest, Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CheckObjects(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCheckObjects(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CheckPageAnnots(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCheckPageAnnots(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CheckPassword(
  const Password: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Password, SN1);
    Result := DebenuPDFLibraryCheckPassword(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ClearFileList(
  const ListName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ListName, SN1);
    Result := DebenuPDFLibraryClearFileList(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ClearImage(ImageID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryClearImage(FInstanceID, ImageID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ClearPageLabels(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryClearPageLabels(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ClearTextFormatting(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryClearTextFormatting(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CloneOutlineAction(
  OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCloneOutlineAction(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ClonePages(StartPage, EndPage, 
  RepeatCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryClonePages(FInstanceID, StartPage, EndPage, 
      RepeatCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CloseOutline(OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCloseOutline(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ClosePath(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryClosePath(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CombineContentStreams(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCombineContentStreams(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CompareOutlines(FirstOutlineID, 
  SecondOutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCompareOutlines(FInstanceID, FirstOutlineID, 
      SecondOutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CompressContent(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCompressContent(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CompressFonts(Compress: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCompressFonts(FInstanceID, Compress);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CompressImages(Compress: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCompressImages(FInstanceID, Compress);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CompressPage(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCompressPage(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ContentStreamCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryContentStreamCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ContentStreamSafe(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryContentStreamSafe(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CopyPageRanges(DocumentID: Integer; 
  const RangeList: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(RangeList, SN1);
    Result := DebenuPDFLibraryCopyPageRanges(FInstanceID, DocumentID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CopyPageRangesEx(DocumentID: Integer; 
  const RangeList: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(RangeList, SN1);
    Result := DebenuPDFLibraryCopyPageRangesEx(FInstanceID, DocumentID, SP1, 
      Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CreateNewObject(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCreateNewObject(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.CreateTable(RowCount, 
  ColumnCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryCreateTable(FInstanceID, RowCount, ColumnCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAAppendFile(FileHandle: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAAppendFile(FInstanceID, FileHandle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DACapturePage(FileHandle, 
  PageRef: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDACapturePage(FInstanceID, FileHandle, PageRef);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DACapturePageEx(FileHandle, PageRef, 
  Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDACapturePageEx(FInstanceID, FileHandle, PageRef, 
      Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DACloseFile(FileHandle: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDACloseFile(FInstanceID, FileHandle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DADrawCapturedPage(FileHandle, DACaptureID, 
  DestPageRef: Integer; PntLeft, PntBottom, PntWidth, 
  PntHeight: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDADrawCapturedPage(FInstanceID, FileHandle, 
      DACaptureID, DestPageRef, PntLeft, PntBottom, PntWidth, PntHeight);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DADrawRotatedCapturedPage(FileHandle, 
  DACaptureID, DestPageRef: Integer; PntLeft, PntBottom, PntWidth, PntHeight, 
  Angle: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDADrawRotatedCapturedPage(FInstanceID, 
      FileHandle, DACaptureID, DestPageRef, PntLeft, PntBottom, PntWidth, 
      PntHeight, Angle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAEmbedFileStreams(FileHandle: Integer; 
  const RootPath: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(RootPath, SN1);
    Result := DebenuPDFLibraryDAEmbedFileStreams(FInstanceID, FileHandle, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAExtractPageText(FileHandle, PageRef, 
  Options: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryDAExtractPageText(FInstanceID, 
      FileHandle, PageRef, Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DAExtractPageTextBlocks(FileHandle, PageRef, 
  ExtractOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAExtractPageTextBlocks(FInstanceID, FileHandle, 
      PageRef, ExtractOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAFindPage(FileHandle, 
  Page: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAFindPage(FInstanceID, FileHandle, Page);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetAnnotationCount(FileHandle, 
  PageRef: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetAnnotationCount(FInstanceID, FileHandle, 
      PageRef);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetFormFieldCount(
  FileHandle: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetFormFieldCount(FInstanceID, FileHandle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetFormFieldTitle(FileHandle, 
  FieldIndex: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryDAGetFormFieldTitle(FInstanceID, 
      FileHandle, FieldIndex));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DAGetFormFieldValue(FileHandle, 
  FieldIndex: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryDAGetFormFieldValue(FInstanceID, 
      FileHandle, FieldIndex));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DAGetImageDataToString(FileHandle, 
  ImageListID, ImageIndex: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryDAGetImageDataToString(FInstanceID, 
      FileHandle, ImageListID, ImageIndex));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DAGetImageDblProperty(FileHandle, 
  ImageListID, ImageIndex, PropertyID: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetImageDblProperty(FInstanceID, FileHandle, 
      ImageListID, ImageIndex, PropertyID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetImageIntProperty(FileHandle, 
  ImageListID, ImageIndex, PropertyID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetImageIntProperty(FInstanceID, FileHandle, 
      ImageListID, ImageIndex, PropertyID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetImageListCount(FileHandle, 
  ImageListID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetImageListCount(FInstanceID, FileHandle, 
      ImageListID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetInformation(FileHandle: Integer; 
  const Key: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Key, SN1);
    Result := GetString(DebenuPDFLibraryDAGetInformation(FInstanceID, 
      FileHandle, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DAGetObjectCount(
  FileHandle: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetObjectCount(FInstanceID, FileHandle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetObjectToString(FileHandle, 
  ObjectNumber: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryDAGetObjectToString(FInstanceID, 
      FileHandle, ObjectNumber));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DAGetPageBox(FileHandle, PageRef, BoxIndex, 
  Dimension: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetPageBox(FInstanceID, FileHandle, PageRef, 
      BoxIndex, Dimension);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetPageContentToString(FileHandle, 
  PageRef: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryDAGetPageContentToString(FInstanceID, 
      FileHandle, PageRef));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DAGetPageCount(FileHandle: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetPageCount(FInstanceID, FileHandle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetPageHeight(FileHandle, 
  PageRef: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetPageHeight(FInstanceID, FileHandle, PageRef);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetPageImageList(FileHandle, 
  PageRef: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetPageImageList(FInstanceID, FileHandle, 
      PageRef);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetPageWidth(FileHandle, 
  PageRef: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetPageWidth(FInstanceID, FileHandle, PageRef);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetTextBlockAsString(TextBlockListID, 
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryDAGetTextBlockAsString(FInstanceID, 
      TextBlockListID, Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DAGetTextBlockBound(TextBlockListID, Index, 
  BoundIndex: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetTextBlockBound(FInstanceID, TextBlockListID, 
      Index, BoundIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetTextBlockCharWidth(TextBlockListID, 
  Index, CharIndex: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetTextBlockCharWidth(FInstanceID, 
      TextBlockListID, Index, CharIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetTextBlockColor(TextBlockListID, Index, 
  ColorComponent: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetTextBlockColor(FInstanceID, TextBlockListID, 
      Index, ColorComponent);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetTextBlockColorType(TextBlockListID, 
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetTextBlockColorType(FInstanceID, 
      TextBlockListID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetTextBlockCount(
  TextBlockListID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetTextBlockCount(FInstanceID, TextBlockListID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetTextBlockFontName(TextBlockListID, 
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryDAGetTextBlockFontName(FInstanceID, 
      TextBlockListID, Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DAGetTextBlockFontSize(TextBlockListID, 
  Index: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAGetTextBlockFontSize(FInstanceID, 
      TextBlockListID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAGetTextBlockText(TextBlockListID, 
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryDAGetTextBlockText(FInstanceID, 
      TextBlockListID, Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DAHasPageBox(FileHandle, PageRef, 
  BoxIndex: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAHasPageBox(FInstanceID, FileHandle, PageRef, 
      BoxIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAHidePage(FileHandle, 
  PageRef: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAHidePage(FInstanceID, FileHandle, PageRef);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAMovePage(FileHandle, PageRef, 
  TargetPageRef, Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAMovePage(FInstanceID, FileHandle, PageRef, 
      TargetPageRef, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DANewPage(FileHandle: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDANewPage(FInstanceID, FileHandle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DANewPages(FileHandle, 
  PageCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDANewPages(FInstanceID, FileHandle, PageCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DANormalizePage(FileHandle, PageRef, 
  NormalizeOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDANormalizePage(FInstanceID, FileHandle, PageRef, 
      NormalizeOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAOpenFile(const InputFileName, 
  Password: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(Password, SN2);
    Result := DebenuPDFLibraryDAOpenFile(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAOpenFileReadOnly(const InputFileName, 
  Password: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(Password, SN2);
    Result := DebenuPDFLibraryDAOpenFileReadOnly(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAPageRotation(FileHandle, 
  PageRef: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAPageRotation(FInstanceID, FileHandle, PageRef);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAReleaseImageList(FileHandle, 
  ImageListID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAReleaseImageList(FInstanceID, FileHandle, 
      ImageListID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAReleaseTextBlocks(
  TextBlockListID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAReleaseTextBlocks(FInstanceID, TextBlockListID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DARemoveUsageRights(
  FileHandle: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDARemoveUsageRights(FInstanceID, FileHandle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DARenderPageToDC(FileHandle, 
  PageRef: Integer; DPI: Double; DC: HDC): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDARenderPageToDC(FInstanceID, FileHandle, 
      PageRef, DPI, DC);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DARenderPageToFile(FileHandle, PageRef, 
  Options: Integer; DPI: Double; const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryDARenderPageToFile(FInstanceID, FileHandle, 
      PageRef, Options, DPI, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DARenderPageToString(FileHandle, PageRef, 
  Options: Integer; DPI: Double): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryDARenderPageToString(FInstanceID, 
      FileHandle, PageRef, Options, DPI));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DARotatePage(FileHandle, PageRef, Angle, 
  Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDARotatePage(FInstanceID, FileHandle, PageRef, 
      Angle, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DASaveAsFile(FileHandle: Integer; 
  const OutputFileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(OutputFileName, SN1);
    Result := DebenuPDFLibraryDASaveAsFile(FInstanceID, FileHandle, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DASaveImageDataToFile(FileHandle, 
  ImageListID, ImageIndex: Integer; const ImageFileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ImageFileName, SN1);
    Result := DebenuPDFLibraryDASaveImageDataToFile(FInstanceID, FileHandle, 
      ImageListID, ImageIndex, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DASetInformation(FileHandle: Integer; 
  const Key, NewValue: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Key, SN1);
    SP2 := StringParm(NewValue, SN2);
    Result := DebenuPDFLibraryDASetInformation(FInstanceID, FileHandle, SP1, 
      SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DASetPageBox(FileHandle, PageRef, 
  BoxIndex: Integer; X1, Y1, X2, Y2: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDASetPageBox(FInstanceID, FileHandle, PageRef, 
      BoxIndex, X1, Y1, X2, Y2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DASetPageLayout(FileHandle, 
  NewPageLayout: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDASetPageLayout(FInstanceID, FileHandle, 
      NewPageLayout);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DASetPageMode(FileHandle, 
  NewPageMode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDASetPageMode(FInstanceID, FileHandle, 
      NewPageMode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DASetPageSize(FileHandle, PageRef: Integer; 
  PntWidth, PntHeight: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDASetPageSize(FInstanceID, FileHandle, PageRef, 
      PntWidth, PntHeight);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DASetTextExtractionArea(Left, Top, Width, 
  Height: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDASetTextExtractionArea(FInstanceID, Left, Top, 
      Width, Height);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DASetTextExtractionOptions(OptionID, 
  NewValue: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDASetTextExtractionOptions(FInstanceID, OptionID, 
      NewValue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DASetTextExtractionScaling(Options: Integer; 
  Horizontal, Vertical: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDASetTextExtractionScaling(FInstanceID, Options, 
      Horizontal, Vertical);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DASetTextExtractionWordGap(
  NewWordGap: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDASetTextExtractionWordGap(FInstanceID, 
      NewWordGap);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DAShiftedHeader(FileHandle: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDAShiftedHeader(FInstanceID, FileHandle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.Decrypt(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDecrypt(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DecryptFile(const InputFileName, 
  OutputFileName, Password: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
  SP3: PWideChar;
  SN3: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(OutputFileName, SN2);
    SP3 := StringParm(Password, SN3);
    Result := DebenuPDFLibraryDecryptFile(FInstanceID, SP1, SP2, SP3);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
    if (SN3) then ReleaseBuffer(SP3);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DeleteAnalysis(AnalysisID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDeleteAnalysis(FInstanceID, AnalysisID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DeleteAnnotation(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDeleteAnnotation(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DeleteContentStream(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDeleteContentStream(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DeleteFormField(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDeleteFormField(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DeleteOptionalContentGroup(
  OptionalContentGroupID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDeleteOptionalContentGroup(FInstanceID, 
      OptionalContentGroupID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DeletePageLGIDict(
  DictIndex: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDeletePageLGIDict(FInstanceID, DictIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DeletePages(StartPage, 
  PageCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDeletePages(FInstanceID, StartPage, PageCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DocJavaScriptAction(const ActionType, 
  JavaScript: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ActionType, SN1);
    SP2 := StringParm(JavaScript, SN2);
    Result := DebenuPDFLibraryDocJavaScriptAction(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DocumentCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDocumentCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawArc(XPos, YPos, Radius, StartAngle, 
  EndAngle: Double; Pie, DrawOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawArc(FInstanceID, XPos, YPos, Radius, 
      StartAngle, EndAngle, Pie, DrawOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawBarcode(Left, Top, Width, Height: Double; 
  const Text: WideString; Barcode, Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawBarcode(FInstanceID, Left, Top, Width, 
      Height, SP1, Barcode, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawBox(Left, Top, Width, Height: Double; 
  DrawOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawBox(FInstanceID, Left, Top, Width, Height, 
      DrawOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawCapturedPage(CaptureID: Integer; Left, 
  Top, Width, Height: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawCapturedPage(FInstanceID, CaptureID, Left, 
      Top, Width, Height);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawCapturedPageMatrix(CaptureID: Integer; 
  M11, M12, M21, M22, MDX, MDY: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawCapturedPageMatrix(FInstanceID, CaptureID, 
      M11, M12, M21, M22, MDX, MDY);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawCircle(XPos, YPos, Radius: Double; 
  DrawOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawCircle(FInstanceID, XPos, YPos, Radius, 
      DrawOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawDataMatrixSymbol(Left, Top, 
  ModuleSize: Double; const Text: WideString; Encoding, SymbolSize, 
  Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawDataMatrixSymbol(FInstanceID, Left, Top, 
      ModuleSize, SP1, Encoding, SymbolSize, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawEllipse(XPos, YPos, Width, 
  Height: Double; DrawOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawEllipse(FInstanceID, XPos, YPos, Width, 
      Height, DrawOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawEllipticArc(XPos, YPos, Width, Height, 
  StartAngle, EndAngle: Double; Pie, DrawOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawEllipticArc(FInstanceID, XPos, YPos, Width, 
      Height, StartAngle, EndAngle, Pie, DrawOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawHTMLText(Left, Top, Width: Double; 
  const HTMLText: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(HTMLText, SN1);
    Result := DebenuPDFLibraryDrawHTMLText(FInstanceID, Left, Top, Width, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawHTMLTextBox(Left, Top, Width, 
  Height: Double; const HTMLText: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(HTMLText, SN1);
    Result := GetString(DebenuPDFLibraryDrawHTMLTextBox(FInstanceID, Left, Top, 
      Width, Height, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DrawHTMLTextBoxMatrix(Width, Height: Double; 
  const HTMLText: WideString; M11, M12, M21, M22, MDX, MDY: Double): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(HTMLText, SN1);
    Result := GetString(DebenuPDFLibraryDrawHTMLTextBoxMatrix(FInstanceID, 
      Width, Height, SP1, M11, M12, M21, M22, MDX, MDY));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.DrawHTMLTextMatrix(Width: Double; 
  const HTMLText: WideString; M11, M12, M21, M22, MDX, MDY: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(HTMLText, SN1);
    Result := DebenuPDFLibraryDrawHTMLTextMatrix(FInstanceID, Width, SP1, M11, 
      M12, M21, M22, MDX, MDY);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawImage(Left, Top, Width, 
  Height: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawImage(FInstanceID, Left, Top, Width, Height);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawImageMatrix(M11, M12, M21, M22, MDX, 
  MDY: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawImageMatrix(FInstanceID, M11, M12, M21, M22, 
      MDX, MDY);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawIntelligentMailBarcode(Left, Top, 
  BarWidth, FullBarHeight, TrackerHeight, SpaceWidth: Double; 
  const BarcodeData: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(BarcodeData, SN1);
    Result := DebenuPDFLibraryDrawIntelligentMailBarcode(FInstanceID, Left, 
      Top, BarWidth, FullBarHeight, TrackerHeight, SpaceWidth, SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawLine(StartX, StartY, EndX, 
  EndY: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawLine(FInstanceID, StartX, StartY, EndX, EndY);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawMultiLineText(XPos, YPos: Double; 
  const Delimiter, Text: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Delimiter, SN1);
    SP2 := StringParm(Text, SN2);
    Result := DebenuPDFLibraryDrawMultiLineText(FInstanceID, XPos, YPos, SP1, 
      SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawPDF417Symbol(Left, Top: Double; 
  const Text: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawPDF417Symbol(FInstanceID, Left, Top, SP1, 
      Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawPDF417SymbolEx(Left, Top: Double; 
  const Text: WideString; Options, FixedColumns, FixedRows, 
  ErrorLevel: Integer; ModuleSize, HeightWidthRatio: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawPDF417SymbolEx(FInstanceID, Left, Top, SP1, 
      Options, FixedColumns, FixedRows, ErrorLevel, ModuleSize, 
      HeightWidthRatio);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawPath(PathOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawPath(FInstanceID, PathOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawPathEvenOdd(
  PathOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawPathEvenOdd(FInstanceID, PathOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawPostScriptXObject(
  PSRef: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawPostScriptXObject(FInstanceID, PSRef);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawQRCode(Left, Top, SymbolSize: Double; 
  const Text: WideString; EncodeOptions, DrawOptions: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawQRCode(FInstanceID, Left, Top, SymbolSize, 
      SP1, EncodeOptions, DrawOptions);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawRotatedBox(Left, Bottom, Width, Height, 
  Angle: Double; DrawOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawRotatedBox(FInstanceID, Left, Bottom, Width, 
      Height, Angle, DrawOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawRotatedCapturedPage(CaptureID: Integer; 
  Left, Bottom, Width, Height, Angle: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawRotatedCapturedPage(FInstanceID, CaptureID, 
      Left, Bottom, Width, Height, Angle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawRotatedImage(Left, Bottom, Width, Height, 
  Angle: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawRotatedImage(FInstanceID, Left, Bottom, 
      Width, Height, Angle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawRotatedMultiLineText(XPos, YPos, 
  Angle: Double; const Delimiter, Text: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Delimiter, SN1);
    SP2 := StringParm(Text, SN2);
    Result := DebenuPDFLibraryDrawRotatedMultiLineText(FInstanceID, XPos, YPos, 
      Angle, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawRotatedText(XPos, YPos, Angle: Double; 
  const Text: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawRotatedText(FInstanceID, XPos, YPos, Angle, 
      SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawRotatedTextBox(Left, Top, Width, Height, 
  Angle: Double; const Text: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawRotatedTextBox(FInstanceID, Left, Top, Width, 
      Height, Angle, SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawRotatedTextBoxEx(Left, Top, Width, 
  Height, Angle: Double; const Text: WideString; Options, Border, Radius, 
  DrawOptions: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawRotatedTextBoxEx(FInstanceID, Left, Top, 
      Width, Height, Angle, SP1, Options, Border, Radius, DrawOptions);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawRoundedBox(Left, Top, Width, Height, 
  Radius: Double; DrawOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawRoundedBox(FInstanceID, Left, Top, Width, 
      Height, Radius, DrawOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawRoundedRotatedBox(Left, Bottom, Width, 
  Height, Radius, Angle: Double; DrawOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawRoundedRotatedBox(FInstanceID, Left, Bottom, 
      Width, Height, Radius, Angle, DrawOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawScaledImage(Left, Top, 
  Scale: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawScaledImage(FInstanceID, Left, Top, Scale);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawSpacedText(XPos, YPos, Spacing: Double; 
  const Text: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawSpacedText(FInstanceID, XPos, YPos, Spacing, 
      SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawTableRows(TableID: Integer; Left, Top, 
  Height: Double; FirstRow, LastRow: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryDrawTableRows(FInstanceID, TableID, Left, Top, 
      Height, FirstRow, LastRow);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawText(XPos, YPos: Double; 
  const Text: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawText(FInstanceID, XPos, YPos, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawTextArc(XPos, YPos, Radius, 
  Angle: Double; const Text: WideString; DrawOptions: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawTextArc(FInstanceID, XPos, YPos, Radius, 
      Angle, SP1, DrawOptions);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawTextBox(Left, Top, Width, Height: Double; 
  const Text: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawTextBox(FInstanceID, Left, Top, Width, 
      Height, SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawTextBoxMatrix(Width, Height: Double; 
  const Text: WideString; Options: Integer; M11, M12, M21, M22, MDX, 
  MDY: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawTextBoxMatrix(FInstanceID, Width, Height, 
      SP1, Options, M11, M12, M21, M22, MDX, MDY);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.DrawWrappedText(XPos, YPos, Width: Double; 
  const Text: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryDrawWrappedText(FInstanceID, XPos, YPos, Width, 
      SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EditableContentStream(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryEditableContentStream(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EmbedFile(const Title, FileName, 
  MIMEType: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
  SP3: PWideChar;
  SN3: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    SP2 := StringParm(FileName, SN2);
    SP3 := StringParm(MIMEType, SN3);
    Result := DebenuPDFLibraryEmbedFile(FInstanceID, SP1, SP2, SP3);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
    if (SN3) then ReleaseBuffer(SP3);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EmbeddedFileCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryEmbeddedFileCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EncapsulateContentStream(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryEncapsulateContentStream(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EncodePermissions(CanPrint, CanCopy, 
  CanChange, CanAddNotes, CanFillFields, CanCopyAccess, CanAssemble, 
  CanPrintFull: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryEncodePermissions(FInstanceID, CanPrint, CanCopy, 
      CanChange, CanAddNotes, CanFillFields, CanCopyAccess, CanAssemble, 
      CanPrintFull);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.Encrypt(const Owner, User: WideString; 
  Strength, Permissions: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Owner, SN1);
    SP2 := StringParm(User, SN2);
    Result := DebenuPDFLibraryEncrypt(FInstanceID, SP1, SP2, Strength, 
      Permissions);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EncryptFile(const InputFileName, 
  OutputFileName, Owner, User: WideString; Strength, 
  Permissions: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
  SP3: PWideChar;
  SN3: Boolean;
  SP4: PWideChar;
  SN4: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(OutputFileName, SN2);
    SP3 := StringParm(Owner, SN3);
    SP4 := StringParm(User, SN4);
    Result := DebenuPDFLibraryEncryptFile(FInstanceID, SP1, SP2, SP3, SP4, 
      Strength, Permissions);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
    if (SN3) then ReleaseBuffer(SP3);
    if (SN4) then ReleaseBuffer(SP4);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EncryptWithFingerprint(
  const Fingerprint: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Fingerprint, SN1);
    Result := DebenuPDFLibraryEncryptWithFingerprint(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EncryptionAlgorithm(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryEncryptionAlgorithm(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EncryptionStatus(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryEncryptionStatus(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EncryptionStrength(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryEncryptionStrength(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EndPageUpdate(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryEndPageUpdate(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EndSignProcessToFile(SignProcessID: Integer; 
  const OutputFile: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(OutputFile, SN1);
    Result := DebenuPDFLibraryEndSignProcessToFile(FInstanceID, SignProcessID, 
      SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.EndSignProcessToString(
  SignProcessID: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryEndSignProcessToString(FInstanceID, 
      SignProcessID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.ExtractFilePageContentToString(
  const InputFileName, Password: WideString; Page: Integer): AnsiString;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(Password, SN2);
    Result := GetAnsiString(DebenuPDFLibraryExtractFilePageContentToString(FInstanceID, 
      SP1, SP2, Page));
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.ExtractFilePageText(const InputFileName, 
  Password: WideString; Page, Options: Integer): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(Password, SN2);
    Result := GetString(DebenuPDFLibraryExtractFilePageText(FInstanceID, SP1, 
      SP2, Page, Options));
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.ExtractFilePageTextBlocks(
  const InputFileName, Password: WideString; Page, Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(Password, SN2);
    Result := DebenuPDFLibraryExtractFilePageTextBlocks(FInstanceID, SP1, SP2, 
      Page, Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ExtractFilePages(const InputFileName, 
  Password, OutputFileName, RangeList: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
  SP3: PWideChar;
  SN3: Boolean;
  SP4: PWideChar;
  SN4: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(Password, SN2);
    SP3 := StringParm(OutputFileName, SN3);
    SP4 := StringParm(RangeList, SN4);
    Result := DebenuPDFLibraryExtractFilePages(FInstanceID, SP1, SP2, SP3, SP4);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
    if (SN3) then ReleaseBuffer(SP3);
    if (SN4) then ReleaseBuffer(SP4);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ExtractFilePagesEx(const InputFileName, 
  Password, OutputFileName, RangeList: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
  SP3: PWideChar;
  SN3: Boolean;
  SP4: PWideChar;
  SN4: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(Password, SN2);
    SP3 := StringParm(OutputFileName, SN3);
    SP4 := StringParm(RangeList, SN4);
    Result := DebenuPDFLibraryExtractFilePagesEx(FInstanceID, SP1, SP2, SP3, 
      SP4, Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
    if (SN3) then ReleaseBuffer(SP3);
    if (SN4) then ReleaseBuffer(SP4);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ExtractPageRanges(
  const RangeList: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(RangeList, SN1);
    Result := DebenuPDFLibraryExtractPageRanges(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ExtractPageTextBlocks(
  ExtractOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryExtractPageTextBlocks(FInstanceID, 
      ExtractOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ExtractPages(StartPage, 
  PageCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryExtractPages(FInstanceID, StartPage, PageCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FileListCount(
  const ListName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ListName, SN1);
    Result := DebenuPDFLibraryFileListCount(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FileListItem(const ListName: WideString; 
  Index: Integer): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ListName, SN1);
    Result := GetString(DebenuPDFLibraryFileListItem(FInstanceID, SP1, Index));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.FindFonts(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryFindFonts(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FindFormFieldByTitle(
  const Title: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    Result := DebenuPDFLibraryFindFormFieldByTitle(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FindImages(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryFindImages(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FitImage(Left, Top, Width, Height: Double; 
  HAlign, VAlign, Rotate: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryFitImage(FInstanceID, Left, Top, Width, Height, 
      HAlign, VAlign, Rotate);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FitRotatedTextBox(Left, Top, Width, Height, 
  Angle: Double; const Text: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryFitRotatedTextBox(FInstanceID, Left, Top, Width, 
      Height, Angle, SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FitTextBox(Left, Top, Width, Height: Double; 
  const Text: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryFitTextBox(FInstanceID, Left, Top, Width, Height, 
      SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FlattenAnnot(Index, 
  Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryFlattenAnnot(FInstanceID, Index, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FlattenFormField(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryFlattenFormField(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FontCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryFontCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FontFamily(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryFontFamily(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.FontHasKerning(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryFontHasKerning(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FontName(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryFontName(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.FontReference(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryFontReference(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.FontSize(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryFontSize(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FontType(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryFontType(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FormFieldCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryFormFieldCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FormFieldHasParent(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryFormFieldHasParent(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FormFieldJavaScriptAction(Index: Integer; 
  const ActionType, JavaScript: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ActionType, SN1);
    SP2 := StringParm(JavaScript, SN2);
    Result := DebenuPDFLibraryFormFieldJavaScriptAction(FInstanceID, Index, 
      SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.FormFieldWebLinkAction(Index: Integer; 
  const ActionType, Link: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ActionType, SN1);
    SP2 := StringParm(Link, SN2);
    Result := DebenuPDFLibraryFormFieldWebLinkAction(FInstanceID, Index, SP1, 
      SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetActionDest(ActionID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetActionDest(FInstanceID, ActionID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetActionType(ActionID: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetActionType(FInstanceID, ActionID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetActionURL(ActionID: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetActionURL(FInstanceID, ActionID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetAnalysisInfo(AnalysisID, 
  AnalysisItem: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetAnalysisInfo(FInstanceID, 
      AnalysisID, AnalysisItem));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetAnnotActionID(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetAnnotActionID(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetAnnotDblProperty(Index, 
  Tag: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetAnnotDblProperty(FInstanceID, Index, Tag);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetAnnotDest(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetAnnotDest(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetAnnotEmbeddedFileName(Index, 
  Options: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetAnnotEmbeddedFileName(FInstanceID, 
      Index, Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetAnnotEmbeddedFileToFile(Index, 
  Options: Integer; const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryGetAnnotEmbeddedFileToFile(FInstanceID, Index, 
      Options, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetAnnotEmbeddedFileToString(Index, 
  Options: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryGetAnnotEmbeddedFileToString(FInstanceID, 
      Index, Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetAnnotIntProperty(Index, 
  Tag: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetAnnotIntProperty(FInstanceID, Index, Tag);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetAnnotQuadCount(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetAnnotQuadCount(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetAnnotQuadPoints(Index, QuadNumber, 
  PointNumber: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetAnnotQuadPoints(FInstanceID, Index, 
      QuadNumber, PointNumber);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetAnnotSoundToFile(Index, Options: Integer; 
  const SoundFileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(SoundFileName, SN1);
    Result := DebenuPDFLibraryGetAnnotSoundToFile(FInstanceID, Index, Options, 
      SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetAnnotSoundToString(Index, 
  Options: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryGetAnnotSoundToString(FInstanceID, 
      Index, Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetAnnotStrProperty(Index, 
  Tag: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetAnnotStrProperty(FInstanceID, Index, 
      Tag));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetBarcodeWidth(NominalWidth: Double; 
  const Text: WideString; Barcode: Integer): Double;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryGetBarcodeWidth(FInstanceID, NominalWidth, SP1, 
      Barcode);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetBaseURL(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetBaseURL(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetCSDictEPSG(CSDictID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetCSDictEPSG(FInstanceID, CSDictID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetCSDictType(CSDictID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetCSDictType(FInstanceID, CSDictID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetCSDictWKT(CSDictID: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetCSDictWKT(FInstanceID, CSDictID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetCanvasDC(CanvasWidth, 
  CanvasHeight: Integer): HDC;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetCanvasDC(FInstanceID, CanvasWidth, 
      CanvasHeight);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetCanvasDCEx(CanvasWidth, CanvasHeight, 
  ReferenceDC: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetCanvasDCEx(FInstanceID, CanvasWidth, 
      CanvasHeight, ReferenceDC);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetCatalogInformation(
  const Key: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Key, SN1);
    Result := GetString(DebenuPDFLibraryGetCatalogInformation(FInstanceID, 
      SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetContentStreamToString(): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryGetContentStreamToString(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetCustomInformation(
  const Key: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Key, SN1);
    Result := GetString(DebenuPDFLibraryGetCustomInformation(FInstanceID, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetCustomKeys(Location: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetCustomKeys(FInstanceID, Location));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetDefaultPrinterName(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetDefaultPrinterName(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetDestName(DestID: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetDestName(FInstanceID, DestID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetDestPage(DestID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetDestPage(FInstanceID, DestID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetDestType(DestID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetDestType(FInstanceID, DestID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetDestValue(DestID, 
  ValueKey: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetDestValue(FInstanceID, DestID, ValueKey);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetDocJavaScript(
  const ActionType: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ActionType, SN1);
    Result := GetString(DebenuPDFLibraryGetDocJavaScript(FInstanceID, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetDocumentFileName(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetDocumentFileName(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetDocumentFileSize(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetDocumentFileSize(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetDocumentID(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetDocumentID(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetDocumentIdentifier(Part, 
  Options: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetDocumentIdentifier(FInstanceID, 
      Part, Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetDocumentMetadata(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetDocumentMetadata(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetDocumentRepaired(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetDocumentRepaired(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetDocumentResourceList(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetDocumentResourceList(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetEmbeddedFileContentToFile(Index: Integer; 
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryGetEmbeddedFileContentToFile(FInstanceID, Index, 
      SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetEmbeddedFileContentToString(
  Index: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryGetEmbeddedFileContentToString(FInstanceID, 
      Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetEmbeddedFileID(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetEmbeddedFileID(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetEmbeddedFileIntProperty(Index, 
  Tag: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetEmbeddedFileIntProperty(FInstanceID, Index, 
      Tag);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetEmbeddedFileStrProperty(Index, 
  Tag: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetEmbeddedFileStrProperty(FInstanceID, 
      Index, Tag));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetEncryptionFingerprint(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetEncryptionFingerprint(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFileMetadata(const InputFileName, 
  Password: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(Password, SN2);
    Result := GetString(DebenuPDFLibraryGetFileMetadata(FInstanceID, SP1, SP2));
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFirstChildOutline(
  OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFirstChildOutline(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFirstOutline(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFirstOutline(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFontEncoding(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFontEncoding(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFontFlags(
  FontFlagItemID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFontFlags(FInstanceID, FontFlagItemID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFontID(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFontID(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFontIsEmbedded(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFontIsEmbedded(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFontIsSubsetted(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFontIsSubsetted(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFontMetrics(MetricType: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFontMetrics(FInstanceID, MetricType);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFontObjectNumber(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFontObjectNumber(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldActionID(Index: Integer; 
  const TriggerEvent: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(TriggerEvent, SN1);
    Result := DebenuPDFLibraryGetFormFieldActionID(FInstanceID, Index, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldAlignment(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldAlignment(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldAnnotFlags(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldAnnotFlags(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldBackgroundColor(Index, 
  ColorComponent: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldBackgroundColor(FInstanceID, Index, 
      ColorComponent);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldBackgroundColorType(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldBackgroundColorType(FInstanceID, 
      Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldBorderColor(Index, 
  ColorComponent: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldBorderColor(FInstanceID, Index, 
      ColorComponent);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldBorderColorType(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldBorderColorType(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldBorderProperty(Index, 
  PropKey: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldBorderProperty(FInstanceID, Index, 
      PropKey);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldBorderStyle(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldBorderStyle(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldBound(Index, 
  Edge: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldBound(FInstanceID, Index, Edge);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldCaption(
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetFormFieldCaption(FInstanceID, 
      Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldCaptionEx(Index, 
  StringType: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetFormFieldCaptionEx(FInstanceID, 
      Index, StringType));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldCheckStyle(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldCheckStyle(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldChildTitle(
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetFormFieldChildTitle(FInstanceID, 
      Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldChoiceType(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldChoiceType(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldColor(Index, 
  ColorComponent: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldColor(FInstanceID, Index, 
      ColorComponent);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldComb(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldComb(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldDefaultValue(
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetFormFieldDefaultValue(FInstanceID, 
      Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldDescription(
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetFormFieldDescription(FInstanceID, 
      Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldFlags(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldFlags(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldFontName(
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetFormFieldFontName(FInstanceID, 
      Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldJavaScript(Index: Integer; 
  const ActionType: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ActionType, SN1);
    Result := GetString(DebenuPDFLibraryGetFormFieldJavaScript(FInstanceID, 
      Index, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldKidCount(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldKidCount(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldKidTempIndex(Index, 
  SubIndex: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldKidTempIndex(FInstanceID, Index, 
      SubIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldMaxLen(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldMaxLen(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldNoExport(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldNoExport(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldPage(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldPage(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldPrintable(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldPrintable(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldReadOnly(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldReadOnly(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldRequired(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldRequired(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldRichTextString(Index: Integer; 
  const Key: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Key, SN1);
    Result := GetString(DebenuPDFLibraryGetFormFieldRichTextString(FInstanceID, 
      Index, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldRotation(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldRotation(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldSubCount(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldSubCount(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldSubDisplayName(Index, 
  SubIndex: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetFormFieldSubDisplayName(FInstanceID, 
      Index, SubIndex));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldSubName(Index, 
  SubIndex: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetFormFieldSubName(FInstanceID, Index, 
      SubIndex));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldSubmitActionString(
  Index: Integer; const ActionType: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ActionType, SN1);
    Result := GetString(DebenuPDFLibraryGetFormFieldSubmitActionString(FInstanceID, 
      Index, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldTabOrder(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldTabOrder(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldTabOrderEx(Index, 
  Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldTabOrderEx(FInstanceID, Index, 
      Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldTextFlags(Index, 
  ValueKey: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldTextFlags(FInstanceID, Index, 
      ValueKey);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldTextSize(Index: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldTextSize(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldTitle(Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetFormFieldTitle(FInstanceID, Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldType(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldType(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldValue(Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetFormFieldValue(FInstanceID, Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldValueByTitle(
  const Title: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    Result := GetString(DebenuPDFLibraryGetFormFieldValueByTitle(FInstanceID, 
      SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldVisible(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFieldVisible(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFieldWebLink(Index: Integer; 
  const ActionType: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ActionType, SN1);
    Result := GetString(DebenuPDFLibraryGetFormFieldWebLink(FInstanceID, Index, 
      SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetFormFontCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetFormFontCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetFormFontName(
  FontIndex: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetFormFontName(FInstanceID, 
      FontIndex));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetGlobalJavaScript(
  const PackageName: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PackageName, SN1);
    Result := GetString(DebenuPDFLibraryGetGlobalJavaScript(FInstanceID, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetHTMLTextHeight(Width: Double; 
  const HTMLText: WideString): Double;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(HTMLText, SN1);
    Result := DebenuPDFLibraryGetHTMLTextHeight(FInstanceID, Width, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetHTMLTextLineCount(Width: Double; 
  const HTMLText: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(HTMLText, SN1);
    Result := DebenuPDFLibraryGetHTMLTextLineCount(FInstanceID, Width, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetHTMLTextWidth(MaxWidth: Double; 
  const HTMLText: WideString): Double;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(HTMLText, SN1);
    Result := DebenuPDFLibraryGetHTMLTextWidth(FInstanceID, MaxWidth, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetImageID(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetImageID(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetImageListCount(
  ImageListID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetImageListCount(FInstanceID, ImageListID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetImageListItemDataToString(ImageListID, 
  ImageIndex, Options: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryGetImageListItemDataToString(FInstanceID, 
      ImageListID, ImageIndex, Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetImageListItemDblProperty(ImageListID, 
  ImageIndex, PropertyID: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetImageListItemDblProperty(FInstanceID, 
      ImageListID, ImageIndex, PropertyID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetImageListItemFormatDesc(ImageListID, 
  ImageIndex, Options: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetImageListItemFormatDesc(FInstanceID, 
      ImageListID, ImageIndex, Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetImageListItemIntProperty(ImageListID, 
  ImageIndex, PropertyID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetImageListItemIntProperty(FInstanceID, 
      ImageListID, ImageIndex, PropertyID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetImageMeasureDict(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetImageMeasureDict(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetImagePageCount(
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryGetImagePageCount(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetImagePageCountFromString(
  const Source: AnsiString): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Source, SN1);
    Result := DebenuPDFLibraryGetImagePageCountFromString(FInstanceID, SP1);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetImagePtDataDict(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetImagePtDataDict(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetInformation(Key: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetInformation(FInstanceID, Key));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetInstalledFontsByCharset(CharsetIndex, 
  Options: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetInstalledFontsByCharset(FInstanceID, 
      CharsetIndex, Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetInstalledFontsByCodePage(CodePage, 
  Options: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetInstalledFontsByCodePage(FInstanceID, 
      CodePage, Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetKerning(
  const CharPair: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(CharPair, SN1);
    Result := DebenuPDFLibraryGetKerning(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetLatestPrinterNames(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetLatestPrinterNames(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetMaxObjectNumber(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetMaxObjectNumber(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetMeasureDictBoundsCount(
  MeasureDictID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetMeasureDictBoundsCount(FInstanceID, 
      MeasureDictID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetMeasureDictBoundsItem(MeasureDictID, 
  ItemIndex: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetMeasureDictBoundsItem(FInstanceID, 
      MeasureDictID, ItemIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetMeasureDictCoordinateSystem(
  MeasureDictID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetMeasureDictCoordinateSystem(FInstanceID, 
      MeasureDictID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetMeasureDictDCSDict(
  MeasureDictID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetMeasureDictDCSDict(FInstanceID, MeasureDictID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetMeasureDictGCSDict(
  MeasureDictID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetMeasureDictGCSDict(FInstanceID, MeasureDictID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetMeasureDictGPTSCount(
  MeasureDictID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetMeasureDictGPTSCount(FInstanceID, 
      MeasureDictID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetMeasureDictGPTSItem(MeasureDictID, 
  ItemIndex: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetMeasureDictGPTSItem(FInstanceID, 
      MeasureDictID, ItemIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetMeasureDictLPTSCount(
  MeasureDictID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetMeasureDictLPTSCount(FInstanceID, 
      MeasureDictID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetMeasureDictLPTSItem(MeasureDictID, 
  ItemIndex: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetMeasureDictLPTSItem(FInstanceID, 
      MeasureDictID, ItemIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetMeasureDictPDU(MeasureDictID, 
  UnitIndex: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetMeasureDictPDU(FInstanceID, MeasureDictID, 
      UnitIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetNamedDestination(
  const DestName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(DestName, SN1);
    Result := DebenuPDFLibraryGetNamedDestination(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetNextOutline(OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetNextOutline(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetObjectCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetObjectCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetObjectDecodeError(
  ObjectNumber: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetObjectDecodeError(FInstanceID, ObjectNumber);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetObjectToString(
  ObjectNumber: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryGetObjectToString(FInstanceID, 
      ObjectNumber));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetOpenActionDestination(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOpenActionDestination(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOpenActionJavaScript(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetOpenActionJavaScript(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetOptionalContentConfigCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOptionalContentConfigCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOptionalContentConfigLocked(
  OptionalContentConfigID, OptionalContentGroupID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOptionalContentConfigLocked(FInstanceID, 
      OptionalContentConfigID, OptionalContentGroupID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOptionalContentConfigOrderCount(
  OptionalContentConfigID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOptionalContentConfigOrderCount(FInstanceID, 
      OptionalContentConfigID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOptionalContentConfigOrderItemID(
  OptionalContentConfigID, ItemIndex: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOptionalContentConfigOrderItemID(FInstanceID, 
      OptionalContentConfigID, ItemIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOptionalContentConfigOrderItemLabel(
  OptionalContentConfigID, ItemIndex: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetOptionalContentConfigOrderItemLabel(FInstanceID, 
      OptionalContentConfigID, ItemIndex));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetOptionalContentConfigOrderItemLevel(
  OptionalContentConfigID, ItemIndex: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOptionalContentConfigOrderItemLevel(FInstanceID, 
      OptionalContentConfigID, ItemIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOptionalContentConfigOrderItemType(
  OptionalContentConfigID, ItemIndex: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOptionalContentConfigOrderItemType(FInstanceID, 
      OptionalContentConfigID, ItemIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOptionalContentConfigState(
  OptionalContentConfigID, OptionalContentGroupID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOptionalContentConfigState(FInstanceID, 
      OptionalContentConfigID, OptionalContentGroupID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOptionalContentGroupID(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOptionalContentGroupID(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOptionalContentGroupName(
  OptionalContentGroupID: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetOptionalContentGroupName(FInstanceID, 
      OptionalContentGroupID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetOptionalContentGroupPrintable(
  OptionalContentGroupID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOptionalContentGroupPrintable(FInstanceID, 
      OptionalContentGroupID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOptionalContentGroupVisible(
  OptionalContentGroupID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOptionalContentGroupVisible(FInstanceID, 
      OptionalContentGroupID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOrigin(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOrigin(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOutlineActionID(
  OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOutlineActionID(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOutlineColor(OutlineID, 
  ColorComponent: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOutlineColor(FInstanceID, OutlineID, 
      ColorComponent);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOutlineDest(OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOutlineDest(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOutlineID(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOutlineID(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOutlineJavaScript(
  OutlineID: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetOutlineJavaScript(FInstanceID, 
      OutlineID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetOutlineObjectNumber(
  OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOutlineObjectNumber(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOutlineOpenFile(
  OutlineID: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetOutlineOpenFile(FInstanceID, 
      OutlineID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetOutlinePage(OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOutlinePage(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOutlineStyle(OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetOutlineStyle(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetOutlineWebLink(
  OutlineID: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetOutlineWebLink(FInstanceID, 
      OutlineID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetPageBox(BoxType, 
  Dimension: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetPageBox(FInstanceID, BoxType, Dimension);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetPageColorSpaces(
  Options: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetPageColorSpaces(FInstanceID, 
      Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetPageContentToString(): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryGetPageContentToString(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetPageImageList(Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetPageImageList(FInstanceID, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetPageJavaScript(
  const ActionType: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ActionType, SN1);
    Result := GetString(DebenuPDFLibraryGetPageJavaScript(FInstanceID, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetPageLGIDictContent(
  DictIndex: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetPageLGIDictContent(FInstanceID, 
      DictIndex));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetPageLGIDictCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetPageLGIDictCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetPageLabel(Page: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetPageLabel(FInstanceID, Page));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetPageLayout(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetPageLayout(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetPageMetricsToString(StartPage, EndPage, 
  Options: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryGetPageMetricsToString(FInstanceID, 
      StartPage, EndPage, Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetPageMode(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetPageMode(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetPageText(
  ExtractOptions: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetPageText(FInstanceID, 
      ExtractOptions));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetPageUserUnit(): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetPageUserUnit(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetPageViewPortCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetPageViewPortCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetPageViewPortID(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetPageViewPortID(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetParentOutline(OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetParentOutline(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetPrevOutline(OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetPrevOutline(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetPrintPreviewBitmapToString(
  const PrinterName: WideString; PreviewPage, PrintOptions, MaxDimension, 
  PreviewOptions: Integer): AnsiString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PrinterName, SN1);
    Result := GetAnsiString(DebenuPDFLibraryGetPrintPreviewBitmapToString(FInstanceID, 
      SP1, PreviewPage, PrintOptions, MaxDimension, PreviewOptions));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetPrinterBins(
  const PrinterName: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PrinterName, SN1);
    Result := GetString(DebenuPDFLibraryGetPrinterBins(FInstanceID, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetPrinterDevModeToString(
  const PrinterName: WideString): AnsiString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PrinterName, SN1);
    Result := GetAnsiString(DebenuPDFLibraryGetPrinterDevModeToString(FInstanceID, 
      SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetPrinterMediaTypes(
  const PrinterName: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PrinterName, SN1);
    Result := GetString(DebenuPDFLibraryGetPrinterMediaTypes(FInstanceID, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetPrinterNames(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetPrinterNames(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetRenderScale(): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetRenderScale(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetSignProcessByteRange(SignProcessID, 
  ArrayPosition: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetSignProcessByteRange(FInstanceID, 
      SignProcessID, ArrayPosition);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetSignProcessResult(
  SignProcessID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetSignProcessResult(FInstanceID, SignProcessID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetStringListCount(
  StringListID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetStringListCount(FInstanceID, StringListID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetStringListItem(StringListID, 
  ItemIndex: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetStringListItem(FInstanceID, 
      StringListID, ItemIndex));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetTabOrderMode(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetTabOrderMode(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetTableCellDblProperty(TableID, RowNumber, 
  ColumnNumber, Tag: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTableCellDblProperty(FInstanceID, TableID, 
      RowNumber, ColumnNumber, Tag);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTableCellIntProperty(TableID, RowNumber, 
  ColumnNumber, Tag: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTableCellIntProperty(FInstanceID, TableID, 
      RowNumber, ColumnNumber, Tag);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTableCellStrProperty(TableID, RowNumber, 
  ColumnNumber, Tag: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetTableCellStrProperty(FInstanceID, 
      TableID, RowNumber, ColumnNumber, Tag));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetTableColumnCount(
  TableID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTableColumnCount(FInstanceID, TableID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTableLastDrawnRow(
  TableID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTableLastDrawnRow(FInstanceID, TableID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTableRowCount(TableID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTableRowCount(FInstanceID, TableID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTempPath(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetTempPath(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetTextAscent(): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTextAscent(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTextBlockAsString(TextBlockListID, 
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetTextBlockAsString(FInstanceID, 
      TextBlockListID, Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetTextBlockBound(TextBlockListID, Index, 
  BoundIndex: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTextBlockBound(FInstanceID, TextBlockListID, 
      Index, BoundIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTextBlockCharWidth(TextBlockListID, Index, 
  CharIndex: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTextBlockCharWidth(FInstanceID, 
      TextBlockListID, Index, CharIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTextBlockColor(TextBlockListID, Index, 
  ColorComponent: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTextBlockColor(FInstanceID, TextBlockListID, 
      Index, ColorComponent);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTextBlockColorType(TextBlockListID, 
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTextBlockColorType(FInstanceID, 
      TextBlockListID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTextBlockCount(
  TextBlockListID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTextBlockCount(FInstanceID, TextBlockListID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTextBlockFontName(TextBlockListID, 
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetTextBlockFontName(FInstanceID, 
      TextBlockListID, Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetTextBlockFontSize(TextBlockListID, 
  Index: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTextBlockFontSize(FInstanceID, 
      TextBlockListID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTextBlockText(TextBlockListID, 
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetTextBlockText(FInstanceID, 
      TextBlockListID, Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetTextBound(Edge: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTextBound(FInstanceID, Edge);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTextDescent(): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTextDescent(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTextHeight(): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTextHeight(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTextSize(): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetTextSize(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetTextWidth(const Text: WideString): Double;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryGetTextWidth(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetUnicodeCharactersFromEncoding(
  Encoding: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetUnicodeCharactersFromEncoding(FInstanceID, 
      Encoding));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetViewPortBBox(ViewPortID, 
  Dimension: Integer): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetViewPortBBox(FInstanceID, ViewPortID, 
      Dimension);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetViewPortMeasureDict(
  ViewPortID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetViewPortMeasureDict(FInstanceID, ViewPortID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetViewPortName(
  ViewPortID: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetViewPortName(FInstanceID, 
      ViewPortID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetViewPortPtDataDict(
  ViewPortID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetViewPortPtDataDict(FInstanceID, ViewPortID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetViewerPreferences(
  Option: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetViewerPreferences(FInstanceID, Option);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetWrappedText(Width: Double; 
  const Delimiter, Text: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Delimiter, SN1);
    SP2 := StringParm(Text, SN2);
    Result := GetString(DebenuPDFLibraryGetWrappedText(FInstanceID, Width, SP1, 
      SP2));
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetWrappedTextBreakString(Width: Double; 
  const Delimiter, Text: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Delimiter, SN1);
    SP2 := StringParm(Text, SN2);
    Result := GetString(DebenuPDFLibraryGetWrappedTextBreakString(FInstanceID, 
      Width, SP1, SP2));
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetWrappedTextHeight(Width: Double; 
  const Text: WideString): Double;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryGetWrappedTextHeight(FInstanceID, Width, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetWrappedTextLineCount(Width: Double; 
  const Text: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Text, SN1);
    Result := DebenuPDFLibraryGetWrappedTextLineCount(FInstanceID, Width, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetXFAFormFieldCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGetXFAFormFieldCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GetXFAFormFieldName(
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGetXFAFormFieldName(FInstanceID, 
      Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetXFAFormFieldNames(
  const Delimiter: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Delimiter, SN1);
    Result := GetString(DebenuPDFLibraryGetXFAFormFieldNames(FInstanceID, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetXFAFormFieldValue(
  const XFAFieldName: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(XFAFieldName, SN1);
    Result := GetString(DebenuPDFLibraryGetXFAFormFieldValue(FInstanceID, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GetXFAToString(Options: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryGetXFAToString(FInstanceID, 
      Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.GlobalJavaScriptCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryGlobalJavaScriptCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.GlobalJavaScriptPackageName(
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryGlobalJavaScriptPackageName(FInstanceID, 
      Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.HasFontResources(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryHasFontResources(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.HasPageBox(BoxType: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryHasPageBox(FInstanceID, BoxType);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.HidePage(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryHidePage(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ImageCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryImageCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ImageFillColor(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryImageFillColor(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ImageHeight(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryImageHeight(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ImageHorizontalResolution(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryImageHorizontalResolution(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ImageResolutionUnits(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryImageResolutionUnits(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ImageType(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryImageType(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ImageVerticalResolution(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryImageVerticalResolution(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ImageWidth(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryImageWidth(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ImportEMFFromFile(const FileName: WideString; 
  FontOptions, GeneralOptions: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryImportEMFFromFile(FInstanceID, SP1, FontOptions, 
      GeneralOptions);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.InsertPages(StartPage, 
  PageCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryInsertPages(FInstanceID, StartPage, PageCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.InsertTableColumns(TableID, Position, 
  NewColumnCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryInsertTableColumns(FInstanceID, TableID, 
      Position, NewColumnCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.InsertTableRows(TableID, Position, 
  NewRowCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryInsertTableRows(FInstanceID, TableID, Position, 
      NewRowCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.IsAnnotFormField(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryIsAnnotFormField(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.IsLinearized(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryIsLinearized(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.IsTaggedPDF(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryIsTaggedPDF(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.LastErrorCode(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryLastErrorCode(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.LastRenderError(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryLastRenderError(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.LibraryVersion(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryLibraryVersion(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.LibraryVersionEx(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryLibraryVersionEx(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.LicenseInfo(): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryLicenseInfo(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.LinearizeFile(const InputFileName, Password, 
  OutputFileName: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
  SP3: PWideChar;
  SN3: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(Password, SN2);
    SP3 := StringParm(OutputFileName, SN3);
    Result := DebenuPDFLibraryLinearizeFile(FInstanceID, SP1, SP2, SP3, 
      Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
    if (SN3) then ReleaseBuffer(SP3);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.LoadFromCanvasDC(DPI: Double; 
  Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryLoadFromCanvasDC(FInstanceID, DPI, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.LoadFromFile(const FileName, 
  Password: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    SP2 := StringParm(Password, SN2);
    Result := DebenuPDFLibraryLoadFromFile(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.LoadFromString(const Source: AnsiString; 
  const Password: WideString): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Source, SN1);
    SP2 := StringParm(Password, SN2);
    Result := DebenuPDFLibraryLoadFromString(FInstanceID, SP1, SP2);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.LoadState(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryLoadState(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.MergeDocument(DocumentID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryMergeDocument(FInstanceID, DocumentID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.MergeFileList(const ListName, 
  OutputFileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ListName, SN1);
    SP2 := StringParm(OutputFileName, SN2);
    Result := DebenuPDFLibraryMergeFileList(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.MergeFileListFast(const ListName, 
  OutputFileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ListName, SN1);
    SP2 := StringParm(OutputFileName, SN2);
    Result := DebenuPDFLibraryMergeFileListFast(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.MergeFiles(const FirstFileName, 
  SecondFileName, OutputFileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
  SP3: PWideChar;
  SN3: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FirstFileName, SN1);
    SP2 := StringParm(SecondFileName, SN2);
    SP3 := StringParm(OutputFileName, SN3);
    Result := DebenuPDFLibraryMergeFiles(FInstanceID, SP1, SP2, SP3);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
    if (SN3) then ReleaseBuffer(SP3);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.MergeTableCells(TableID, FirstRow, 
  FirstColumn, LastRow, LastColumn: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryMergeTableCells(FInstanceID, TableID, FirstRow, 
      FirstColumn, LastRow, LastColumn);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.MoveContentStream(FromPosition, 
  ToPosition: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryMoveContentStream(FInstanceID, FromPosition, 
      ToPosition);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.MoveOutlineAfter(OutlineID, 
  SiblingID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryMoveOutlineAfter(FInstanceID, OutlineID, 
      SiblingID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.MoveOutlineBefore(OutlineID, 
  SiblingID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryMoveOutlineBefore(FInstanceID, OutlineID, 
      SiblingID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.MovePage(NewPosition: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryMovePage(FInstanceID, NewPosition);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.MovePath(NewX, NewY: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryMovePath(FInstanceID, NewX, NewY);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.MultiplyScale(MultScaleBy: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryMultiplyScale(FInstanceID, MultScaleBy);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewChildFormField(Index: Integer; 
  const Title: WideString; FieldType: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    Result := DebenuPDFLibraryNewChildFormField(FInstanceID, Index, SP1, 
      FieldType);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewContentStream(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryNewContentStream(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewCustomPrinter(
  const OriginalPrinterName: WideString): WideString;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(OriginalPrinterName, SN1);
    Result := GetString(DebenuPDFLibraryNewCustomPrinter(FInstanceID, SP1));
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.NewDestination(DestPage, Zoom, 
  DestType: Integer; Left, Top, Right, Bottom: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryNewDestination(FInstanceID, DestPage, Zoom, 
      DestType, Left, Top, Right, Bottom);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewDocument(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryNewDocument(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewFormField(const Title: WideString; 
  FieldType: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    Result := DebenuPDFLibraryNewFormField(FInstanceID, SP1, FieldType);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewInternalPrinterObject(
  Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryNewInternalPrinterObject(FInstanceID, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewNamedDestination(
  const DestName: WideString; DestID: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(DestName, SN1);
    Result := DebenuPDFLibraryNewNamedDestination(FInstanceID, SP1, DestID);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewOptionalContentGroup(
  const GroupName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(GroupName, SN1);
    Result := DebenuPDFLibraryNewOptionalContentGroup(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewOutline(Parent: Integer; 
  const Title: WideString; DestPage: Integer; DestPosition: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    Result := DebenuPDFLibraryNewOutline(FInstanceID, Parent, SP1, DestPage, 
      DestPosition);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewPage(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryNewPage(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewPageFromCanvasDC(DPI: Double; 
  Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryNewPageFromCanvasDC(FInstanceID, DPI, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewPages(PageCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryNewPages(FInstanceID, PageCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewPostScriptXObject(
  const PS: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PS, SN1);
    Result := DebenuPDFLibraryNewPostScriptXObject(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewRGBAxialShader(
  const ShaderName: WideString; StartX, StartY, StartRed, StartGreen, 
  StartBlue, EndX, EndY, EndRed, EndGreen, EndBlue: Double; 
  Extend: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ShaderName, SN1);
    Result := DebenuPDFLibraryNewRGBAxialShader(FInstanceID, SP1, StartX, 
      StartY, StartRed, StartGreen, StartBlue, EndX, EndY, EndRed, EndGreen, 
      EndBlue, Extend);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewSignProcessFromFile(const InputFile, 
  Password: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFile, SN1);
    SP2 := StringParm(Password, SN2);
    Result := DebenuPDFLibraryNewSignProcessFromFile(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewSignProcessFromString(
  const Source: AnsiString; const Password: WideString): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Source, SN1);
    SP2 := StringParm(Password, SN2);
    Result := DebenuPDFLibraryNewSignProcessFromString(FInstanceID, SP1, SP2);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewStaticOutline(Parent: Integer; 
  const Title: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    Result := DebenuPDFLibraryNewStaticOutline(FInstanceID, Parent, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NewTilingPatternFromCapturedPage(
  const PatternName: WideString; CaptureID: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PatternName, SN1);
    Result := DebenuPDFLibraryNewTilingPatternFromCapturedPage(FInstanceID, 
      SP1, CaptureID);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NoEmbedFontListAdd(
  const FontName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FontName, SN1);
    Result := DebenuPDFLibraryNoEmbedFontListAdd(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NoEmbedFontListCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryNoEmbedFontListCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NoEmbedFontListGet(
  Index: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryNoEmbedFontListGet(FInstanceID, Index));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.NoEmbedFontListRemoveAll(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryNoEmbedFontListRemoveAll(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NoEmbedFontListRemoveIndex(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryNoEmbedFontListRemoveIndex(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NoEmbedFontListRemoveName(
  const FontName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FontName, SN1);
    Result := DebenuPDFLibraryNoEmbedFontListRemoveName(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.NormalizePage(
  NormalizeOptions: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryNormalizePage(FInstanceID, NormalizeOptions);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.OpenOutline(OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryOpenOutline(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.OptionalContentGroupCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryOptionalContentGroupCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.OutlineCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryOutlineCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.OutlineTitle(OutlineID: Integer): WideString;
begin
  if FLibraryLoaded then
  begin
    Result := GetString(DebenuPDFLibraryOutlineTitle(FInstanceID, OutlineID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.PageCount(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryPageCount(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.PageHasFontResources(
  PageNumber: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryPageHasFontResources(FInstanceID, PageNumber);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.PageHeight(): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryPageHeight(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.PageJavaScriptAction(const ActionType, 
  JavaScript: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ActionType, SN1);
    SP2 := StringParm(JavaScript, SN2);
    Result := DebenuPDFLibraryPageJavaScriptAction(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.PageRotation(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryPageRotation(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.PageWidth(): Double;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryPageWidth(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.PrintDocument(const PrinterName: WideString; 
  StartPage, EndPage, Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PrinterName, SN1);
    Result := DebenuPDFLibraryPrintDocument(FInstanceID, SP1, StartPage, 
      EndPage, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.PrintDocumentToFile(
  const PrinterName: WideString; StartPage, EndPage, Options: Integer; 
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PrinterName, SN1);
    SP2 := StringParm(FileName, SN2);
    Result := DebenuPDFLibraryPrintDocumentToFile(FInstanceID, SP1, StartPage, 
      EndPage, Options, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.PrintMode(Mode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryPrintMode(FInstanceID, Mode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.PrintOptions(PageScaling, 
  AutoRotateCenter: Integer; const Title: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    Result := DebenuPDFLibraryPrintOptions(FInstanceID, PageScaling, 
      AutoRotateCenter, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.PrintPages(const PrinterName, 
  PageRanges: WideString; Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PrinterName, SN1);
    SP2 := StringParm(PageRanges, SN2);
    Result := DebenuPDFLibraryPrintPages(FInstanceID, SP1, SP2, Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.PrintPagesToFile(const PrinterName, 
  PageRanges: WideString; Options: Integer; 
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
  SP3: PWideChar;
  SN3: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PrinterName, SN1);
    SP2 := StringParm(PageRanges, SN2);
    SP3 := StringParm(FileName, SN3);
    Result := DebenuPDFLibraryPrintPagesToFile(FInstanceID, SP1, SP2, Options, 
      SP3);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
    if (SN3) then ReleaseBuffer(SP3);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ReleaseImage(ImageID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryReleaseImage(FInstanceID, ImageID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ReleaseImageList(
  ImageListID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryReleaseImageList(FInstanceID, ImageListID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ReleaseSignProcess(
  SignProcessID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryReleaseSignProcess(FInstanceID, SignProcessID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ReleaseStringList(
  StringListID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryReleaseStringList(FInstanceID, StringListID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ReleaseTextBlocks(
  TextBlockListID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryReleaseTextBlocks(FInstanceID, TextBlockListID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveAppearanceStream(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRemoveAppearanceStream(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveCustomInformation(
  const Key: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Key, SN1);
    Result := DebenuPDFLibraryRemoveCustomInformation(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveDocument(DocumentID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRemoveDocument(FInstanceID, DocumentID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveEmbeddedFile(Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRemoveEmbeddedFile(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveFormFieldBackgroundColor(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRemoveFormFieldBackgroundColor(FInstanceID, 
      Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveFormFieldBorderColor(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRemoveFormFieldBorderColor(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveFormFieldChoiceSub(Index: Integer; 
  const SubName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(SubName, SN1);
    Result := DebenuPDFLibraryRemoveFormFieldChoiceSub(FInstanceID, Index, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveGlobalJavaScript(
  const PackageName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PackageName, SN1);
    Result := DebenuPDFLibraryRemoveGlobalJavaScript(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveOpenAction(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRemoveOpenAction(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveOutline(OutlineID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRemoveOutline(FInstanceID, OutlineID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemovePageBox(BoxType: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRemovePageBox(FInstanceID, BoxType);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveSharedContentStreams(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRemoveSharedContentStreams(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveStyle(
  const StyleName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(StyleName, SN1);
    Result := DebenuPDFLibraryRemoveStyle(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveUsageRights(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRemoveUsageRights(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RemoveXFAEntries(Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRemoveXFAEntries(FInstanceID, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RenderAsMultipageTIFFToFile(DPI: Double; 
  const PageRanges: WideString; ImageOptions, OutputOptions: Integer; 
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PageRanges, SN1);
    SP2 := StringParm(FileName, SN2);
    Result := DebenuPDFLibraryRenderAsMultipageTIFFToFile(FInstanceID, DPI, 
      SP1, ImageOptions, OutputOptions, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RenderDocumentToFile(DPI: Double; StartPage, 
  EndPage, Options: Integer; const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryRenderDocumentToFile(FInstanceID, DPI, StartPage, 
      EndPage, Options, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RenderPageToDC(DPI: Double; Page: Integer; 
  DC: HDC): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRenderPageToDC(FInstanceID, DPI, Page, DC);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RenderPageToDCClip(DPI: Double; Page, 
  DC: Integer; const Clip: AnsiString): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Clip, SN1);
    Result := DebenuPDFLibraryRenderPageToDCClip(FInstanceID, DPI, Page, DC, 
      SP1);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RenderPageToFile(DPI: Double; Page, 
  Options: Integer; const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibraryRenderPageToFile(FInstanceID, DPI, Page, Options, 
      SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RenderPageToString(DPI: Double; Page, 
  Options: Integer): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibraryRenderPageToString(FInstanceID, 
      DPI, Page, Options));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.ReplaceFonts(Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryReplaceFonts(FInstanceID, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ReplaceImage(OriginalImageID, 
  NewImageID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryReplaceImage(FInstanceID, OriginalImageID, 
      NewImageID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.ReplaceTag(const Tag, 
  NewValue: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Tag, SN1);
    SP2 := StringParm(NewValue, SN2);
    Result := DebenuPDFLibraryReplaceTag(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RequestPrinterStatus(
  StatusCommand: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRequestPrinterStatus(FInstanceID, StatusCommand);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RetrieveCustomDataToFile(const Key, 
  FileName: WideString; Location: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Key, SN1);
    SP2 := StringParm(FileName, SN2);
    Result := DebenuPDFLibraryRetrieveCustomDataToFile(FInstanceID, SP1, SP2, 
      Location);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RetrieveCustomDataToString(
  const Key: AnsiString; Location: Integer): AnsiString;
var
  SP1: PAnsiChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Key, SN1);
    Result := GetAnsiString(DebenuPDFLibraryRetrieveCustomDataToString(FInstanceID, 
      SP1, Location));
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.ReverseImage(Reset: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryReverseImage(FInstanceID, Reset);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.RotatePage(PageRotation: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryRotatePage(FInstanceID, PageRotation);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SaveFontToFile(
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibrarySaveFontToFile(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SaveImageListItemDataToFile(ImageListID, 
  ImageIndex, Options: Integer; const ImageFileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ImageFileName, SN1);
    Result := DebenuPDFLibrarySaveImageListItemDataToFile(FInstanceID, 
      ImageListID, ImageIndex, Options, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SaveImageToFile(
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibrarySaveImageToFile(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SaveImageToString(): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibrarySaveImageToString(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.SaveState(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySaveState(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SaveStyle(
  const StyleName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(StyleName, SN1);
    Result := DebenuPDFLibrarySaveStyle(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SaveToFile(
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibrarySaveToFile(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SaveToString(): AnsiString;
begin
  if FLibraryLoaded then
  begin
    Result := GetAnsiString(DebenuPDFLibrarySaveToString(FInstanceID));
  end else
    Result := '';
end;

function TDebenuPDFLibraryDLL1114.SecurityInfo(SecurityItem: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySecurityInfo(FInstanceID, SecurityItem);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SelectContentStream(
  NewIndex: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySelectContentStream(FInstanceID, NewIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SelectDocument(DocumentID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySelectDocument(FInstanceID, DocumentID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SelectFont(FontID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySelectFont(FInstanceID, FontID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SelectImage(ImageID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySelectImage(FInstanceID, ImageID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SelectPage(PageNumber: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySelectPage(FInstanceID, PageNumber);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SelectRenderer(RendererID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySelectRenderer(FInstanceID, RendererID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SelectedDocument(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySelectedDocument(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SelectedFont(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySelectedFont(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SelectedImage(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySelectedImage(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SelectedPage(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySelectedPage(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetActionURL(ActionID: Integer; 
  const NewURL: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewURL, SN1);
    Result := DebenuPDFLibrarySetActionURL(FInstanceID, ActionID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetAnnotBorderColor(Index: Integer; Red, 
  Green, Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetAnnotBorderColor(FInstanceID, Index, Red, 
      Green, Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetAnnotBorderStyle(Index: Integer; 
  Width: Double; Style: Integer; DashOn, DashOff: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetAnnotBorderStyle(FInstanceID, Index, Width, 
      Style, DashOn, DashOff);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetAnnotContents(Index: Integer; 
  const NewContents: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewContents, SN1);
    Result := DebenuPDFLibrarySetAnnotContents(FInstanceID, Index, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetAnnotDblProperty(Index, Tag: Integer; 
  NewValue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetAnnotDblProperty(FInstanceID, Index, Tag, 
      NewValue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetAnnotIntProperty(Index, Tag, 
  NewValue: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetAnnotIntProperty(FInstanceID, Index, Tag, 
      NewValue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetAnnotOptional(Index, 
  OptionalContentGroupID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetAnnotOptional(FInstanceID, Index, 
      OptionalContentGroupID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetAnnotQuadPoints(Index, 
  QuadNumber: Integer; X1, Y1, X2, Y2, X3, Y3, X4, Y4: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetAnnotQuadPoints(FInstanceID, Index, 
      QuadNumber, X1, Y1, X2, Y2, X3, Y3, X4, Y4);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetAnnotRect(Index: Integer; Left, Top, 
  Width, Height: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetAnnotRect(FInstanceID, Index, Left, Top, 
      Width, Height);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetAnnotStrProperty(Index, Tag: Integer; 
  const NewValue: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewValue, SN1);
    Result := DebenuPDFLibrarySetAnnotStrProperty(FInstanceID, Index, Tag, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetAnsiMode(NewAnsiMode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetAnsiMode(FInstanceID, NewAnsiMode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetAppendInputFromString(
  const Source: AnsiString): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Source, SN1);
    Result := DebenuPDFLibrarySetAppendInputFromString(FInstanceID, SP1);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetBaseURL(
  const NewBaseURL: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewBaseURL, SN1);
    Result := DebenuPDFLibrarySetBaseURL(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetBlendMode(BlendMode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetBlendMode(FInstanceID, BlendMode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetBreakString(
  const NewBreakString: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewBreakString, SN1);
    Result := DebenuPDFLibrarySetBreakString(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetCSDictEPSG(CSDictID, 
  NewEPSG: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetCSDictEPSG(FInstanceID, CSDictID, NewEPSG);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetCSDictType(CSDictID, 
  NewDictType: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetCSDictType(FInstanceID, CSDictID, NewDictType);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetCSDictWKT(CSDictID: Integer; 
  const NewWKT: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewWKT, SN1);
    Result := DebenuPDFLibrarySetCSDictWKT(FInstanceID, CSDictID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetCairoFileName(
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibrarySetCairoFileName(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetCapturedPageOptional(CaptureID, 
  OptionalContentGroupID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetCapturedPageOptional(FInstanceID, CaptureID, 
      OptionalContentGroupID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetCapturedPageTransparencyGroup(CaptureID, 
  CS, Isolate, Knockout: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetCapturedPageTransparencyGroup(FInstanceID, 
      CaptureID, CS, Isolate, Knockout);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetCatalogInformation(const Key, 
  NewValue: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Key, SN1);
    SP2 := StringParm(NewValue, SN2);
    Result := DebenuPDFLibrarySetCatalogInformation(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetCharWidth(CharCode, 
  NewWidth: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetCharWidth(FInstanceID, CharCode, NewWidth);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetClippingPath(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetClippingPath(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetClippingPathEvenOdd(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetClippingPathEvenOdd(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetCompatibility(CompatibilityItem, 
  CompatibilityMode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetCompatibility(FInstanceID, CompatibilityItem, 
      CompatibilityMode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetContentStreamFromString(
  const Source: AnsiString): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Source, SN1);
    Result := DebenuPDFLibrarySetContentStreamFromString(FInstanceID, SP1);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetContentStreamOptional(
  OptionalContentGroupID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetContentStreamOptional(FInstanceID, 
      OptionalContentGroupID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetCropBox(Left, Top, Width, 
  Height: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetCropBox(FInstanceID, Left, Top, Width, Height);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetCustomInformation(const Key, 
  NewValue: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Key, SN1);
    SP2 := StringParm(NewValue, SN2);
    Result := DebenuPDFLibrarySetCustomInformation(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetCustomLineDash(
  const DashPattern: WideString; DashPhase: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(DashPattern, SN1);
    Result := DebenuPDFLibrarySetCustomLineDash(FInstanceID, SP1, DashPhase);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetDPLRFileName(
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibrarySetDPLRFileName(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetDecodeMode(
  NewDecodeMode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetDecodeMode(FInstanceID, NewDecodeMode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetDestProperties(DestID, Zoom, 
  DestType: Integer; Left, Top, Right, Bottom: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetDestProperties(FInstanceID, DestID, Zoom, 
      DestType, Left, Top, Right, Bottom);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetDestValue(DestID, ValueKey: Integer; 
  NewValue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetDestValue(FInstanceID, DestID, ValueKey, 
      NewValue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetDocumentMetadata(
  const XMP: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(XMP, SN1);
    Result := DebenuPDFLibrarySetDocumentMetadata(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetEmbeddedFileStrProperty(Index, 
  Tag: Integer; const NewValue: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewValue, SN1);
    Result := DebenuPDFLibrarySetEmbeddedFileStrProperty(FInstanceID, Index, 
      Tag, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFillColor(Red, Green, 
  Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFillColor(FInstanceID, Red, Green, Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFillColorCMYK(C, M, Y, K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFillColorCMYK(FInstanceID, C, M, Y, K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFillColorSep(const ColorName: WideString; 
  Tint: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ColorName, SN1);
    Result := DebenuPDFLibrarySetFillColorSep(FInstanceID, SP1, Tint);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFillShader(
  const ShaderName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ShaderName, SN1);
    Result := DebenuPDFLibrarySetFillShader(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFillTilingPattern(
  const PatternName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PatternName, SN1);
    Result := DebenuPDFLibrarySetFillTilingPattern(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFindImagesMode(
  NewFindImagesMode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFindImagesMode(FInstanceID, NewFindImagesMode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFontEncoding(Encoding: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFontEncoding(FInstanceID, Encoding);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFontFlags(Fixed, Serif, Symbolic, Script, 
  Italic, AllCap, SmallCap, ForceBold: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFontFlags(FInstanceID, Fixed, Serif, Symbolic, 
      Script, Italic, AllCap, SmallCap, ForceBold);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldAlignment(Index, 
  Alignment: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldAlignment(FInstanceID, Index, 
      Alignment);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldAnnotFlags(Index, 
  NewFlags: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldAnnotFlags(FInstanceID, Index, 
      NewFlags);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldBackgroundColor(Index: Integer; 
  Red, Green, Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldBackgroundColor(FInstanceID, Index, 
      Red, Green, Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldBackgroundColorCMYK(
  Index: Integer; C, M, Y, K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldBackgroundColorCMYK(FInstanceID, 
      Index, C, M, Y, K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldBackgroundColorGray(
  Index: Integer; Gray: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldBackgroundColorGray(FInstanceID, 
      Index, Gray);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldBackgroundColorSep(
  Index: Integer; const ColorName: WideString; Tint: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ColorName, SN1);
    Result := DebenuPDFLibrarySetFormFieldBackgroundColorSep(FInstanceID, 
      Index, SP1, Tint);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldBorderColor(Index: Integer; Red, 
  Green, Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldBorderColor(FInstanceID, Index, Red, 
      Green, Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldBorderColorCMYK(Index: Integer; 
  C, M, Y, K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldBorderColorCMYK(FInstanceID, Index, 
      C, M, Y, K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldBorderColorGray(Index: Integer; 
  Gray: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldBorderColorGray(FInstanceID, Index, 
      Gray);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldBorderColorSep(Index: Integer; 
  const ColorName: WideString; Tint: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ColorName, SN1);
    Result := DebenuPDFLibrarySetFormFieldBorderColorSep(FInstanceID, Index, 
      SP1, Tint);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldBorderStyle(Index: Integer; 
  Width: Double; Style: Integer; DashOn, DashOff: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldBorderStyle(FInstanceID, Index, 
      Width, Style, DashOn, DashOff);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldBounds(Index: Integer; Left, Top, 
  Width, Height: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldBounds(FInstanceID, Index, Left, Top, 
      Width, Height);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldCalcOrder(Index, 
  Order: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldCalcOrder(FInstanceID, Index, Order);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldCaption(Index: Integer; 
  const NewCaption: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewCaption, SN1);
    Result := DebenuPDFLibrarySetFormFieldCaption(FInstanceID, Index, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldCheckStyle(Index, CheckStyle, 
  Position: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldCheckStyle(FInstanceID, Index, 
      CheckStyle, Position);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldChildTitle(Index: Integer; 
  const NewTitle: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewTitle, SN1);
    Result := DebenuPDFLibrarySetFormFieldChildTitle(FInstanceID, Index, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldChoiceSub(Index, 
  SubIndex: Integer; const SubName, DisplayName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(SubName, SN1);
    SP2 := StringParm(DisplayName, SN2);
    Result := DebenuPDFLibrarySetFormFieldChoiceSub(FInstanceID, Index, 
      SubIndex, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldChoiceType(Index, 
  ChoiceType: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldChoiceType(FInstanceID, Index, 
      ChoiceType);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldColor(Index: Integer; Red, Green, 
  Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldColor(FInstanceID, Index, Red, Green, 
      Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldColorCMYK(Index: Integer; C, M, 
  Y, K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldColorCMYK(FInstanceID, Index, C, M, 
      Y, K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldColorSep(Index: Integer; 
  const ColorName: WideString; Tint: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ColorName, SN1);
    Result := DebenuPDFLibrarySetFormFieldColorSep(FInstanceID, Index, SP1, 
      Tint);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldComb(Index, 
  Comb: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldComb(FInstanceID, Index, Comb);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldDefaultValue(Index: Integer; 
  const NewDefaultValue: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewDefaultValue, SN1);
    Result := DebenuPDFLibrarySetFormFieldDefaultValue(FInstanceID, Index, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldDescription(Index: Integer; 
  const NewDescription: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewDescription, SN1);
    Result := DebenuPDFLibrarySetFormFieldDescription(FInstanceID, Index, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldFlags(Index, 
  NewFlags: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldFlags(FInstanceID, Index, NewFlags);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldFont(Index, 
  FontIndex: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldFont(FInstanceID, Index, FontIndex);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldHighlightMode(Index, 
  NewMode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldHighlightMode(FInstanceID, Index, 
      NewMode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldIcon(Index, IconType, 
  CaptureID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldIcon(FInstanceID, Index, IconType, 
      CaptureID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldIconStyle(Index, Placement, 
  Scale, ScaleType, HorizontalShift, VerticalShift: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldIconStyle(FInstanceID, Index, 
      Placement, Scale, ScaleType, HorizontalShift, VerticalShift);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldMaxLen(Index, 
  NewMaxLen: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldMaxLen(FInstanceID, Index, NewMaxLen);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldNoExport(Index, 
  NoExport: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldNoExport(FInstanceID, Index, 
      NoExport);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldOptional(Index, 
  OptionalContentGroupID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldOptional(FInstanceID, Index, 
      OptionalContentGroupID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldPage(Index, 
  NewPage: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldPage(FInstanceID, Index, NewPage);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldPrintable(Index, 
  Printable: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldPrintable(FInstanceID, Index, 
      Printable);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldReadOnly(Index, 
  ReadOnly: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldReadOnly(FInstanceID, Index, 
      ReadOnly);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldRequired(Index, 
  Required: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldRequired(FInstanceID, Index, 
      Required);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldResetAction(Index: Integer; 
  const ActionType: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ActionType, SN1);
    Result := DebenuPDFLibrarySetFormFieldResetAction(FInstanceID, Index, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldRichTextString(Index: Integer; 
  const Key, NewValue: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Key, SN1);
    SP2 := StringParm(NewValue, SN2);
    Result := DebenuPDFLibrarySetFormFieldRichTextString(FInstanceID, Index, 
      SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldRotation(Index, 
  Angle: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldRotation(FInstanceID, Index, Angle);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldSignatureImage(Index, ImageID, 
  Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldSignatureImage(FInstanceID, Index, 
      ImageID, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldStandardFont(Index, 
  StandardFontID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldStandardFont(FInstanceID, Index, 
      StandardFontID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldSubmitAction(Index: Integer; 
  const ActionType, Link: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ActionType, SN1);
    SP2 := StringParm(Link, SN2);
    Result := DebenuPDFLibrarySetFormFieldSubmitAction(FInstanceID, Index, SP1, 
      SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldSubmitActionEx(Index: Integer; 
  const ActionType, Link: WideString; Flags: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ActionType, SN1);
    SP2 := StringParm(Link, SN2);
    Result := DebenuPDFLibrarySetFormFieldSubmitActionEx(FInstanceID, Index, 
      SP1, SP2, Flags);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldTabOrder(Index, 
  Order: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldTabOrder(FInstanceID, Index, Order);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldTextFlags(Index, Multiline, 
  Password, FileSelect, DoNotSpellCheck, DoNotScroll: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldTextFlags(FInstanceID, Index, 
      Multiline, Password, FileSelect, DoNotSpellCheck, DoNotScroll);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldTextSize(Index: Integer; 
  NewTextSize: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldTextSize(FInstanceID, Index, 
      NewTextSize);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldTitle(Index: Integer; 
  const NewTitle: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewTitle, SN1);
    Result := DebenuPDFLibrarySetFormFieldTitle(FInstanceID, Index, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldValue(Index: Integer; 
  const NewValue: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewValue, SN1);
    Result := DebenuPDFLibrarySetFormFieldValue(FInstanceID, Index, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldValueByTitle(const Title, 
  NewValue: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Title, SN1);
    SP2 := StringParm(NewValue, SN2);
    Result := DebenuPDFLibrarySetFormFieldValueByTitle(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetFormFieldVisible(Index, 
  Visible: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetFormFieldVisible(FInstanceID, Index, Visible);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetGDIPlusFileName(
  const DLLFileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(DLLFileName, SN1);
    Result := DebenuPDFLibrarySetGDIPlusFileName(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetGDIPlusOptions(OptionID, 
  NewValue: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetGDIPlusOptions(FInstanceID, OptionID, 
      NewValue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetHTMLBoldFont(const FontSet: WideString; 
  FontID: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FontSet, SN1);
    Result := DebenuPDFLibrarySetHTMLBoldFont(FInstanceID, SP1, FontID);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetHTMLBoldItalicFont(
  const FontSet: WideString; FontID: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FontSet, SN1);
    Result := DebenuPDFLibrarySetHTMLBoldItalicFont(FInstanceID, SP1, FontID);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetHTMLItalicFont(const FontSet: WideString; 
  FontID: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FontSet, SN1);
    Result := DebenuPDFLibrarySetHTMLItalicFont(FInstanceID, SP1, FontID);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetHTMLNormalFont(const FontSet: WideString; 
  FontID: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FontSet, SN1);
    Result := DebenuPDFLibrarySetHTMLNormalFont(FInstanceID, SP1, FontID);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetHeaderCommentsFromString(
  const Source: AnsiString): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Source, SN1);
    Result := DebenuPDFLibrarySetHeaderCommentsFromString(FInstanceID, SP1);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetImageAsMask(MaskType: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetImageAsMask(FInstanceID, MaskType);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetImageMask(FromRed, FromGreen, FromBlue, 
  ToRed, ToGreen, ToBlue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetImageMask(FInstanceID, FromRed, FromGreen, 
      FromBlue, ToRed, ToGreen, ToBlue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetImageMaskCMYK(FromC, FromM, FromY, FromK, 
  ToC, ToM, ToY, ToK: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetImageMaskCMYK(FInstanceID, FromC, FromM, 
      FromY, FromK, ToC, ToM, ToY, ToK);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetImageMaskFromImage(
  ImageID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetImageMaskFromImage(FInstanceID, ImageID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetImageOptional(
  OptionalContentGroupID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetImageOptional(FInstanceID, 
      OptionalContentGroupID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetImageResolution(Horizontal, Vertical, 
  Units: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetImageResolution(FInstanceID, Horizontal, 
      Vertical, Units);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetInformation(Key: Integer; 
  const NewValue: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewValue, SN1);
    Result := DebenuPDFLibrarySetInformation(FInstanceID, Key, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetJPEGQuality(Quality: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetJPEGQuality(FInstanceID, Quality);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetJavaScriptMode(JSMode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetJavaScriptMode(FInstanceID, JSMode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetKerning(const CharPair: WideString; 
  Adjustment: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(CharPair, SN1);
    Result := DebenuPDFLibrarySetKerning(FInstanceID, SP1, Adjustment);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetLineCap(LineCap: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetLineCap(FInstanceID, LineCap);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetLineColor(Red, Green, 
  Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetLineColor(FInstanceID, Red, Green, Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetLineColorCMYK(C, M, Y, K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetLineColorCMYK(FInstanceID, C, M, Y, K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetLineColorSep(const ColorName: WideString; 
  Tint: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ColorName, SN1);
    Result := DebenuPDFLibrarySetLineColorSep(FInstanceID, SP1, Tint);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetLineDash(DashOn, DashOff: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetLineDash(FInstanceID, DashOn, DashOff);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetLineDashEx(
  const DashValues: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(DashValues, SN1);
    Result := DebenuPDFLibrarySetLineDashEx(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetLineJoin(LineJoin: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetLineJoin(FInstanceID, LineJoin);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetLineShader(
  const ShaderName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ShaderName, SN1);
    Result := DebenuPDFLibrarySetLineShader(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetLineWidth(LineWidth: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetLineWidth(FInstanceID, LineWidth);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetMarkupAnnotStyle(Index: Integer; Red, 
  Green, Blue, Transparency: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetMarkupAnnotStyle(FInstanceID, Index, Red, 
      Green, Blue, Transparency);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetMeasureDictBoundsCount(MeasureDictID, 
  NewCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetMeasureDictBoundsCount(FInstanceID, 
      MeasureDictID, NewCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetMeasureDictBoundsItem(MeasureDictID, 
  ItemIndex: Integer; NewValue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetMeasureDictBoundsItem(FInstanceID, 
      MeasureDictID, ItemIndex, NewValue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetMeasureDictCoordinateSystem(MeasureDictID, 
  CoordinateSystemID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetMeasureDictCoordinateSystem(FInstanceID, 
      MeasureDictID, CoordinateSystemID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetMeasureDictGPTSCount(MeasureDictID, 
  NewCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetMeasureDictGPTSCount(FInstanceID, 
      MeasureDictID, NewCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetMeasureDictGPTSItem(MeasureDictID, 
  ItemIndex: Integer; NewValue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetMeasureDictGPTSItem(FInstanceID, 
      MeasureDictID, ItemIndex, NewValue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetMeasureDictLPTSCount(MeasureDictID, 
  NewCount: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetMeasureDictLPTSCount(FInstanceID, 
      MeasureDictID, NewCount);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetMeasureDictLPTSItem(MeasureDictID, 
  ItemIndex: Integer; NewValue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetMeasureDictLPTSItem(FInstanceID, 
      MeasureDictID, ItemIndex, NewValue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetMeasureDictPDU(MeasureDictID, LinearUnit, 
  AreaUnit, AngularUnit: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetMeasureDictPDU(FInstanceID, MeasureDictID, 
      LinearUnit, AreaUnit, AngularUnit);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetMeasurementUnits(
  MeasurementUnits: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetMeasurementUnits(FInstanceID, 
      MeasurementUnits);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetNeedAppearances(
  NewValue: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetNeedAppearances(FInstanceID, NewValue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetObjectFromString(ObjectNumber: Integer; 
  const Source: AnsiString): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Source, SN1);
    Result := DebenuPDFLibrarySetObjectFromString(FInstanceID, ObjectNumber, 
      SP1);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOpenActionDestination(OpenPage, 
  Zoom: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOpenActionDestination(FInstanceID, OpenPage, 
      Zoom);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOpenActionDestinationFull(OpenPage, Zoom, 
  DestType: Integer; Left, Top, Right, Bottom: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOpenActionDestinationFull(FInstanceID, 
      OpenPage, Zoom, DestType, Left, Top, Right, Bottom);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOpenActionJavaScript(
  const JavaScript: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(JavaScript, SN1);
    Result := DebenuPDFLibrarySetOpenActionJavaScript(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOpenActionMenu(
  const MenuItem: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(MenuItem, SN1);
    Result := DebenuPDFLibrarySetOpenActionMenu(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOptionalContentConfigLocked(
  OptionalContentConfigID, OptionalContentGroupID, NewLocked: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOptionalContentConfigLocked(FInstanceID, 
      OptionalContentConfigID, OptionalContentGroupID, NewLocked);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOptionalContentConfigState(
  OptionalContentConfigID, OptionalContentGroupID, NewState: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOptionalContentConfigState(FInstanceID, 
      OptionalContentConfigID, OptionalContentGroupID, NewState);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOptionalContentGroupName(
  OptionalContentGroupID: Integer; const NewGroupName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewGroupName, SN1);
    Result := DebenuPDFLibrarySetOptionalContentGroupName(FInstanceID, 
      OptionalContentGroupID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOptionalContentGroupPrintable(
  OptionalContentGroupID, Printable: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOptionalContentGroupPrintable(FInstanceID, 
      OptionalContentGroupID, Printable);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOptionalContentGroupVisible(
  OptionalContentGroupID, Visible: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOptionalContentGroupVisible(FInstanceID, 
      OptionalContentGroupID, Visible);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOrigin(Origin: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOrigin(FInstanceID, Origin);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOutlineColor(OutlineID: Integer; Red, 
  Green, Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOutlineColor(FInstanceID, OutlineID, Red, 
      Green, Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOutlineDestination(OutlineID, 
  DestPage: Integer; DestPosition: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOutlineDestination(FInstanceID, OutlineID, 
      DestPage, DestPosition);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOutlineDestinationFull(OutlineID, 
  DestPage, Zoom, DestType: Integer; Left, Top, Right, Bottom: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOutlineDestinationFull(FInstanceID, OutlineID, 
      DestPage, Zoom, DestType, Left, Top, Right, Bottom);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOutlineDestinationZoom(OutlineID, 
  DestPage: Integer; DestPosition: Double; Zoom: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOutlineDestinationZoom(FInstanceID, OutlineID, 
      DestPage, DestPosition, Zoom);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOutlineJavaScript(OutlineID: Integer; 
  const JavaScript: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(JavaScript, SN1);
    Result := DebenuPDFLibrarySetOutlineJavaScript(FInstanceID, OutlineID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOutlineNamedDestination(
  OutlineID: Integer; const DestName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(DestName, SN1);
    Result := DebenuPDFLibrarySetOutlineNamedDestination(FInstanceID, 
      OutlineID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOutlineOpenFile(OutlineID: Integer; 
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibrarySetOutlineOpenFile(FInstanceID, OutlineID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOutlineRemoteDestination(
  OutlineID: Integer; const FileName: WideString; OpenPage, Zoom, 
  DestType: Integer; PntLeft, PntTop, PntRight, PntBottom: Double; 
  NewWindow: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibrarySetOutlineRemoteDestination(FInstanceID, 
      OutlineID, SP1, OpenPage, Zoom, DestType, PntLeft, PntTop, PntRight, 
      PntBottom, NewWindow);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOutlineStyle(OutlineID, SetItalic, 
  SetBold: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOutlineStyle(FInstanceID, OutlineID, 
      SetItalic, SetBold);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOutlineTitle(OutlineID: Integer; 
  const NewTitle: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewTitle, SN1);
    Result := DebenuPDFLibrarySetOutlineTitle(FInstanceID, OutlineID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOutlineWebLink(OutlineID: Integer; 
  const Link: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Link, SN1);
    Result := DebenuPDFLibrarySetOutlineWebLink(FInstanceID, OutlineID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetOverprint(StrokingOverprint, 
  OtherOverprint, OverprintMode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetOverprint(FInstanceID, StrokingOverprint, 
      OtherOverprint, OverprintMode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPDFAMode(NewMode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetPDFAMode(FInstanceID, NewMode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPNGTransparencyColor(RedByte, GreenByte, 
  BlueByte: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetPNGTransparencyColor(FInstanceID, RedByte, 
      GreenByte, BlueByte);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPageActionMenu(
  const MenuItem: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(MenuItem, SN1);
    Result := DebenuPDFLibrarySetPageActionMenu(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPageBox(BoxType: Integer; Left, Top, 
  Width, Height: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetPageBox(FInstanceID, BoxType, Left, Top, 
      Width, Height);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPageContentFromString(
  const Source: AnsiString): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Source, SN1);
    Result := DebenuPDFLibrarySetPageContentFromString(FInstanceID, SP1);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPageDimensions(NewPageWidth, 
  NewPageHeight: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetPageDimensions(FInstanceID, NewPageWidth, 
      NewPageHeight);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPageLayout(
  NewPageLayout: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetPageLayout(FInstanceID, NewPageLayout);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPageMode(NewPageMode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetPageMode(FInstanceID, NewPageMode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPageSize(
  const PaperName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PaperName, SN1);
    Result := DebenuPDFLibrarySetPageSize(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPageThumbnail(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetPageThumbnail(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPageTransparencyGroup(CS, Isolate, 
  Knockout: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetPageTransparencyGroup(FInstanceID, CS, 
      Isolate, Knockout);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPageUserUnit(UserUnit: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetPageUserUnit(FInstanceID, UserUnit);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPrecision(NewPrecision: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetPrecision(FInstanceID, NewPrecision);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetPrinterDevModeFromString(
  const Source: AnsiString): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Source, SN1);
    Result := DebenuPDFLibrarySetPrinterDevModeFromString(FInstanceID, SP1);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetRenderCropType(
  NewCropType: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetRenderCropType(FInstanceID, NewCropType);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetRenderDCErasePage(
  NewErasePage: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetRenderDCErasePage(FInstanceID, NewErasePage);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetRenderDCOffset(NewOffsetX, 
  NewOffsetY: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetRenderDCOffset(FInstanceID, NewOffsetX, 
      NewOffsetY);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetRenderOptions(OptionID, 
  NewValue: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetRenderOptions(FInstanceID, OptionID, NewValue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetRenderScale(NewScale: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetRenderScale(FInstanceID, NewScale);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetScale(NewScale: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetScale(FInstanceID, NewScale);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetSignProcessCustomSubFilter(
  SignProcessID: Integer; const SubFilterStr: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(SubFilterStr, SN1);
    Result := DebenuPDFLibrarySetSignProcessCustomSubFilter(FInstanceID, 
      SignProcessID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetSignProcessField(SignProcessID: Integer; 
  const SignatureFieldName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(SignatureFieldName, SN1);
    Result := DebenuPDFLibrarySetSignProcessField(FInstanceID, SignProcessID, 
      SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetSignProcessFieldBounds(
  SignProcessID: Integer; Left, Top, Width, Height: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetSignProcessFieldBounds(FInstanceID, 
      SignProcessID, Left, Top, Width, Height);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetSignProcessFieldImageFromFile(
  SignProcessID: Integer; const ImageFileName: WideString; 
  Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ImageFileName, SN1);
    Result := DebenuPDFLibrarySetSignProcessFieldImageFromFile(FInstanceID, 
      SignProcessID, SP1, Options);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetSignProcessFieldPage(SignProcessID, 
  SignaturePage: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetSignProcessFieldPage(FInstanceID, 
      SignProcessID, SignaturePage);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetSignProcessInfo(SignProcessID: Integer; 
  const Reason, Location, ContactInfo: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
  SP3: PWideChar;
  SN3: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Reason, SN1);
    SP2 := StringParm(Location, SN2);
    SP3 := StringParm(ContactInfo, SN3);
    Result := DebenuPDFLibrarySetSignProcessInfo(FInstanceID, SignProcessID, 
      SP1, SP2, SP3);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
    if (SN3) then ReleaseBuffer(SP3);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetSignProcessKeyset(SignProcessID, 
  KeysetID: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetSignProcessKeyset(FInstanceID, SignProcessID, 
      KeysetID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetSignProcessPFXFromFile(
  SignProcessID: Integer; const PFXFileName, PFXPassword: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(PFXFileName, SN1);
    SP2 := StringParm(PFXPassword, SN2);
    Result := DebenuPDFLibrarySetSignProcessPFXFromFile(FInstanceID, 
      SignProcessID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetSignProcessPassthrough(SignProcessID, 
  SignatureLength: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetSignProcessPassthrough(FInstanceID, 
      SignProcessID, SignatureLength);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetSignProcessSubFilter(SignProcessID, 
  SubFilter: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetSignProcessSubFilter(FInstanceID, 
      SignProcessID, SubFilter);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTabOrderMode(
  const Mode: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Mode, SN1);
    Result := DebenuPDFLibrarySetTabOrderMode(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableBorderColor(TableID, 
  BorderIndex: Integer; Red, Green, Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableBorderColor(FInstanceID, TableID, 
      BorderIndex, Red, Green, Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableBorderColorCMYK(TableID, 
  BorderIndex: Integer; C, M, Y, K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableBorderColorCMYK(FInstanceID, TableID, 
      BorderIndex, C, M, Y, K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableBorderWidth(TableID, 
  BorderIndex: Integer; NewWidth: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableBorderWidth(FInstanceID, TableID, 
      BorderIndex, NewWidth);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableCellAlignment(TableID, FirstRow, 
  FirstColumn, LastRow, LastColumn, NewCellAlignment: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableCellAlignment(FInstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, NewCellAlignment);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableCellBackgroundColor(TableID, 
  FirstRow, FirstColumn, LastRow, LastColumn: Integer; Red, Green, 
  Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableCellBackgroundColor(FInstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, Red, Green, Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableCellBackgroundColorCMYK(TableID, 
  FirstRow, FirstColumn, LastRow, LastColumn: Integer; C, M, Y, 
  K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableCellBackgroundColorCMYK(FInstanceID, 
      TableID, FirstRow, FirstColumn, LastRow, LastColumn, C, M, Y, K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableCellBorderColor(TableID, FirstRow, 
  FirstColumn, LastRow, LastColumn, BorderIndex: Integer; Red, Green, 
  Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableCellBorderColor(FInstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, BorderIndex, Red, Green, 
      Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableCellBorderColorCMYK(TableID, 
  FirstRow, FirstColumn, LastRow, LastColumn, BorderIndex: Integer; C, M, Y, 
  K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableCellBorderColorCMYK(FInstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, BorderIndex, C, M, Y, K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableCellBorderWidth(TableID, FirstRow, 
  FirstColumn, LastRow, LastColumn, BorderIndex: Integer; 
  NewWidth: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableCellBorderWidth(FInstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, BorderIndex, NewWidth);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableCellContent(TableID, RowNumber, 
  ColumnNumber: Integer; const HTMLText: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(HTMLText, SN1);
    Result := DebenuPDFLibrarySetTableCellContent(FInstanceID, TableID, 
      RowNumber, ColumnNumber, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableCellPadding(TableID, FirstRow, 
  FirstColumn, LastRow, LastColumn, BorderIndex: Integer; 
  NewPadding: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableCellPadding(FInstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, BorderIndex, NewPadding);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableCellTextColor(TableID, FirstRow, 
  FirstColumn, LastRow, LastColumn: Integer; Red, Green, Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableCellTextColor(FInstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, Red, Green, Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableCellTextColorCMYK(TableID, FirstRow, 
  FirstColumn, LastRow, LastColumn: Integer; C, M, Y, K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableCellTextColorCMYK(FInstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, C, M, Y, K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableCellTextSize(TableID, FirstRow, 
  FirstColumn, LastRow, LastColumn: Integer; NewTextSize: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableCellTextSize(FInstanceID, TableID, 
      FirstRow, FirstColumn, LastRow, LastColumn, NewTextSize);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableColumnWidth(TableID, FirstColumn, 
  LastColumn: Integer; NewWidth: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableColumnWidth(FInstanceID, TableID, 
      FirstColumn, LastColumn, NewWidth);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableRowHeight(TableID, FirstRow, 
  LastRow: Integer; NewHeight: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableRowHeight(FInstanceID, TableID, FirstRow, 
      LastRow, NewHeight);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableThinBorders(TableID, 
  ThinBorders: Integer; Red, Green, Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableThinBorders(FInstanceID, TableID, 
      ThinBorders, Red, Green, Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTableThinBordersCMYK(TableID, 
  ThinBorders: Integer; C, M, Y, K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTableThinBordersCMYK(FInstanceID, TableID, 
      ThinBorders, C, M, Y, K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTempFile(
  const FileName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(FileName, SN1);
    Result := DebenuPDFLibrarySetTempFile(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTempPath(
  const NewPath: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(NewPath, SN1);
    Result := DebenuPDFLibrarySetTempPath(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextAlign(TextAlign: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextAlign(FInstanceID, TextAlign);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextCharSpacing(
  CharSpacing: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextCharSpacing(FInstanceID, CharSpacing);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextColor(Red, Green, 
  Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextColor(FInstanceID, Red, Green, Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextColorCMYK(C, M, Y, K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextColorCMYK(FInstanceID, C, M, Y, K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextColorSep(const ColorName: WideString; 
  Tint: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ColorName, SN1);
    Result := DebenuPDFLibrarySetTextColorSep(FInstanceID, SP1, Tint);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextExtractionArea(Left, Top, Width, 
  Height: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextExtractionArea(FInstanceID, Left, Top, 
      Width, Height);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextExtractionOptions(OptionID, 
  NewValue: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextExtractionOptions(FInstanceID, OptionID, 
      NewValue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextExtractionScaling(Options: Integer; 
  Horizontal, Vertical: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextExtractionScaling(FInstanceID, Options, 
      Horizontal, Vertical);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextExtractionWordGap(
  NewWordGap: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextExtractionWordGap(FInstanceID, NewWordGap);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextHighlight(Highlight: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextHighlight(FInstanceID, Highlight);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextHighlightColor(Red, Green, 
  Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextHighlightColor(FInstanceID, Red, Green, 
      Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextHighlightColorCMYK(C, M, Y, 
  K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextHighlightColorCMYK(FInstanceID, C, M, Y, 
      K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextHighlightColorSep(
  const ColorName: WideString; Tint: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ColorName, SN1);
    Result := DebenuPDFLibrarySetTextHighlightColorSep(FInstanceID, SP1, Tint);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextMode(TextMode: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextMode(FInstanceID, TextMode);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextRise(Rise: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextRise(FInstanceID, Rise);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextScaling(
  ScalePercentage: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextScaling(FInstanceID, ScalePercentage);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextShader(
  const ShaderName: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ShaderName, SN1);
    Result := DebenuPDFLibrarySetTextShader(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextSize(TextSize: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextSize(FInstanceID, TextSize);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextSpacing(Spacing: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextSpacing(FInstanceID, Spacing);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextUnderline(Underline: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextUnderline(FInstanceID, Underline);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextUnderlineColor(Red, Green, 
  Blue: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextUnderlineColor(FInstanceID, Red, Green, 
      Blue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextUnderlineColorCMYK(C, M, Y, 
  K: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextUnderlineColorCMYK(FInstanceID, C, M, Y, 
      K);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextUnderlineColorSep(
  const ColorName: WideString; Tint: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(ColorName, SN1);
    Result := DebenuPDFLibrarySetTextUnderlineColorSep(FInstanceID, SP1, Tint);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextUnderlineCustomDash(
  const DashPattern: WideString; DashPhase: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(DashPattern, SN1);
    Result := DebenuPDFLibrarySetTextUnderlineCustomDash(FInstanceID, SP1, 
      DashPhase);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextUnderlineDash(DashOn, 
  DashOff: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextUnderlineDash(FInstanceID, DashOn, 
      DashOff);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextUnderlineDistance(
  UnderlineDistance: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextUnderlineDistance(FInstanceID, 
      UnderlineDistance);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextUnderlineWidth(
  UnderlineWidth: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextUnderlineWidth(FInstanceID, 
      UnderlineWidth);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTextWordSpacing(
  WordSpacing: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTextWordSpacing(FInstanceID, WordSpacing);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetTransparency(
  Transparency: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetTransparency(FInstanceID, Transparency);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetViewerPreferences(Option, 
  NewValue: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySetViewerPreferences(FInstanceID, Option, 
      NewValue);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetXFAFormFieldAccess(
  const XFAFieldName: WideString; NewAccess: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(XFAFieldName, SN1);
    Result := DebenuPDFLibrarySetXFAFormFieldAccess(FInstanceID, SP1, 
      NewAccess);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetXFAFormFieldBorderColor(
  const XFAFieldName: WideString; Red, Green, Blue: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(XFAFieldName, SN1);
    Result := DebenuPDFLibrarySetXFAFormFieldBorderColor(FInstanceID, SP1, Red, 
      Green, Blue);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetXFAFormFieldBorderPresence(
  const XFAFieldName: WideString; NewPresence: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(XFAFieldName, SN1);
    Result := DebenuPDFLibrarySetXFAFormFieldBorderPresence(FInstanceID, SP1, 
      NewPresence);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetXFAFormFieldBorderWidth(
  const XFAFieldName: WideString; BorderWidth: Double): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(XFAFieldName, SN1);
    Result := DebenuPDFLibrarySetXFAFormFieldBorderWidth(FInstanceID, SP1, 
      BorderWidth);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetXFAFormFieldValue(const XFAFieldName, 
  NewValue: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(XFAFieldName, SN1);
    SP2 := StringParm(NewValue, SN2);
    Result := DebenuPDFLibrarySetXFAFormFieldValue(FInstanceID, SP1, SP2);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetXFAFromString(const Source: AnsiString; 
  Options: Integer): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Source, SN1);
    Result := DebenuPDFLibrarySetXFAFromString(FInstanceID, SP1, Options);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SetupCustomPrinter(
  const CustomPrinterName: WideString; Setting, NewValue: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(CustomPrinterName, SN1);
    Result := DebenuPDFLibrarySetupCustomPrinter(FInstanceID, SP1, Setting, 
      NewValue);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SignFile(const InputFileName, OpenPassword, 
  SignatureFieldName, OutputFileName, PFXFileName, PFXPassword, Reason, 
  Location, ContactInfo: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
  SP3: PWideChar;
  SN3: Boolean;
  SP4: PWideChar;
  SN4: Boolean;
  SP5: PWideChar;
  SN5: Boolean;
  SP6: PWideChar;
  SN6: Boolean;
  SP7: PWideChar;
  SN7: Boolean;
  SP8: PWideChar;
  SN8: Boolean;
  SP9: PWideChar;
  SN9: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(OpenPassword, SN2);
    SP3 := StringParm(SignatureFieldName, SN3);
    SP4 := StringParm(OutputFileName, SN4);
    SP5 := StringParm(PFXFileName, SN5);
    SP6 := StringParm(PFXPassword, SN6);
    SP7 := StringParm(Reason, SN7);
    SP8 := StringParm(Location, SN8);
    SP9 := StringParm(ContactInfo, SN9);
    Result := DebenuPDFLibrarySignFile(FInstanceID, SP1, SP2, SP3, SP4, SP5, 
      SP6, SP7, SP8, SP9);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
    if (SN3) then ReleaseBuffer(SP3);
    if (SN4) then ReleaseBuffer(SP4);
    if (SN5) then ReleaseBuffer(SP5);
    if (SN6) then ReleaseBuffer(SP6);
    if (SN7) then ReleaseBuffer(SP7);
    if (SN8) then ReleaseBuffer(SP8);
    if (SN9) then ReleaseBuffer(SP9);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.SplitPageText(Options: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibrarySplitPageText(FInstanceID, Options);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.StartPath(StartX, StartY: Double): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryStartPath(FInstanceID, StartX, StartY);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.StoreCustomDataFromFile(const Key, 
  FileName: WideString; Location, Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(Key, SN1);
    SP2 := StringParm(FileName, SN2);
    Result := DebenuPDFLibraryStoreCustomDataFromFile(FInstanceID, SP1, SP2, 
      Location, Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.StoreCustomDataFromString(const Key, 
  NewValue: AnsiString; Location, Options: Integer): Integer;
var
  SP1: PAnsiChar;
  SN1: Boolean;
  SP2: PAnsiChar;
  SN2: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := AnsiStringParm(Key, SN1);
    SP2 := AnsiStringParm(NewValue, SN2);
    Result := DebenuPDFLibraryStoreCustomDataFromString(FInstanceID, SP1, SP2, 
      Location, Options);
    if (SN1) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP1);
    if (SN2) then DebenuPDFLibraryReleaseBuffer(FInstanceID, SP2);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.StringResultLength(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryStringResultLength(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.TestTempPath(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryTestTempPath(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.TransformFile(const InputFileName, Password, 
  OutputFileName: WideString; TransformType, Options: Integer): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
  SP2: PWideChar;
  SN2: Boolean;
  SP3: PWideChar;
  SN3: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(InputFileName, SN1);
    SP2 := StringParm(Password, SN2);
    SP3 := StringParm(OutputFileName, SN3);
    Result := DebenuPDFLibraryTransformFile(FInstanceID, SP1, SP2, SP3, 
      TransformType, Options);
    if (SN1) then ReleaseBuffer(SP1);
    if (SN2) then ReleaseBuffer(SP2);
    if (SN3) then ReleaseBuffer(SP3);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.UnlockKey(
  const LicenseKey: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(LicenseKey, SN1);
    Result := DebenuPDFLibraryUnlockKey(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.Unlocked(): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryUnlocked(FInstanceID);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.UpdateAndFlattenFormField(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryUpdateAndFlattenFormField(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.UpdateAppearanceStream(
  Index: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryUpdateAppearanceStream(FInstanceID, Index);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.UpdateTrueTypeSubsettedFont(
  const SubsetChars: WideString): Integer;
var
  SP1: PWideChar;
  SN1: Boolean;
begin
  if FLibraryLoaded then
  begin
    SP1 := StringParm(SubsetChars, SN1);
    Result := DebenuPDFLibraryUpdateTrueTypeSubsettedFont(FInstanceID, SP1);
    if (SN1) then ReleaseBuffer(SP1);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.UseKerning(Kern: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryUseKerning(FInstanceID, Kern);
  end else
    Result := 0;
end;

function TDebenuPDFLibraryDLL1114.UseUnsafeContentStreams(
  SafetyLevel: Integer): Integer;
begin
  if FLibraryLoaded then
  begin
    Result := DebenuPDFLibraryUseUnsafeContentStreams(FInstanceID, SafetyLevel);
  end else
    Result := 0;
end;

end.
